<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>guchiBLO</title><link href="https://guchio3.github.io/guchiBLO/" rel="alternate"></link><link href="https://guchio3.github.io/guchiBLO/feeds/all.atom.xml" rel="self"></link><id>https://guchio3.github.io/guchiBLO/</id><updated>2017-11-27T00:00:00+09:00</updated><entry><title>Back Propagation For RNN</title><link href="https://guchio3.github.io/guchiBLO/Back-Propagation-For-RNN.html" rel="alternate"></link><published>2017-11-26T00:00:00+09:00</published><updated>2017-11-27T00:00:00+09:00</updated><author><name>guchio3</name></author><id>tag:guchio3.github.io,2017-11-26:/guchiBLO/Back-Propagation-For-RNN.html</id><summary type="html">&lt;p&gt;RNN における Back Probagation&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Outline&lt;/h1&gt;
&lt;p&gt;以下の様に Forward 方向の式が表される単純な Recurrent Neural Network (RNN) における誤差伝搬を数式をたどることにより理解する。&lt;br&gt;
行列の計算は &lt;a href="https://www.math.uwaterloo.ca/~hwolkowi/matrixcookbook.pdf"&gt;matrix cookbook&lt;/a&gt; が非常に参考になった。&lt;br&gt;
なお、バイアスは簡単のため無視し、また以下で偏微分でない分数形式の記述は要素毎の割り算を意味。&lt;/p&gt;
&lt;div class="math"&gt;\begin{equation}
    \begin{split}
        \bar{\bf h}_t &amp;amp;= W_i{\bf x_t} + W_h{\bf h_{t-1}} \\
        {\bf h}_t &amp;amp;= f_1(\bar{\bf h}_t) \\
        \bar{\bf y}_t &amp;amp;= W_o \cdot {\bf h}_t \\
        {\bf y}_t &amp;amp;= f_2(\bar{\bf y}_t)
    \end{split}
\end{equation}&lt;/div&gt;
&lt;p&gt;
なお、以下のように活性化関数 &lt;span class="math"&gt;\(f_2\)&lt;/span&gt; には softmax 関数を用い、誤差関数にはクロスエントロピー関数を使用。
&lt;/p&gt;
&lt;div class="math"&gt;\begin{equation}
    f_2({\bf v}_i) = \frac{exp({\bf v}_i)}{\sum_j exp({\bf v}_j)}
\end{equation}&lt;/div&gt;
&lt;div class="math"&gt;\begin{equation}
\label{cross_entropy}
    E = - \sum_{t'}{\bf l}_{t'}^T \cdot log({\bf y}_{t'})
\end{equation}&lt;/div&gt;
&lt;p&gt;
なお、&lt;span class="math"&gt;\({\bf v}_i\)&lt;/span&gt; は &lt;span class="math"&gt;\({\bf v}\)&lt;/span&gt; の &lt;span class="math"&gt;\(i\)&lt;/span&gt; 番目の要素を表し、&lt;span class="math"&gt;\({\bf l}_t\)&lt;/span&gt; は時間 &lt;span class="math"&gt;\(t\)&lt;/span&gt; における正解ラベルを表す。&lt;/p&gt;
&lt;p&gt;このとき、Back Probagation により &lt;span class="math"&gt;\(W_o, W_i, W_h\)&lt;/span&gt; を学習することを考える。&lt;br&gt;
これは誤差関数 &lt;span class="math"&gt;\(E\)&lt;/span&gt; を各パラメータにより次のように偏微分することにより求められる。
&lt;/p&gt;
&lt;div class="math"&gt;\begin{equation}
\label{target_round}
    \begin{split}
        \frac{\partial E}{\partial W_{o}} &amp;amp;= \frac{\partial \bar{\bf y}_t}{\partial W_{o}} \cdot \frac{\partial E}{\partial \bar{\bf y}_t} = {\bf h}_t \cdot \frac{\partial E}{\partial \bar{\bf y}_t} \\
        \frac{\partial E}{\partial W_{i}} &amp;amp;= \frac{\partial \bar{\bf h}_t}{\partial W_{i}} \cdot \frac{\partial E}{\partial \bar{\bf h}_t} = {\bf x}_t \cdot \frac{\partial E}{\partial \bar{\bf h}_t} \\
        \frac{\partial E}{\partial W_{h}} &amp;amp;= \frac{\partial \bar{\bf h}_t}{\partial W_{h}} \cdot \frac{\partial E}{\partial \bar{\bf h}_t} = {\bf h}_{t-1} \cdot \frac{\partial E}{\partial \bar{\bf h}_t} 
    \end{split}
\end{equation}&lt;/div&gt;
&lt;p&gt;よって式 (\ref{target_round}) より、&lt;span class="math"&gt;\(\frac{\partial E}{\partial \bar{\bf y}_t}\)&lt;/span&gt; および &lt;span class="math"&gt;\(\frac{\partial E}{\partial \bar{\bf h}_t}\)&lt;/span&gt; を求めれば良いことになる。&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(\frac{\partial E}{\partial \bar{\bf y}_t}\)&lt;/span&gt; は以下のように求められる。&lt;/p&gt;
&lt;div class="math"&gt;\begin{equation}
    \begin{split}
        \frac{\partial E}{\partial \bar{\bf y}_t} &amp;amp;= - \frac{\partial {\bf y}_t}{\partial \bar{\bf y}_t} \cdot \frac{\partial E}{\partial {\bf y}_t} \\
                                                  &amp;amp;= - \frac{\partial {\bf y}_t}{\partial \bar{\bf y}_t} \cdot \sum_{t'}\frac{\partial {\bf y}_{t'}}{\partial {\bf y}_t} \cdot \frac{{\bf l}_{t'}}{{\bf y}_{t'}}
    \end{split}
\end{equation}&lt;/div&gt;
&lt;p&gt;なお、&lt;span class="math"&gt;\({\bf I}\)&lt;/span&gt; は単位行列。&lt;br&gt;
また、&lt;span class="math"&gt;\(\frac{\partial E}{\partial {\bf y}_t}\)&lt;/span&gt; の計算は要素毎に考えてみると分かりやすい。&lt;/p&gt;
&lt;p&gt;ここで、&lt;span class="math"&gt;\(\frac{\partial {\bf y}_t}{\partial \bar{\bf y}_t}\)&lt;/span&gt; は softmax の微分を考えれば良く、&lt;/p&gt;
&lt;div class="math"&gt;\begin{equation}
    \begin{split}
         \frac{\partial f_2({\bf v}_{i})}{\partial {\bf v}_{k}} &amp;amp;= \frac{\frac{\partial exp({\bf v}_i)}{\partial {\bf v}_k} \cdot \sum_j exp({\bf v}_{j}) - exp({\bf v}_i) \cdot exp({\bf v}_k)}{(\sum_j exp({\bf v}_{j}))^2} \\
                                                                &amp;amp;= \frac{\frac{\partial exp({\bf v}_i)}{\partial {\bf v}_k}}{\sum_j exp({\bf v}_{j})} - \frac{exp({\bf v}_i)}{\sum_j exp({\bf v}_{j})} \cdot \frac{exp({\bf v}_k)}{\sum_j exp({\bf v}_{j})} \\
                                                                &amp;amp;= \begin{cases}
                                                                    f_2({\bf v}_{i})(1 - f_2({\bf v}_{k})) &amp;amp; (i = k) \\
                                                                    - f_2({\bf v}_{i}) \cdot f_2({\bf v}_{k}) &amp;amp; (i \neq k)
                                                                \end{cases}
    \end{split}
\end{equation}&lt;/div&gt;
&lt;p&gt;より、
&lt;/p&gt;
&lt;div class="math"&gt;\begin{equation}
    \begin{split}
        \frac{\partial {\bf y}_t}{\partial \bar{\bf y}_t} &amp;amp;= \left(
            \begin{array}{cccc}
            {\bf y}_{t1}(1 - {\bf y}_{t1}) &amp;amp; -{\bf y}_{t2}{\bf y}_{t1} &amp;amp; \ldots &amp;amp; -{\bf y}_{tN}{\bf y}_{t1} \\
            -{\bf y}_{t1}{\bf y}_{t2} &amp;amp; {\bf y}_{t2}(1 - {\bf y}_{t2}) &amp;amp; \ldots &amp;amp; -{\bf y}_{tN}{\bf y}_{t2} \\
            \vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots \\
            -{\bf y}_{t1}{\bf y}_{tN} &amp;amp; -{\bf y}_{t2}{\bf y}_{tN} &amp;amp; \ldots &amp;amp; {\bf y}_{tN}(1 - {\bf y}_{tN})
            \end{array}
        \right) \\
                                                          &amp;amp;= - ({\bf y}_t \cdot {\bf y}_t - ({\bf y}_t \odot {\bf I}))
    \end{split}
\end{equation}&lt;/div&gt;
&lt;p&gt;よって簡単のため &lt;span class="math"&gt;\(t = T\)&lt;/span&gt; のときについて考えると、&lt;/p&gt;
&lt;div class="math"&gt;\begin{equation}
    \begin{split}
        \frac{\partial E}{\partial \bar{\bf y}_T} &amp;amp;= ({\bf y}_T \cdot {\bf y}_T - {\bf y}_T \odot {\bf I}) \cdot \frac{{\bf l}_{T}}{{\bf y}_T} \\
                                                  &amp;amp;= {\bf y}_T - {\bf l}_T \;\; (\because \sum_i {\bf l}_{ti} = 1)
    \end{split}
\end{equation}&lt;/div&gt;
&lt;p&gt;以降は近いうちに追記予定。&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Recurrent Neural Network"></category><category term="Machine Learning"></category></entry><entry><title>Theano NaN Grad on Cumprod</title><link href="https://guchio3.github.io/guchiBLO/Theano_NaN_Grad_on_Cumprod.html" rel="alternate"></link><published>2017-10-26T00:00:00+09:00</published><updated>2017-10-26T00:00:00+09:00</updated><author><name>guchio3</name></author><id>tag:guchio3.github.io,2017-10-26:/guchiBLO/Theano_NaN_Grad_on_Cumprod.html</id><summary type="html">&lt;p&gt;Theano の cumprod を利用する際に gradient が NaN になるバグ&lt;/p&gt;</summary><content type="html">&lt;p&gt;以前 &lt;a href="https://www.nature.com/nature/journal/v538/n7626/full/nature20101.html"&gt;Differentiable neural computers&lt;/a&gt; を実装した際、&lt;/p&gt;
&lt;div class="math"&gt;\begin{equation}
\label{a_t_equation}
    {\bf a}_t[\phi_t[j]] = (1 - {\bf u}_t[\phi_t[j]])\prod_{i=1}^{j-1}{\bf u}_t[\phi_t[i]])
\end{equation}&lt;/div&gt;
&lt;p&gt;という式を Theano で実装するため theano.tensor.extra_ops.cumprod を使用した際に遭遇したバグ共有。&lt;/p&gt;
&lt;p&gt;症状としては gradient を計算をすると 1 iteration 目から NaN が現れるというものだったが &lt;a href="https://github.com/Theano/Theano/issues/5197"&gt;ここ&lt;/a&gt;をみて解決。&lt;br&gt;
どうやら入力に 0 が入ると　gradien 計算において 0 割りがおこり、NaN が出現するらしい。&lt;/p&gt;
&lt;p&gt;結果として行ったことは justheuristic さんが書いてくれているコードをそのまま使っただけだが、問題は解決した。&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Theano"></category><category term="Machine Learning"></category></entry><entry><title>Lasagne Segmentation Fault</title><link href="https://guchio3.github.io/guchiBLO/Lasagne_Segmentation_Fault.html" rel="alternate"></link><published>2017-10-16T19:00:00+09:00</published><updated>2017-10-16T19:00:00+09:00</updated><author><name>guchio3</name></author><id>tag:guchio3.github.io,2017-10-16:/guchiBLO/Lasagne_Segmentation_Fault.html</id><summary type="html">&lt;p&gt;Lasagne を GPU 上で使用した際に出る Segmentation Fault への対策&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Outline&lt;/h1&gt;
&lt;p&gt;Theano 上で動く Deep Learning Library である &lt;a href="https://lasagne.readthedocs.io/en/latest/"&gt;Lasagne&lt;/a&gt; を使った&lt;a href="https://github.com/snipsco/ntm-lasagne"&gt;コード&lt;/a&gt; GPU 上で使用した際、以下のエラーが出たのでその対策をした。&lt;br&gt;
このエラーは非常に厄介で、最初は自分で書いた別のプログラムで GPU を使用して際に起こったが、その時はエラーメッセージなしで勝手にプログラムが止まったので原因究明が非常に大変だった。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nv"&gt;PYTHONPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;. python examples/copy-task.py 
Using cuDNN version &lt;span class="m"&gt;5110&lt;/span&gt; on context None
Mapped name None to device cuda0: Tesla K80 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;:83:00.0&lt;span class="o"&gt;)&lt;/span&gt;
Segmentation fault &lt;span class="o"&gt;(&lt;/span&gt;core dumped&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;まずは&lt;a href="https://github.com/Theano/Theano/issues/6141"&gt;ここ&lt;/a&gt;を参考に、conda を使った際にインストールされる pygpu の version が悪いことを疑って以下を試した。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ conda install &lt;span class="nv"&gt;pygpu&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.6.2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;しかし結果は変わらず対策を探していると、&lt;a href="https://github.com/Theano/Theano/issues/4760"&gt;ここ&lt;/a&gt;に ~/.theanorc の device を gpu から cuda するとセグフォると書いてあったので device を cuda から gpu にしてみた。&lt;br&gt;
結果うまく行ったが、gpu にした場合バグが多く効率が悪くまた cuda で使える float64 が使えないとの情報もあるのでよりいい方法があれば追記予定。&lt;/p&gt;</content><category term="Theano"></category><category term="Lasagne"></category><category term="Machine Learning"></category></entry><entry><title>Libgpuarray For Theano 0.8.2</title><link href="https://guchio3.github.io/guchiBLO/Libgpuarray_For_Theano_0.8.2.html" rel="alternate"></link><published>2017-10-15T00:00:00+09:00</published><updated>2017-10-15T00:00:00+09:00</updated><author><name>guchio3</name></author><id>tag:guchio3.github.io,2017-10-15:/guchiBLO/Libgpuarray_For_Theano_0.8.2.html</id><summary type="html">&lt;p&gt;Theano 0.8.2 に適合する libgpuarray のインストール&lt;/p&gt;</summary><content type="html">&lt;p&gt;Theano (ver 0.8.2) から gpu を使用する際、以下のようなエラーが出たので対応した際のログ。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ERROR &lt;span class="o"&gt;(&lt;/span&gt;theano.sandbox.gpuarray&lt;span class="o"&gt;)&lt;/span&gt;: Could not initialize pygpu, support disabled
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;/home/guchio/miniconda2/envs/ntmenv-owl/lib/python2.7/site-packages/theano/sandbox/gpuarray/__init__.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;95&lt;/span&gt;, in &amp;lt;module&amp;gt;
    init_dev&lt;span class="o"&gt;(&lt;/span&gt;config.device&lt;span class="o"&gt;)&lt;/span&gt;
  File &lt;span class="s2"&gt;&amp;quot;/home/guchio/miniconda2/envs/ntmenv-owl/lib/python2.7/site-packages/theano/sandbox/gpuarray/__init__.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;46&lt;/span&gt;, in init_dev
    &lt;span class="s2"&gt;&amp;quot;Make sure Theano and libgpuarray/pygpu &amp;quot;&lt;/span&gt;
RuntimeError: &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Wrong major API version for gpuarray:&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;Make sure Theano and libgpuarray/pygpu are in sync.&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これは &lt;a href="https://github.com/Theano/libgpuarray/issues/183"&gt;Theano の issue&lt;/a&gt; を参照するに libgpuarray のバージョンと Theano のバージョンのミスマッチが原因ぽく、libgpuarray の tag v-9998 をインストールすることで解決できるぽい。&lt;/p&gt;
&lt;p&gt;そこで&lt;a href="https://coderwall.com/p/-wbo5q/pip-install-a-specific-github-repo-tag-or-branch"&gt;ここ&lt;/a&gt;を参考に pip 経由で以下のように libgpuarray をインストールしたが、以下のエラーを確認。&lt;br&gt;
ちなみに、#egg 以降は&lt;a href="https://stackoverflow.com/questions/21638929/how-to-determine-the-name-of-an-egg-for-a-python-package-on-github"&gt;ここ&lt;/a&gt;を参考に、libgpuarray の setup.py を参照した。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install -e git://github.com/Theano/libgpuarray.git@v-9998#egg&lt;span class="o"&gt;=&lt;/span&gt;pygpu
Obtaining pygpu from git+git://github.com/Theano/libgpuarray.git@v-9998#egg&lt;span class="o"&gt;=&lt;/span&gt;pygpu
  Cloning git://github.com/Theano/libgpuarray.git &lt;span class="o"&gt;(&lt;/span&gt;to v-9998&lt;span class="o"&gt;)&lt;/span&gt; to ./src/pygpu
    Complete output from &lt;span class="nb"&gt;command&lt;/span&gt; python setup.py egg_info:
    Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
      File &lt;span class="s2"&gt;&amp;quot;&amp;lt;string&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;1&lt;/span&gt;, in &amp;lt;module&amp;gt;
      File &lt;span class="s2"&gt;&amp;quot;/home/guchio/src/pygpu/setup.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;7&lt;/span&gt;, in &amp;lt;module&amp;gt;
        import Cython
    ImportError: No module named Cython

    ----------------------------------------
Command &lt;span class="s2"&gt;&amp;quot;python setup.py egg_info&amp;quot;&lt;/span&gt; failed with error code &lt;span class="m"&gt;1&lt;/span&gt; in /home/guchio/src/pygpu/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;そこで cython をインストールして再度挑戦。&lt;br&gt;
しかし以下のエラーを確認。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install -e git://github.com/Theano/libgpuarray.git@v-9998#egg&lt;span class="o"&gt;=&lt;/span&gt;pygpu
Obtaining pygpu from git+git://github.com/Theano/libgpuarray.git@v-9998#egg&lt;span class="o"&gt;=&lt;/span&gt;pygpu
  Updating ./src/pygpu clone &lt;span class="o"&gt;(&lt;/span&gt;to v-9998&lt;span class="o"&gt;)&lt;/span&gt;
Requirement already satisfied: mako&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.7 in ./miniconda2/envs/ntmenv-owl/lib/python2.7/site-packages/Mako-1.0.7-py2.7.egg &lt;span class="o"&gt;(&lt;/span&gt;from pygpu&lt;span class="o"&gt;)&lt;/span&gt;
Requirement already satisfied: MarkupSafe&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.9.2 in ./miniconda2/envs/ntmenv-owl/lib/python2.7/site-packages &lt;span class="o"&gt;(&lt;/span&gt;from mako&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.7-&amp;gt;pygpu&lt;span class="o"&gt;)&lt;/span&gt;
Installing collected packages: pygpu
  Found existing installation: pygpu &lt;span class="m"&gt;0&lt;/span&gt;.6.9
    Uninstalling pygpu-0.6.9:
      Successfully uninstalled pygpu-0.6.9
  Running setup.py develop &lt;span class="k"&gt;for&lt;/span&gt; pygpu
Complete output from &lt;span class="nb"&gt;command&lt;/span&gt; /home/guchio/miniconda2/envs/ntmenv-owl/bin/python -c &lt;span class="s2"&gt;&amp;quot;import setuptools, tokenize;__file__=&amp;#39;/home/guchio/src/pygpu/setup.py&amp;#39;;f=getattr(tokenize, &amp;#39;o&lt;/span&gt;
&lt;span class="s2"&gt;pen&amp;#39;, open)(__file__);code=f.read().replace(&amp;#39;\r\n&amp;#39;, &amp;#39;\n&amp;#39;);f.close();exec(compile(code, __file__, &amp;#39;exec&amp;#39;))&amp;quot;&lt;/span&gt; develop --no-deps:
    running develop
    running egg_info
    writing requirements to pygpu.egg-info/requires.txt
    writing pygpu.egg-info/PKG-INFO
    writing top-level names to pygpu.egg-info/top_level.txt
    writing dependency_links to pygpu.egg-info/dependency_links.txt
    reading manifest file &lt;span class="s1"&gt;&amp;#39;pygpu.egg-info/SOURCES.txt&amp;#39;&lt;/span&gt;
    writing manifest file &lt;span class="s1"&gt;&amp;#39;pygpu.egg-info/SOURCES.txt&amp;#39;&lt;/span&gt;
    running build_ext
    building &lt;span class="s1"&gt;&amp;#39;pygpu.gpuarray&amp;#39;&lt;/span&gt; extension
    gcc -pthread -B /home/guchio/miniconda2/envs/ntmenv-owl/compiler_compat -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -I/usr/local/cuda/include/ -fPIC -DGPUARRAY_SHARED -I/h
ome/guchio/miniconda2/envs/ntmenv-owl/lib/python2.7/site-packages/numpy/core/include -I/home/guchio/miniconda2/envs/ntmenv-owl/include/python2.7 -c pygpu/gpuarray.c -o build/temp.li
nux-x86_64-2.7/pygpu/gpuarray.o
    In file included from /home/guchio/miniconda2/envs/ntmenv-owl/lib/python2.7/site-packages/numpy/core/include/numpy/ndarraytypes.h:1809:0,
                     from /home/guchio/miniconda2/envs/ntmenv-owl/lib/python2.7/site-packages/numpy/core/include/numpy/ndarrayobject.h:18,
                     from /home/guchio/miniconda2/envs/ntmenv-owl/lib/python2.7/site-packages/numpy/core/include/numpy/arrayobject.h:4,
                     from pygpu/gpuarray.c:514:
/home/guchio/miniconda2/envs/ntmenv-owl/lib/python2.7/site-packages/numpy/core/include/numpy/npy_1_7_deprecated_api.h:15:2: warning: &lt;span class="c1"&gt;#warning &amp;quot;Using deprecated NumPy API, disabl&lt;/span&gt;
e it by &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="c1"&gt;#defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION&amp;quot; [-Wcpp]&lt;/span&gt;
     &lt;span class="c1"&gt;#warning &amp;quot;Using deprecated NumPy API, disable it by &amp;quot; \&lt;/span&gt;
      ^
    pygpu/gpuarray.c:516:28: fatal error: gpuarray/types.h: No such file or directory
    compilation terminated.
    error: &lt;span class="nb"&gt;command&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;gcc&amp;#39;&lt;/span&gt; failed with &lt;span class="nb"&gt;exit&lt;/span&gt; status &lt;span class="m"&gt;1&lt;/span&gt;

    ----------------------------------------
  Rolling back uninstall of pygpu
Command &lt;span class="s2"&gt;&amp;quot;/home/guchio/miniconda2/envs/ntmenv-owl/bin/python -c &amp;quot;&lt;/span&gt;import setuptools, tokenize&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nv"&gt;__file__&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/guchio/src/pygpu/setup.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;getattr&lt;span class="o"&gt;(&lt;/span&gt;tokenize, &lt;span class="s1"&gt;&amp;#39;open&amp;#39;&lt;/span&gt;, open&lt;span class="o"&gt;)(&lt;/span&gt;__file__&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;co
&lt;span class="nv"&gt;de&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;f.read&lt;span class="o"&gt;()&lt;/span&gt;.replace&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\r\n&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;f.close&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;exec&lt;span class="o"&gt;(&lt;/span&gt;compile&lt;span class="o"&gt;(&lt;/span&gt;code, __file__, &lt;span class="s1"&gt;&amp;#39;exec&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; develop --no-deps&amp;quot;&lt;/span&gt; failed with error code &lt;span class="m"&gt;1&lt;/span&gt; in /home/guchio/src/pygpu/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;その後いろいろ試したがうまく行かず、結局 Theano のバージョンを 0.8.2 から 0.9.0 に変更して解決した。&lt;br&gt;
試しに gpu の速度を次のコードで図った。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;theano&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shared&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tensor&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="n"&gt;vlen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;768&lt;/span&gt;  &lt;span class="c1"&gt;# 10 x #cores x # threads per core&lt;/span&gt;
&lt;span class="n"&gt;iters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;

&lt;span class="n"&gt;rng&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RandomState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shared&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asarray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rng&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vlen&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;floatX&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;([],&lt;/span&gt; &lt;span class="n"&gt;tensor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fgraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toposort&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;t0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iters&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Looping &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt; times took &lt;/span&gt;&lt;span class="si"&gt;%f&lt;/span&gt;&lt;span class="s2"&gt; seconds&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;t0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Result is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;any&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tensor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Elemwise&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;
              &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Gpu&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fgraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toposort&lt;/span&gt;&lt;span class="p"&gt;()]):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Used the cpu&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Used the gpu&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;結果は以下。(cpu は 1 core のみ使用。)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# GPU ver&lt;/span&gt;
Using cuDNN version &lt;span class="m"&gt;5110&lt;/span&gt; on context None
Mapped name None to device cuda0: Tesla K80 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;:83:00.0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;GpuElemwise&lt;span class="o"&gt;{&lt;/span&gt;exp,no_inplace&lt;span class="o"&gt;}(&lt;/span&gt;&amp;lt;GpuArrayType&amp;lt;None&amp;gt;&lt;span class="o"&gt;(&lt;/span&gt;float32, &lt;span class="o"&gt;(&lt;/span&gt;False,&lt;span class="o"&gt;))&lt;/span&gt;&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;, HostFromGpu&lt;span class="o"&gt;(&lt;/span&gt;gpuarray&lt;span class="o"&gt;)(&lt;/span&gt;GpuElemwise&lt;span class="o"&gt;{&lt;/span&gt;exp,no_inplace&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)]&lt;/span&gt;
Looping &lt;span class="m"&gt;1000&lt;/span&gt; &lt;span class="nb"&gt;times&lt;/span&gt; took &lt;span class="m"&gt;0&lt;/span&gt;.505921 seconds
Result is &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;.23178029  &lt;span class="m"&gt;1&lt;/span&gt;.61879349  &lt;span class="m"&gt;1&lt;/span&gt;.52278066 ...,  &lt;span class="m"&gt;2&lt;/span&gt;.20771813  &lt;span class="m"&gt;2&lt;/span&gt;.29967761  &lt;span class="m"&gt;1&lt;/span&gt;.62323296&lt;span class="o"&gt;]&lt;/span&gt;
Used the gpu

&lt;span class="c1"&gt;# CPU ver&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;Elemwise&lt;span class="o"&gt;{&lt;/span&gt;exp,no_inplace&lt;span class="o"&gt;}(&lt;/span&gt;&amp;lt;TensorType&lt;span class="o"&gt;(&lt;/span&gt;float32, vector&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt;&lt;span class="o"&gt;)]&lt;/span&gt;
Looping &lt;span class="m"&gt;1000&lt;/span&gt; &lt;span class="nb"&gt;times&lt;/span&gt; took &lt;span class="m"&gt;32&lt;/span&gt;.001292 seconds
Result is &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;.23178029  &lt;span class="m"&gt;1&lt;/span&gt;.61879337  &lt;span class="m"&gt;1&lt;/span&gt;.52278066 ...,  &lt;span class="m"&gt;2&lt;/span&gt;.20771813  &lt;span class="m"&gt;2&lt;/span&gt;.29967761  &lt;span class="m"&gt;1&lt;/span&gt;.62323284&lt;span class="o"&gt;]&lt;/span&gt;
Used the cpu
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一方、&lt;a href="https://guchio3.github.io/guchiBLO/Speeding_Up_Theano.html"&gt;以前の記事&lt;/a&gt;で紹介した amdlibm を使用すると cpu でも以下のように良い結果となった。&lt;br&gt;
今回の elementwise は amdlibm の効果が非常に出やすいものっぽい。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# CPU w/ amdlibm ver&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;Elemwise&lt;span class="o"&gt;{&lt;/span&gt;exp,no_inplace&lt;span class="o"&gt;}(&lt;/span&gt;&amp;lt;TensorType&lt;span class="o"&gt;(&lt;/span&gt;float32, vector&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt;&lt;span class="o"&gt;)]&lt;/span&gt;
Looping &lt;span class="m"&gt;1000&lt;/span&gt; &lt;span class="nb"&gt;times&lt;/span&gt; took &lt;span class="m"&gt;1&lt;/span&gt;.445175 seconds
Result is &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;.23178029  &lt;span class="m"&gt;1&lt;/span&gt;.61879337  &lt;span class="m"&gt;1&lt;/span&gt;.52278066 ...,  &lt;span class="m"&gt;2&lt;/span&gt;.20771813  &lt;span class="m"&gt;2&lt;/span&gt;.29967761  &lt;span class="m"&gt;1&lt;/span&gt;.62323284&lt;span class="o"&gt;]&lt;/span&gt;
Used the cpu
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;また、Theano 0.9.0 は今使っている Lasagne というライブラリの 0.1 との相性が悪く、lasagne/layers/pool.py に於いて&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;theano.tensor.signal&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;downsample&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;という行があるが、theano 0.9.0 は downsample をサポートから外しているため、ここで下のようなエラーが出る。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ImportError: cannot import name downsample
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一方 Lasagne 全体を bleeeding edge version にしてしまうと今書いているプログラムが動かなくなるため、あまり良い手ではないがこの pool.py だけ&lt;a href="https://github.com/Lasagne/Lasagne/blob/master/lasagne/layers/pool.py"&gt;最新のもの&lt;/a&gt;に手で書き換え解決。&lt;/p&gt;</content><category term="Theano"></category><category term="Lasagne"></category><category term="Machine Learning"></category></entry><entry><title>Meta-Learning with Memory-Augmented Neural Networks</title><link href="https://guchio3.github.io/guchiBLO/Meta-Learning_with_Memory-Augmented_Neural_Networks.html" rel="alternate"></link><published>2017-10-13T00:00:00+09:00</published><updated>2017-10-13T00:00:00+09:00</updated><author><name>guchio3</name></author><id>tag:guchio3.github.io,2017-10-13:/guchiBLO/Meta-Learning_with_Memory-Augmented_Neural_Networks.html</id><summary type="html">&lt;p&gt;Memory-Augmented Neural Networks (MANN) を使った Few-shot learning の試み&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Outline&lt;/h1&gt;
&lt;p&gt;ちょっと古いけど読めていなかった &lt;a href="http://proceedings.mlr.press/v48/santoro16.pdf"&gt;Meta-Learning with Memory-Augmented Neural Networks&lt;/a&gt; を読んだのでメモ。&lt;/p&gt;
&lt;p&gt;従来の gradient-based network は学習に大量のデータを必要とするため、新種のデータが入力された場合に対応するのが難しいが、Memory-Augmented Neural Networks (MANN) はこの状況に対応できそうだからやってみたという論文。&lt;/p&gt;
&lt;p&gt;タイトルにあるようにこの論文では Meta-Learning を行うことを軸に議論を展開している。&lt;br&gt;
この論文において Meta-Learning は以下の用に解釈される。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Although the term has been used in numerous senses, meta-learning generally refers to a scenario in which an agent learns at two levels, each associated with different time scales.&lt;/p&gt;
&lt;p&gt;Given its two-tiered organization, this form of meta- learning is often described as “learning to learn.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;つまり、Meta-Learning では短期的な学習と長期的な学習の２種類の学習を組み合わせて学習が行われる。&lt;br&gt;
短期的な学習では１つのタスクについての学習が行われ、長期的な学習ではこのような短期的な学習の仕方、つまりタスク一般についての学習の仕方が学習される。  &lt;/p&gt;
&lt;p&gt;現状、Meta-Learning は Recurrent Neural Networks (RNN) など記憶能力をもつ Neural Networks (NN) によりある程度行えるらしい。&lt;br&gt;
しかし、Scalable な Meta-Learning を行うには以下の２つの制約を満たす必要がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;記憶される情報が静的に保存され、かつそれらの情報に個別にアクセスできる。&lt;/li&gt;
&lt;li&gt;パラメーターの数と記憶できる情報の量に依存関係が無い。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらの条件は通常の RNN などでは普通満たされないが、MANN はこれを満たすため、この論文では MANN の一種である &lt;a href="https://arxiv.org/pdf/1410.5401.pdf"&gt;Neural Turing Machine&lt;/a&gt; (NTM) を用いて Meta-Learning を行っている。&lt;/p&gt;
&lt;p&gt;以降、図は特に指定がない限り元論文から引用。&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Meta-Learning Task Methodology&lt;/h1&gt;
&lt;h3&gt;Optimization&lt;/h3&gt;
&lt;p&gt;Neural Network を使った機械学習においては通常、あるデータセット &lt;span class="math"&gt;\(D\)&lt;/span&gt; についてパラメータ &lt;span class="math"&gt;\(\theta\)&lt;/span&gt; を、学習コスト &lt;span class="math"&gt;\(\cal L\)&lt;/span&gt; を最小化するように調整する。&lt;/p&gt;
&lt;p&gt;一方 Meta-Learning では以下の式 (\ref{meta_learn_func}) のように、データセットの分布 &lt;span class="math"&gt;\(p(D)\)&lt;/span&gt; に対して同様の最適化を図る。&lt;/p&gt;
&lt;div class="math"&gt;\begin{equation}
\label{meta_learn_func}
    \theta^{*} = argmin_{\theta}E_{D\sim p(D)}[{\cal L}(D;\theta)]
\end{equation}&lt;/div&gt;
&lt;h3&gt;Tasks&lt;/h3&gt;
&lt;p&gt;またこの論文におけるタスクは、系列型のデータセット &lt;span class="math"&gt;\(D = {d_t}^{T}_{t=1} = {({\bf x}_t, y_t)}^{T}_{t=1}\)&lt;/span&gt; (&lt;span class="math"&gt;\({\bf x_t}\)&lt;/span&gt; は入力、&lt;span class="math"&gt;\(y_t\)&lt;/span&gt; は入力に対する適切な正解ラベル) について行われるが、Few-shot learning を行うため少しトリッキー (下の図参照)。&lt;br&gt;
なお、下の図には Class Prediction と書かれているが分類だけでなく回帰も同様に扱う。&lt;/p&gt;
&lt;p&gt;すなわち、時間 &lt;span class="math"&gt;\(t\)&lt;/span&gt; においてモデルは &lt;span class="math"&gt;\({\bf x_t}\)&lt;/span&gt; および &lt;span class="math"&gt;\(y_{t-1}\)&lt;/span&gt; を入力として受け取り、&lt;span class="math"&gt;\({\bf x_t}\)&lt;/span&gt; に対応する正しいラベル &lt;span class="math"&gt;\(y_t\)&lt;/span&gt; を出力するように学習を行う。よって &lt;span class="math"&gt;\(t = 0\)&lt;/span&gt; での &lt;span class="math"&gt;\(y_{t-1}\)&lt;/span&gt; を &lt;span class="math"&gt;\(null\)&lt;/span&gt; としたとき、モデルが入力として受けとる系列データは &lt;span class="math"&gt;\(({\bf x_1}, null), ({\bf x_2}, y_1), ..., ({\bf x_T}, y_{T-1})\)&lt;/span&gt;、これに対してモデルが理想的に出力する系列データは &lt;span class="math"&gt;\(y_1, y_2 , ..., y_t\)&lt;/span&gt; である。&lt;/p&gt;
&lt;p&gt;なおこのタスクで扱うデータセットは一つではなく、モデルが大量のデータから各データセットの &lt;span class="math"&gt;\({\bf x_t}\)&lt;/span&gt; に対する &lt;span class="math"&gt;\(y_t\)&lt;/span&gt; を長期的な学習の中で憶えてしまって純粋な Few-shot learning が行えなくなるのを防ぐため、下の図のように &lt;span class="math"&gt;\({\bf x_t}\)&lt;/span&gt; に対する &lt;span class="math"&gt;\(y_t\)&lt;/span&gt; は各データセットの学習開始時に毎回シャッフルされる。&lt;br&gt;
そのため、&lt;span class="math"&gt;\(t = 1\)&lt;/span&gt; における &lt;span class="math"&gt;\(y_1\)&lt;/span&gt; は正解しようのないラベルとなる。&lt;/p&gt;
&lt;p&gt;&lt;img alt="figure1_a" src="https://guchio3.github.io/guchiBLO/images/Research/Meta-Learning_with_Memory_Augmented_Neural_Networks/figure1_a.jpg" style="display:block;margin-left:auto;margin-right:auto;" width="500px"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Memory-Augmented Model&lt;/h1&gt;
&lt;p&gt;MANN は近年研究され始めたモデルであり、主に NTM と &lt;a href="https://arxiv.org/pdf/1410.3916.pdf"&gt;Memory Networks&lt;/a&gt; に基づくモデルが幾つか提案されている。&lt;/p&gt;
&lt;p&gt;この論文では NTM を用いて Few-shot learning を行っているが、オリジナルの NTM に対して Least Recently Used Access を認識できるよう改良を加えている。&lt;br&gt;
詳細は時間の都合上省略。(時間のあるときに追記。)&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Experimental Results&lt;/h1&gt;
&lt;p&gt;この論文では Few-shot learning に関して分類、回帰問題のそれぞれについて、&lt;a href="https://github.com/brendenlake/omniglot"&gt;Omniglot&lt;/a&gt; および sampled functions from a Gaussian process という２つのデータセットを用いて実験を行っている。&lt;br&gt;
本記事では時間の都合上この内、Omniglot、つまり分類問題に関してのみ書く。&lt;/p&gt;
&lt;p&gt;Omniglot は以下の図に示すような手書き文字の画像データセット。 (Paper : &lt;a href="http://web.mit.edu/cocosci/Papers/Science-2015-Lake-1332-8.pdf"&gt;Human-level concept learning through probabilistic program introduction&lt;/a&gt; より引用。)&lt;br&gt;
1600 以上のクラスがあり、各クラス毎に幾つかのサンプルがある。&lt;br&gt;
この論文ではそれらを更に 90, 180, 270 度回転させて data augmentation を行っている。&lt;/p&gt;
&lt;p&gt;&lt;img alt="omniglot" src="https://guchio3.github.io/guchiBLO/images/Research/Meta-Learning_with_Memory_Augmented_Neural_Networks/omniglot.jpg" style="display:block;margin-left:auto;margin-right:auto;" width="700px"&gt;&lt;/p&gt;
&lt;p&gt;タスクは上の Tasks に書いたように行われる。&lt;br&gt;
入力された画像がどのクラスのものかということも大事だが、どのクラスでないかを認識して消去法的にクラス分類も行うこともできる。&lt;/p&gt;
&lt;p&gt;学習は 100,000 データセットに対して行われ、各データセットは Omniglot からランダムに 5 つ選ばれたクラスに対してランダムなラベルを付与することで構成される。&lt;br&gt;
その他詳細は論文参照。&lt;/p&gt;
&lt;p&gt;下の図が実際の動作イメージ。&lt;br&gt;
前半でクラス２の画像が２であることが判明しており、Few-shot learning ができる場合後半で同じクラスの画像を正しく２と分類できている。&lt;/p&gt;
&lt;p&gt;&lt;img alt="figure1_b" src="https://guchio3.github.io/guchiBLO/images/Research/Meta-Learning_with_Memory_Augmented_Neural_Networks/figure1_b.jpg" style="display:block;margin-left:auto;margin-right:auto;" width="500px"&gt;&lt;/p&gt;
&lt;p&gt;そして下の表が実験結果。&lt;/p&gt;
&lt;p&gt;HUMAN, LSTM, MANN はデータ入力されるにつれて基本的には精度が上がっており、MANN が非常に良い性能を出している。 &lt;br&gt;
なお、FEEDFORWARD は feed-forward RNN を指す。&lt;/p&gt;
&lt;p&gt;人間が 1st で 1/5 の確率でしか当たらないはずのラベルを 34.5% で当てているは懐疑的なのでもしかしたら実験設定について何か勘違いしているのかも...。&lt;br&gt;
一応、これよりも高い精度で 1st を分類している MANN は educated guessing (学習により良いあてずっぽう推測ができるようになった？) と書かれているがラベルはデータセットごとに
よくわかっていない...  &lt;/p&gt;
&lt;p&gt;&lt;img alt="result_table" src="https://guchio3.github.io/guchiBLO/images/Research/Meta-Learning_with_Memory_Augmented_Neural_Networks/result_table.jpg" style="display:block;margin-left:auto;margin-right:auto;" width="400px"&gt;&lt;/p&gt;
&lt;p&gt;下の図は LSTM および MANN の学習曲線。a, b は出力に onehot-vector を用いたもので、c, d は出力を文字列で行ったもの。文字列で行った場合、組み合わせによって大量のパターンを表現できるためクラス数が増えるに従いネットワークサイズが大きくなり学習が難しくなる onehot vector に比べてより多くのクラスを扱える。&lt;/p&gt;
&lt;p&gt;&lt;img alt="learning_curves" src="https://guchio3.github.io/guchiBLO/images/Research/Meta-Learning_with_Memory_Augmented_Neural_Networks/learning_curves.jpg" style="display:block;margin-left:auto;margin-right:auto;" width="700px"&gt;&lt;/p&gt;
&lt;p&gt;以上！&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Paper"></category><category term="Memory Augmented Neural Network"></category><category term="Few-Shot Learning"></category><category term="Machine Learning"></category></entry><entry><title>Speeding Up Theano</title><link href="https://guchio3.github.io/guchiBLO/Speeding_Up_Theano.html" rel="alternate"></link><published>2017-10-10T19:00:00+09:00</published><updated>2017-10-21T14:00:00+09:00</updated><author><name>guchio3</name></author><id>tag:guchio3.github.io,2017-10-10:/guchiBLO/Speeding_Up_Theano.html</id><summary type="html">&lt;p&gt;Theano の速度を改良した際のメモ&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Outline&lt;/h1&gt;
&lt;p&gt;Theano の速度向上のため行ったことをメモ。&lt;/p&gt;
&lt;p&gt;なお、使用した Theano のバージョンは 0.8.2 であり、os 情報は以下の通り。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat /proc/version
Linux version &lt;span class="m"&gt;4&lt;/span&gt;.4.0-93-generic &lt;span class="o"&gt;(&lt;/span&gt;buildd@lgw01-03&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;gcc version &lt;span class="m"&gt;5&lt;/span&gt;.4.0 &lt;span class="m"&gt;20160609&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;Ubuntu &lt;span class="m"&gt;5&lt;/span&gt;.4.0-6ubuntu1~16.04.4&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#116-Ubuntu SMP Fri Aug 11 21:17:51 UTC 2017&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h1&gt;Profile the program&lt;/h1&gt;
&lt;p&gt;Theano には &lt;a href="http://deeplearning.net/software/theano_versions/0.8.X/tutorial/profiling.html"&gt;profile 機能&lt;/a&gt;があり、どの部分が速度上 (他メモリ使用量なども確認できる) のボトルネックかを簡単に確認できる。&lt;br&gt;
目的によって様々な利用法があるが、私は以下のように利用した。&lt;/p&gt;
&lt;p&gt;まず、プログラム内で &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;theano&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;profile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とする。これにより theano.config が設定できる。&lt;a href="http://deeplearning.net/software/theano_versions/0.8.X/library/config.html?highlight=profile#config.profile"&gt;なお theano.config の状態は以下のコマンドで確認すれば良い。&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python -c &lt;span class="s1"&gt;&amp;#39;import theano; print(theano.config)&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; less
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以下が結果の一部。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Function &lt;span class="nv"&gt;profiling&lt;/span&gt;
&lt;span class="o"&gt;==================&lt;/span&gt;
  Message: examples/run_tasks.py:376
  Time in &lt;span class="m"&gt;100&lt;/span&gt; calls to Function.__call__: &lt;span class="m"&gt;5&lt;/span&gt;.591766e+01s
  Time in Function.fn.__call__: &lt;span class="m"&gt;5&lt;/span&gt;.585304e+01s &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;99&lt;/span&gt;.884%&lt;span class="o"&gt;)&lt;/span&gt;
  Time in thunks: &lt;span class="m"&gt;5&lt;/span&gt;.549018e+01s &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;99&lt;/span&gt;.236%&lt;span class="o"&gt;)&lt;/span&gt;
  Total compile time: &lt;span class="m"&gt;9&lt;/span&gt;.343460e+02s
    Number of Apply nodes: &lt;span class="m"&gt;1288&lt;/span&gt;
    Theano Optimizer time: &lt;span class="m"&gt;8&lt;/span&gt;.834189e+02s
       Theano validate time: &lt;span class="m"&gt;2&lt;/span&gt;.949661e+00s
    Theano Linker &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;includes C, CUDA code generation/compiling&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;4&lt;/span&gt;.475670e+01s
       Import &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;.738601e-01s

Time in all call to theano.grad&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;.802125e+01s
Time since theano import &lt;span class="m"&gt;1045&lt;/span&gt;.185s
Class
---
&amp;lt;% time&amp;gt; &amp;lt;sum %&amp;gt; &amp;lt;apply time&amp;gt; &amp;lt;&lt;span class="nb"&gt;time&lt;/span&gt; per call&amp;gt; &amp;lt;type&amp;gt; &amp;lt;&lt;span class="c1"&gt;#call&amp;gt; &amp;lt;#apply&amp;gt; &amp;lt;Class name&amp;gt;&lt;/span&gt;
  &lt;span class="m"&gt;99&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.0%      &lt;span class="m"&gt;54&lt;/span&gt;.942s       &lt;span class="m"&gt;2&lt;/span&gt;.75e-01s     Py     &lt;span class="m"&gt;200&lt;/span&gt;       &lt;span class="m"&gt;2&lt;/span&gt;   theano.scan_module.scan_op.Scan
   &lt;span class="m"&gt;0&lt;/span&gt;.4%    &lt;span class="m"&gt;99&lt;/span&gt;.5%       &lt;span class="m"&gt;0&lt;/span&gt;.243s       &lt;span class="m"&gt;3&lt;/span&gt;.55e-06s     C    &lt;span class="m"&gt;68500&lt;/span&gt;     &lt;span class="m"&gt;685&lt;/span&gt;   theano.tensor.elemwise.Elemwise
   &lt;span class="m"&gt;0&lt;/span&gt;.2%    &lt;span class="m"&gt;99&lt;/span&gt;.6%       &lt;span class="m"&gt;0&lt;/span&gt;.095s       &lt;span class="m"&gt;9&lt;/span&gt;.54e-05s     Py    &lt;span class="m"&gt;1000&lt;/span&gt;      &lt;span class="m"&gt;10&lt;/span&gt;   theano.tensor.blas.Dot22
   &lt;span class="m"&gt;0&lt;/span&gt;.1%    &lt;span class="m"&gt;99&lt;/span&gt;.7%       &lt;span class="m"&gt;0&lt;/span&gt;.053s       &lt;span class="m"&gt;6&lt;/span&gt;.93e-06s     C     &lt;span class="m"&gt;7600&lt;/span&gt;      &lt;span class="m"&gt;76&lt;/span&gt;   theano.tensor.basic.Alloc
   &lt;span class="m"&gt;0&lt;/span&gt;.1%    &lt;span class="m"&gt;99&lt;/span&gt;.8%       &lt;span class="m"&gt;0&lt;/span&gt;.033s       &lt;span class="m"&gt;3&lt;/span&gt;.25e-04s     C      &lt;span class="m"&gt;100&lt;/span&gt;       &lt;span class="m"&gt;1&lt;/span&gt;   theano.tensor.nnet.nnet.SoftmaxWithBias
   &lt;span class="m"&gt;0&lt;/span&gt;.1%    &lt;span class="m"&gt;99&lt;/span&gt;.8%       &lt;span class="m"&gt;0&lt;/span&gt;.028s       &lt;span class="m"&gt;9&lt;/span&gt;.45e-05s     Py     &lt;span class="m"&gt;300&lt;/span&gt;       &lt;span class="m"&gt;3&lt;/span&gt;   theano.tensor.blas.Gemm
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.9%       &lt;span class="m"&gt;0&lt;/span&gt;.014s       &lt;span class="m"&gt;7&lt;/span&gt;.81e-07s     C    &lt;span class="m"&gt;17300&lt;/span&gt;     &lt;span class="m"&gt;173&lt;/span&gt;   theano.compile.ops.Shape_i
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.9%       &lt;span class="m"&gt;0&lt;/span&gt;.011s       &lt;span class="m"&gt;8&lt;/span&gt;.60e-06s     C     &lt;span class="m"&gt;1300&lt;/span&gt;      &lt;span class="m"&gt;13&lt;/span&gt;   theano.tensor.basic.Join
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.9%       &lt;span class="m"&gt;0&lt;/span&gt;.010s       &lt;span class="m"&gt;2&lt;/span&gt;.72e-06s     C     &lt;span class="m"&gt;3600&lt;/span&gt;      &lt;span class="m"&gt;36&lt;/span&gt;   theano.tensor.basic.Reshape
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.9%       &lt;span class="m"&gt;0&lt;/span&gt;.010s       &lt;span class="m"&gt;1&lt;/span&gt;.19e-05s     C      &lt;span class="m"&gt;800&lt;/span&gt;       &lt;span class="m"&gt;8&lt;/span&gt;   theano.tensor.subtensor.IncSubtensor
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.9%       &lt;span class="m"&gt;0&lt;/span&gt;.008s       &lt;span class="m"&gt;1&lt;/span&gt;.13e-06s     C     &lt;span class="m"&gt;7500&lt;/span&gt;      &lt;span class="m"&gt;75&lt;/span&gt;   theano.tensor.subtensor.Subtensor
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.9%       &lt;span class="m"&gt;0&lt;/span&gt;.007s       &lt;span class="m"&gt;1&lt;/span&gt;.03e-06s     C     &lt;span class="m"&gt;7100&lt;/span&gt;      &lt;span class="m"&gt;71&lt;/span&gt;   theano.tensor.elemwise.DimShuffle
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.9%       &lt;span class="m"&gt;0&lt;/span&gt;.006s       &lt;span class="m"&gt;3&lt;/span&gt;.20e-05s     Py     &lt;span class="m"&gt;200&lt;/span&gt;       &lt;span class="m"&gt;2&lt;/span&gt;   theano.tensor.subtensor.AdvancedSubtensor
   &lt;span class="m"&gt;0&lt;/span&gt;.0%   &lt;span class="m"&gt;100&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.006s       &lt;span class="m"&gt;7&lt;/span&gt;.98e-07s     C     &lt;span class="m"&gt;7700&lt;/span&gt;      &lt;span class="m"&gt;77&lt;/span&gt;   theano.tensor.opt.MakeVector
   &lt;span class="m"&gt;0&lt;/span&gt;.0%   &lt;span class="m"&gt;100&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.006s       &lt;span class="m"&gt;5&lt;/span&gt;.55e-05s     Py     &lt;span class="m"&gt;100&lt;/span&gt;       &lt;span class="m"&gt;1&lt;/span&gt;   theano.tensor.subtensor.AdvancedIncSubtensor
   &lt;span class="m"&gt;0&lt;/span&gt;.0%   &lt;span class="m"&gt;100&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.004s       &lt;span class="m"&gt;3&lt;/span&gt;.89e-05s     Py     &lt;span class="m"&gt;100&lt;/span&gt;       &lt;span class="m"&gt;1&lt;/span&gt;   theano.tensor.basic.Nonzero
   &lt;span class="m"&gt;0&lt;/span&gt;.0%   &lt;span class="m"&gt;100&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.004s       &lt;span class="m"&gt;3&lt;/span&gt;.73e-05s     C      &lt;span class="m"&gt;100&lt;/span&gt;       &lt;span class="m"&gt;1&lt;/span&gt;   theano.tensor.nnet.nnet.SoftmaxGrad
   &lt;span class="m"&gt;0&lt;/span&gt;.0%   &lt;span class="m"&gt;100&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.003s       &lt;span class="m"&gt;1&lt;/span&gt;.69e-05s     C      &lt;span class="m"&gt;200&lt;/span&gt;       &lt;span class="m"&gt;2&lt;/span&gt;   theano.tensor.subtensor.AdvancedSubtensor1
   &lt;span class="m"&gt;0&lt;/span&gt;.0%   &lt;span class="m"&gt;100&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.003s       &lt;span class="m"&gt;6&lt;/span&gt;.30e-06s     C      &lt;span class="m"&gt;400&lt;/span&gt;       &lt;span class="m"&gt;4&lt;/span&gt;   theano.tensor.elemwise.Sum
   &lt;span class="m"&gt;0&lt;/span&gt;.0%   &lt;span class="m"&gt;100&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.001s       &lt;span class="m"&gt;6&lt;/span&gt;.83e-07s     C     &lt;span class="m"&gt;1700&lt;/span&gt;      &lt;span class="m"&gt;17&lt;/span&gt;   theano.tensor.basic.ScalarFromTensor
   ... &lt;span class="o"&gt;(&lt;/span&gt;remaining &lt;span class="m"&gt;5&lt;/span&gt; Classes account &lt;span class="k"&gt;for&lt;/span&gt;   &lt;span class="m"&gt;0&lt;/span&gt;.01%&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.00s&lt;span class="o"&gt;)&lt;/span&gt; of the runtime&lt;span class="o"&gt;)&lt;/span&gt;

Ops
---
&amp;lt;% time&amp;gt; &amp;lt;sum %&amp;gt; &amp;lt;apply time&amp;gt; &amp;lt;&lt;span class="nb"&gt;time&lt;/span&gt; per call&amp;gt; &amp;lt;type&amp;gt; &amp;lt;&lt;span class="c1"&gt;#call&amp;gt; &amp;lt;#apply&amp;gt; &amp;lt;Op name&amp;gt;&lt;/span&gt;
  &lt;span class="m"&gt;87&lt;/span&gt;.7%    &lt;span class="m"&gt;87&lt;/span&gt;.7%      &lt;span class="m"&gt;48&lt;/span&gt;.643s       &lt;span class="m"&gt;4&lt;/span&gt;.86e-01s     Py     &lt;span class="m"&gt;100&lt;/span&gt;        &lt;span class="m"&gt;1&lt;/span&gt;   forall_inplace,cpu,grad_of_scan_fn&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;grad_of_scan_fn&lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="m"&gt;11&lt;/span&gt;.4%    &lt;span class="m"&gt;99&lt;/span&gt;.0%       &lt;span class="m"&gt;6&lt;/span&gt;.300s       &lt;span class="m"&gt;6&lt;/span&gt;.30e-02s     Py     &lt;span class="m"&gt;100&lt;/span&gt;        &lt;span class="m"&gt;1&lt;/span&gt;   forall_inplace,cpu,scan_fn&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.2%    &lt;span class="m"&gt;99&lt;/span&gt;.2%       &lt;span class="m"&gt;0&lt;/span&gt;.095s       &lt;span class="m"&gt;9&lt;/span&gt;.54e-05s     Py    &lt;span class="m"&gt;1000&lt;/span&gt;       &lt;span class="m"&gt;10&lt;/span&gt;   Dot22
   &lt;span class="m"&gt;0&lt;/span&gt;.1%    &lt;span class="m"&gt;99&lt;/span&gt;.3%       &lt;span class="m"&gt;0&lt;/span&gt;.053s       &lt;span class="m"&gt;6&lt;/span&gt;.93e-06s     C     &lt;span class="m"&gt;7600&lt;/span&gt;       &lt;span class="m"&gt;76&lt;/span&gt;   Alloc
   &lt;span class="m"&gt;0&lt;/span&gt;.1%    &lt;span class="m"&gt;99&lt;/span&gt;.3%       &lt;span class="m"&gt;0&lt;/span&gt;.033s       &lt;span class="m"&gt;5&lt;/span&gt;.49e-06s     C     &lt;span class="m"&gt;6000&lt;/span&gt;       &lt;span class="m"&gt;60&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Clip&lt;span class="o"&gt;}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.1%    &lt;span class="m"&gt;99&lt;/span&gt;.4%       &lt;span class="m"&gt;0&lt;/span&gt;.033s       &lt;span class="m"&gt;3&lt;/span&gt;.25e-04s     C      &lt;span class="m"&gt;100&lt;/span&gt;        &lt;span class="m"&gt;1&lt;/span&gt;   SoftmaxWithBias
   &lt;span class="m"&gt;0&lt;/span&gt;.1%    &lt;span class="m"&gt;99&lt;/span&gt;.4%       &lt;span class="m"&gt;0&lt;/span&gt;.029s       &lt;span class="m"&gt;2&lt;/span&gt;.56e-06s     C     &lt;span class="m"&gt;11300&lt;/span&gt;      &lt;span class="m"&gt;113&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Add&lt;span class="o"&gt;}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.1%    &lt;span class="m"&gt;99&lt;/span&gt;.5%       &lt;span class="m"&gt;0&lt;/span&gt;.028s       &lt;span class="m"&gt;9&lt;/span&gt;.45e-05s     Py     &lt;span class="m"&gt;300&lt;/span&gt;        &lt;span class="m"&gt;3&lt;/span&gt;   Gemm&lt;span class="o"&gt;{&lt;/span&gt;inplace&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.1%    &lt;span class="m"&gt;99&lt;/span&gt;.6%       &lt;span class="m"&gt;0&lt;/span&gt;.028s       &lt;span class="m"&gt;4&lt;/span&gt;.77e-06s     C     &lt;span class="m"&gt;5900&lt;/span&gt;       &lt;span class="m"&gt;59&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{((&lt;/span&gt;i0 * i1&lt;span class="o"&gt;)&lt;/span&gt; - &lt;span class="o"&gt;((&lt;/span&gt;i2 * i3&lt;span class="o"&gt;)&lt;/span&gt; / sqrt&lt;span class="o"&gt;((&lt;/span&gt;i2 + i4 + i5 + sqr&lt;span class="o"&gt;(&lt;/span&gt;i6&lt;span class="o"&gt;)))))}}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.6%       &lt;span class="m"&gt;0&lt;/span&gt;.024s       &lt;span class="m"&gt;4&lt;/span&gt;.11e-06s     C     &lt;span class="m"&gt;5900&lt;/span&gt;       &lt;span class="m"&gt;59&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{((&lt;/span&gt;i0 * i1&lt;span class="o"&gt;)&lt;/span&gt; + &lt;span class="o"&gt;(&lt;/span&gt;i2 * i3&lt;span class="o"&gt;))}}&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.6%       &lt;span class="m"&gt;0&lt;/span&gt;.020s       &lt;span class="m"&gt;2&lt;/span&gt;.91e-06s     C     &lt;span class="m"&gt;7000&lt;/span&gt;       &lt;span class="m"&gt;70&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Mul&lt;span class="o"&gt;}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.7%       &lt;span class="m"&gt;0&lt;/span&gt;.020s       &lt;span class="m"&gt;1&lt;/span&gt;.95e-04s     C      &lt;span class="m"&gt;100&lt;/span&gt;        &lt;span class="m"&gt;1&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;sqr,no_inplace&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.7%       &lt;span class="m"&gt;0&lt;/span&gt;.019s       &lt;span class="m"&gt;2&lt;/span&gt;.74e-06s     C     &lt;span class="m"&gt;7000&lt;/span&gt;       &lt;span class="m"&gt;70&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{(&lt;/span&gt;i0 * sqr&lt;span class="o"&gt;(&lt;/span&gt;i1&lt;span class="o"&gt;))}}&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.7%       &lt;span class="m"&gt;0&lt;/span&gt;.018s       &lt;span class="m"&gt;2&lt;/span&gt;.83e-06s     C     &lt;span class="m"&gt;6200&lt;/span&gt;       &lt;span class="m"&gt;62&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;add,no_inplace&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.8%       &lt;span class="m"&gt;0&lt;/span&gt;.011s       &lt;span class="m"&gt;8&lt;/span&gt;.60e-06s     C     &lt;span class="m"&gt;1300&lt;/span&gt;       &lt;span class="m"&gt;13&lt;/span&gt;   Join
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.8%       &lt;span class="m"&gt;0&lt;/span&gt;.011s       &lt;span class="m"&gt;1&lt;/span&gt;.33e-05s     C      &lt;span class="m"&gt;800&lt;/span&gt;        &lt;span class="m"&gt;8&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{((&lt;/span&gt;i0 * i1&lt;span class="o"&gt;)&lt;/span&gt; - &lt;span class="o"&gt;((&lt;/span&gt;i2 * i3&lt;span class="o"&gt;)&lt;/span&gt; / sqrt&lt;span class="o"&gt;((&lt;/span&gt;i2 + i4 + i5 + sqr&lt;span class="o"&gt;(&lt;/span&gt;i6&lt;span class="o"&gt;)))))}}&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.8%       &lt;span class="m"&gt;0&lt;/span&gt;.009s       &lt;span class="m"&gt;3&lt;/span&gt;.28e-06s     C     &lt;span class="m"&gt;2700&lt;/span&gt;       &lt;span class="m"&gt;27&lt;/span&gt;   Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.8%       &lt;span class="m"&gt;0&lt;/span&gt;.008s       &lt;span class="m"&gt;6&lt;/span&gt;.85e-06s     C     &lt;span class="m"&gt;1100&lt;/span&gt;       &lt;span class="m"&gt;11&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;clip,no_inplace&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.8%       &lt;span class="m"&gt;0&lt;/span&gt;.007s       &lt;span class="m"&gt;9&lt;/span&gt;.06e-07s     C     &lt;span class="m"&gt;7500&lt;/span&gt;       &lt;span class="m"&gt;75&lt;/span&gt;   Shape_i&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.8%       &lt;span class="m"&gt;0&lt;/span&gt;.007s       &lt;span class="m"&gt;6&lt;/span&gt;.60e-05s     C      &lt;span class="m"&gt;100&lt;/span&gt;        &lt;span class="m"&gt;1&lt;/span&gt;   IncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;Inc&lt;span class="p"&gt;;&lt;/span&gt;:int64:&lt;span class="o"&gt;}&lt;/span&gt;
   ... &lt;span class="o"&gt;(&lt;/span&gt;remaining &lt;span class="m"&gt;109&lt;/span&gt; Ops account &lt;span class="k"&gt;for&lt;/span&gt;   &lt;span class="m"&gt;0&lt;/span&gt;.17%&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.10s&lt;span class="o"&gt;)&lt;/span&gt; of the runtime&lt;span class="o"&gt;)&lt;/span&gt;

Apply
------
&amp;lt;% time&amp;gt; &amp;lt;sum %&amp;gt; &amp;lt;apply time&amp;gt; &amp;lt;&lt;span class="nb"&gt;time&lt;/span&gt; per call&amp;gt; &amp;lt;&lt;span class="c1"&gt;#call&amp;gt; &amp;lt;id&amp;gt; &amp;lt;Apply name&amp;gt;&lt;/span&gt;
  &lt;span class="m"&gt;87&lt;/span&gt;.7%    &lt;span class="m"&gt;87&lt;/span&gt;.7%      &lt;span class="m"&gt;48&lt;/span&gt;.643s       &lt;span class="m"&gt;4&lt;/span&gt;.86e-01s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;783&lt;/span&gt;   forall_inplace,cpu,grad_of_scan_fn&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;grad_of_scan_fn&lt;span class="o"&gt;}(&lt;/span&gt;Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{&lt;/span&gt;Switch&lt;span class="o"&gt;(&lt;/span&gt;EQ&lt;span class="o"&gt;(&lt;/span&gt;i0, i1&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;((&lt;/span&gt;i2 * i3&lt;span class="o"&gt;)&lt;/span&gt; // &lt;span class="o"&gt;(&lt;/span&gt;i4 * i0&lt;span class="o"&gt;))&lt;/span&gt;, i0&lt;span class="o"&gt;)}}&lt;/span&gt;. &lt;span class="m"&gt;0&lt;/span&gt;, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;sqr,no_inplace&lt;span class="o"&gt;}&lt;/span&gt;.0, InplaceDimShuffle&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;,1,3,2&lt;span class="o"&gt;}&lt;/span&gt;.0, InplaceDimShuffle&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;,1,3,2&lt;span class="o"&gt;}&lt;/span&gt;.0, InplaceDimShuffle&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;,1,2&lt;span class="o"&gt;}&lt;/span&gt;.0, InplaceDimShuffle&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;,1,2,3,x&lt;span class="o"&gt;}&lt;/span&gt;.0, Subtensor&lt;span class="o"&gt;{&lt;/span&gt;int64:int64:int64&lt;span class="o"&gt;}&lt;/span&gt;.0, Subtensor&lt;span class="o"&gt;{&lt;/span&gt;int64:int64:int64&lt;span class="o"&gt;}&lt;/span&gt;.0, Subtensor&lt;span class="o"&gt;{&lt;/span&gt;int64:int64:int64&lt;span class="o"&gt;}&lt;/span&gt;.0, Subtensor&lt;span class="o"&gt;{&lt;/span&gt;int64:int64:int64&lt;span class="o"&gt;}&lt;/span&gt;.0, Subtensor&lt;span class="o"&gt;{&lt;/span&gt;int64:int64:int64&lt;span class="o"&gt;}&lt;/span&gt;.0, Subtensor&lt;span class="o"&gt;{&lt;/span&gt;int64:int6
  &lt;span class="m"&gt;11&lt;/span&gt;.4%    &lt;span class="m"&gt;99&lt;/span&gt;.0%       &lt;span class="m"&gt;6&lt;/span&gt;.300s       &lt;span class="m"&gt;6&lt;/span&gt;.30e-02s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;688&lt;/span&gt;   forall_inplace,cpu,scan_fn&lt;span class="o"&gt;}(&lt;/span&gt;Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{&lt;/span&gt;Switch&lt;span class="o"&gt;(&lt;/span&gt;EQ&lt;span class="o"&gt;(&lt;/span&gt;i0, i1&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;((&lt;/span&gt;i2 * i3&lt;span class="o"&gt;)&lt;/span&gt; // &lt;span class="o"&gt;(&lt;/span&gt;i4 * i0&lt;span class="o"&gt;))&lt;/span&gt;, i0&lt;span class="o"&gt;)}}&lt;/span&gt;.0, Subtensor&lt;span class="o"&gt;{&lt;/span&gt;int64:int64:int8&lt;span class="o"&gt;}&lt;/span&gt;.0, IncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;InplaceSet&lt;span class="p"&gt;;&lt;/span&gt;:int64:&lt;span class="o"&gt;}&lt;/span&gt;.0, IncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;InplaceSet&lt;span class="p"&gt;;&lt;/span&gt;:int64:&lt;span class="o"&gt;}&lt;/span&gt;.0, IncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;InplaceSet&lt;span class="p"&gt;;&lt;/span&gt;:int64:&lt;span class="o"&gt;}&lt;/span&gt;.0, IncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;InplaceSet&lt;span class="p"&gt;;&lt;/span&gt;:int64:&lt;span class="o"&gt;}&lt;/span&gt;.0, IncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;InplaceSet&lt;span class="p"&gt;;&lt;/span&gt;:int64:&lt;span class="o"&gt;}&lt;/span&gt;.0, controller.W_in_and_reads_to_o01, controller.W_hid_to_o01, controller.W_in_and_reads_to_i01, controller.W_hid_to_i01, controller.W_in_and_rea
   &lt;span class="m"&gt;0&lt;/span&gt;.1%    &lt;span class="m"&gt;99&lt;/span&gt;.1%       &lt;span class="m"&gt;0&lt;/span&gt;.033s       &lt;span class="m"&gt;3&lt;/span&gt;.25e-04s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;723&lt;/span&gt;   SoftmaxWithBias&lt;span class="o"&gt;(&lt;/span&gt;Dot22.0, output_modality_net.b&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.1%       &lt;span class="m"&gt;0&lt;/span&gt;.020s       &lt;span class="m"&gt;1&lt;/span&gt;.95e-04s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;733&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;sqr,no_inplace&lt;span class="o"&gt;}(&lt;/span&gt;Subtensor&lt;span class="o"&gt;{&lt;/span&gt;int64:int64:int64&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.1%       &lt;span class="m"&gt;0&lt;/span&gt;.014s       &lt;span class="m"&gt;1&lt;/span&gt;.42e-04s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;716&lt;/span&gt;   Dot22&lt;span class="o"&gt;(&lt;/span&gt;Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, output_modality_net.W&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.2%       &lt;span class="m"&gt;0&lt;/span&gt;.012s       &lt;span class="m"&gt;1&lt;/span&gt;.18e-04s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;907&lt;/span&gt;   Dot22&lt;span class="o"&gt;(&lt;/span&gt;Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.2%       &lt;span class="m"&gt;0&lt;/span&gt;.012s       &lt;span class="m"&gt;1&lt;/span&gt;.17e-04s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;764&lt;/span&gt;   Dot22&lt;span class="o"&gt;(&lt;/span&gt;InplaceDimShuffle&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,0&lt;span class="o"&gt;}&lt;/span&gt;.0, SoftmaxGrad.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.2%       &lt;span class="m"&gt;0&lt;/span&gt;.011s       &lt;span class="m"&gt;1&lt;/span&gt;.11e-04s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;912&lt;/span&gt;   Dot22&lt;span class="o"&gt;(&lt;/span&gt;Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.2%       &lt;span class="m"&gt;0&lt;/span&gt;.011s       &lt;span class="m"&gt;1&lt;/span&gt;.07e-04s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;765&lt;/span&gt;   Dot22&lt;span class="o"&gt;(&lt;/span&gt;SoftmaxGrad.0, output_modality_net.W.T&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.2%       &lt;span class="m"&gt;0&lt;/span&gt;.011s       &lt;span class="m"&gt;1&lt;/span&gt;.05e-04s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;491&lt;/span&gt;   Alloc&lt;span class="o"&gt;(&lt;/span&gt;TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0&lt;span class="o"&gt;}&lt;/span&gt;, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;add,no_inplace&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{&lt;/span&gt;Switch&lt;span class="o"&gt;(&lt;/span&gt;EQ&lt;span class="o"&gt;(&lt;/span&gt;i0, i1&lt;span class="o"&gt;)&lt;/span&gt;, i2, i0&lt;span class="o"&gt;)}}&lt;/span&gt;. &lt;span class="m"&gt;0&lt;/span&gt;, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{&lt;/span&gt;Switch&lt;span class="o"&gt;(&lt;/span&gt;EQ&lt;span class="o"&gt;(&lt;/span&gt;i0, i1&lt;span class="o"&gt;)&lt;/span&gt;, i2, i0&lt;span class="o"&gt;)}}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.3%       &lt;span class="m"&gt;0&lt;/span&gt;.010s       &lt;span class="m"&gt;1&lt;/span&gt;.05e-04s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;487&lt;/span&gt;   Alloc&lt;span class="o"&gt;(&lt;/span&gt;TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0&lt;span class="o"&gt;}&lt;/span&gt;, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;add,no_inplace&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{&lt;/span&gt;Switch&lt;span class="o"&gt;(&lt;/span&gt;EQ&lt;span class="o"&gt;(&lt;/span&gt;i0, i1&lt;span class="o"&gt;)&lt;/span&gt;, i2, i0&lt;span class="o"&gt;)}}&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{&lt;/span&gt;Switch&lt;span class="o"&gt;(&lt;/span&gt;EQ&lt;span class="o"&gt;(&lt;/span&gt;i0, i1&lt;span class="o"&gt;)&lt;/span&gt;, i2, i0&lt;span class="o"&gt;)}}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.3%       &lt;span class="m"&gt;0&lt;/span&gt;.010s       &lt;span class="m"&gt;1&lt;/span&gt;.04e-04s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;1236&lt;/span&gt;   Gemm&lt;span class="o"&gt;{&lt;/span&gt;inplace&lt;span class="o"&gt;}(&lt;/span&gt;Alloc.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.0&lt;span class="o"&gt;}&lt;/span&gt;, Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.0&lt;span class="o"&gt;})&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.3%       &lt;span class="m"&gt;0&lt;/span&gt;.009s       &lt;span class="m"&gt;9&lt;/span&gt;.34e-05s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;1237&lt;/span&gt;   Gemm&lt;span class="o"&gt;{&lt;/span&gt;inplace&lt;span class="o"&gt;}(&lt;/span&gt;Alloc.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.0&lt;span class="o"&gt;}&lt;/span&gt;, Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.0&lt;span class="o"&gt;})&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.3%       &lt;span class="m"&gt;0&lt;/span&gt;.009s       &lt;span class="m"&gt;9&lt;/span&gt;.30e-05s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;914&lt;/span&gt;   Dot22&lt;span class="o"&gt;(&lt;/span&gt;Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.3%       &lt;span class="m"&gt;0&lt;/span&gt;.009s       &lt;span class="m"&gt;9&lt;/span&gt;.14e-05s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;916&lt;/span&gt;   Dot22&lt;span class="o"&gt;(&lt;/span&gt;Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.3%       &lt;span class="m"&gt;0&lt;/span&gt;.009s       &lt;span class="m"&gt;8&lt;/span&gt;.63e-05s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;1238&lt;/span&gt;   Gemm&lt;span class="o"&gt;{&lt;/span&gt;inplace&lt;span class="o"&gt;}(&lt;/span&gt;Alloc.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.0&lt;span class="o"&gt;}&lt;/span&gt;, Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.0&lt;span class="o"&gt;})&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.3%       &lt;span class="m"&gt;0&lt;/span&gt;.007s       &lt;span class="m"&gt;7&lt;/span&gt;.35e-05s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;1103&lt;/span&gt;   Dot22&lt;span class="o"&gt;(&lt;/span&gt;Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.4%       &lt;span class="m"&gt;0&lt;/span&gt;.007s       &lt;span class="m"&gt;6&lt;/span&gt;.60e-05s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;918&lt;/span&gt;   IncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;Inc&lt;span class="p"&gt;;&lt;/span&gt;:int64:&lt;span class="o"&gt;}(&lt;/span&gt;Alloc.0, Subtensor&lt;span class="o"&gt;{&lt;/span&gt;::int64&lt;span class="o"&gt;}&lt;/span&gt;.0, ScalarFromTensor.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.4%       &lt;span class="m"&gt;0&lt;/span&gt;.006s       &lt;span class="m"&gt;6&lt;/span&gt;.28e-05s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;1257&lt;/span&gt;   Dot22&lt;span class="o"&gt;(&lt;/span&gt;InplaceDimShuffle&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,0&lt;span class="o"&gt;}&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{((&lt;/span&gt;i0 * i1&lt;span class="o"&gt;)&lt;/span&gt; + &lt;span class="o"&gt;(&lt;/span&gt;i0 * i1 * sgn&lt;span class="o"&gt;(&lt;/span&gt;i2&lt;span class="o"&gt;)))}}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.4%       &lt;span class="m"&gt;0&lt;/span&gt;.006s       &lt;span class="m"&gt;5&lt;/span&gt;.62e-05s    &lt;span class="m"&gt;100&lt;/span&gt;    &lt;span class="m"&gt;74&lt;/span&gt;   Join&lt;span class="o"&gt;(&lt;/span&gt;TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, read0.read0.shift.W, read1.read1.shift.W, read2.read2.shift.W, read3.read3.shift.W&lt;span class="o"&gt;)&lt;/span&gt;
   ... &lt;span class="o"&gt;(&lt;/span&gt;remaining &lt;span class="m"&gt;1268&lt;/span&gt; Apply instances account &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.62%&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.34s&lt;span class="o"&gt;)&lt;/span&gt; of the runtime&lt;span class="o"&gt;)&lt;/span&gt;

Here are tips to potentially make your code run faster
                 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; you think of new ones, suggest them on the mailing list&lt;span class="o"&gt;)&lt;/span&gt;.
                 Test them first, as they are not guaranteed to always provide a speedup.
  - Try installing amdlibm and &lt;span class="nb"&gt;set&lt;/span&gt; the Theano flag lib.amdlibm&lt;span class="o"&gt;=&lt;/span&gt;True. This speeds up only some Elemwise operation.

    .
    .
    .
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;この結果より、私のプログラムの速度が遅い一番の原因は系列データを扱う際に利用している scan_fn 内において grad を計算する部分だと言うことが分かる。profile には grad_of_scan_fn の詳細も記載されており、私の場合以下のようになっていた。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Scan Op profiling &lt;span class="o"&gt;(&lt;/span&gt; grad_of_scan_fn&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;grad_of_scan_fn &lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;==================&lt;/span&gt;
  Message: None
  Time in &lt;span class="m"&gt;100&lt;/span&gt; calls of the op &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; a total of &lt;span class="m"&gt;8671&lt;/span&gt; steps&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;.828692e+01s

  Total &lt;span class="nb"&gt;time&lt;/span&gt; spent in calling the VM &lt;span class="m"&gt;4&lt;/span&gt;.562579e+01s &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;94&lt;/span&gt;.489%&lt;span class="o"&gt;)&lt;/span&gt;
  Total overhead &lt;span class="o"&gt;(&lt;/span&gt;computing slices..&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;.661133e+00s &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;.511%&lt;span class="o"&gt;)&lt;/span&gt;

Class
---
&amp;lt;% time&amp;gt; &amp;lt;sum %&amp;gt; &amp;lt;apply time&amp;gt; &amp;lt;&lt;span class="nb"&gt;time&lt;/span&gt; per call&amp;gt; &amp;lt;type&amp;gt; &amp;lt;&lt;span class="c1"&gt;#call&amp;gt; &amp;lt;#apply&amp;gt; &amp;lt;Class name&amp;gt;&lt;/span&gt;
  &lt;span class="m"&gt;20&lt;/span&gt;.5%    &lt;span class="m"&gt;20&lt;/span&gt;.5%       &lt;span class="m"&gt;8&lt;/span&gt;.227s       &lt;span class="m"&gt;2&lt;/span&gt;.43e-06s     C   &lt;span class="m"&gt;3390361&lt;/span&gt;     &lt;span class="m"&gt;391&lt;/span&gt;   theano.tensor.elemwise.Elemwise
  &lt;span class="m"&gt;13&lt;/span&gt;.1%    &lt;span class="m"&gt;33&lt;/span&gt;.7%       &lt;span class="m"&gt;5&lt;/span&gt;.250s       &lt;span class="m"&gt;6&lt;/span&gt;.05e-05s     C    &lt;span class="m"&gt;86710&lt;/span&gt;      &lt;span class="m"&gt;10&lt;/span&gt;   theano.tensor.nnet.conv.ConvOp
  &lt;span class="m"&gt;13&lt;/span&gt;.1%    &lt;span class="m"&gt;46&lt;/span&gt;.7%       &lt;span class="m"&gt;5&lt;/span&gt;.229s       &lt;span class="m"&gt;1&lt;/span&gt;.21e-05s     Py  &lt;span class="m"&gt;433550&lt;/span&gt;      &lt;span class="m"&gt;50&lt;/span&gt;   theano.tensor.blas.Dot22
  &lt;span class="m"&gt;12&lt;/span&gt;.4%    &lt;span class="m"&gt;59&lt;/span&gt;.2%       &lt;span class="m"&gt;4&lt;/span&gt;.985s       &lt;span class="m"&gt;3&lt;/span&gt;.59e-05s     Py  &lt;span class="m"&gt;138736&lt;/span&gt;      &lt;span class="m"&gt;16&lt;/span&gt;   theano.tensor.basic.Split
   &lt;span class="m"&gt;7&lt;/span&gt;.3%    &lt;span class="m"&gt;66&lt;/span&gt;.4%       &lt;span class="m"&gt;2&lt;/span&gt;.914s       &lt;span class="m"&gt;2&lt;/span&gt;.24e-05s     Py  &lt;span class="m"&gt;130065&lt;/span&gt;      &lt;span class="m"&gt;15&lt;/span&gt;   theano.tensor.blas.BatchedDot
   &lt;span class="m"&gt;4&lt;/span&gt;.8%    &lt;span class="m"&gt;71&lt;/span&gt;.2%       &lt;span class="m"&gt;1&lt;/span&gt;.914s       &lt;span class="m"&gt;2&lt;/span&gt;.76e-05s     Py   &lt;span class="m"&gt;69368&lt;/span&gt;       &lt;span class="m"&gt;8&lt;/span&gt;   theano.tensor.blas.Gemv
   &lt;span class="m"&gt;3&lt;/span&gt;.6%    &lt;span class="m"&gt;74&lt;/span&gt;.8%       &lt;span class="m"&gt;1&lt;/span&gt;.433s       &lt;span class="m"&gt;1&lt;/span&gt;.18e-06s     C   &lt;span class="m"&gt;1213940&lt;/span&gt;     &lt;span class="m"&gt;140&lt;/span&gt;   theano.tensor.elemwise.DimShuffle
   &lt;span class="m"&gt;3&lt;/span&gt;.4%    &lt;span class="m"&gt;78&lt;/span&gt;.2%       &lt;span class="m"&gt;1&lt;/span&gt;.379s       &lt;span class="m"&gt;2&lt;/span&gt;.48e-06s     C   &lt;span class="m"&gt;554944&lt;/span&gt;      &lt;span class="m"&gt;64&lt;/span&gt;   theano.tensor.elemwise.Sum
   &lt;span class="m"&gt;3&lt;/span&gt;.1%    &lt;span class="m"&gt;81&lt;/span&gt;.3%       &lt;span class="m"&gt;1&lt;/span&gt;.235s       &lt;span class="m"&gt;1&lt;/span&gt;.26e-06s     C   &lt;span class="m"&gt;979823&lt;/span&gt;     &lt;span class="m"&gt;113&lt;/span&gt;   theano.tensor.basic.Reshape
   &lt;span class="m"&gt;3&lt;/span&gt;.0%    &lt;span class="m"&gt;84&lt;/span&gt;.3%       &lt;span class="m"&gt;1&lt;/span&gt;.191s       &lt;span class="m"&gt;2&lt;/span&gt;.29e-05s     Py   &lt;span class="m"&gt;52026&lt;/span&gt;       &lt;span class="m"&gt;6&lt;/span&gt;   theano.tensor.blas.Gemm
   &lt;span class="m"&gt;2&lt;/span&gt;.8%    &lt;span class="m"&gt;87&lt;/span&gt;.1%       &lt;span class="m"&gt;1&lt;/span&gt;.105s       &lt;span class="m"&gt;3&lt;/span&gt;.19e-05s     Py   &lt;span class="m"&gt;34684&lt;/span&gt;       &lt;span class="m"&gt;4&lt;/span&gt;   theano.tensor.subtensor.AdvancedIncSubtensor
   &lt;span class="m"&gt;2&lt;/span&gt;.7%    &lt;span class="m"&gt;89&lt;/span&gt;.8%       &lt;span class="m"&gt;1&lt;/span&gt;.097s       &lt;span class="m"&gt;1&lt;/span&gt;.58e-05s     Py   &lt;span class="m"&gt;69368&lt;/span&gt;       &lt;span class="m"&gt;8&lt;/span&gt;   theano.tensor.blas.Dot22Scalar
   &lt;span class="m"&gt;1&lt;/span&gt;.7%    &lt;span class="m"&gt;91&lt;/span&gt;.5%       &lt;span class="m"&gt;0&lt;/span&gt;.689s       &lt;span class="m"&gt;1&lt;/span&gt;.07e-06s     C   &lt;span class="m"&gt;641654&lt;/span&gt;      &lt;span class="m"&gt;74&lt;/span&gt;   theano.tensor.subtensor.Subtensor
   &lt;span class="m"&gt;1&lt;/span&gt;.2%    &lt;span class="m"&gt;92&lt;/span&gt;.7%       &lt;span class="m"&gt;0&lt;/span&gt;.476s       &lt;span class="m"&gt;2&lt;/span&gt;.74e-05s     Py   &lt;span class="m"&gt;17342&lt;/span&gt;       &lt;span class="m"&gt;2&lt;/span&gt;   theano.tensor.subtensor.AdvancedSubtensor
   &lt;span class="m"&gt;1&lt;/span&gt;.1%    &lt;span class="m"&gt;93&lt;/span&gt;.8%       &lt;span class="m"&gt;0&lt;/span&gt;.439s       &lt;span class="m"&gt;3&lt;/span&gt;.38e-06s     C   &lt;span class="m"&gt;130065&lt;/span&gt;      &lt;span class="m"&gt;15&lt;/span&gt;   theano.tensor.basic.Join
   &lt;span class="m"&gt;0&lt;/span&gt;.9%    &lt;span class="m"&gt;94&lt;/span&gt;.7%       &lt;span class="m"&gt;0&lt;/span&gt;.349s       &lt;span class="m"&gt;9&lt;/span&gt;.57e-07s     C   &lt;span class="m"&gt;364182&lt;/span&gt;      &lt;span class="m"&gt;42&lt;/span&gt;   theano.compile.ops.Shape_i
   &lt;span class="m"&gt;0&lt;/span&gt;.9%    &lt;span class="m"&gt;95&lt;/span&gt;.5%       &lt;span class="m"&gt;0&lt;/span&gt;.347s       &lt;span class="m"&gt;9&lt;/span&gt;.99e-06s     C    &lt;span class="m"&gt;34684&lt;/span&gt;       &lt;span class="m"&gt;4&lt;/span&gt;   theano.tensor.subtensor.IncSubtensor
   &lt;span class="m"&gt;0&lt;/span&gt;.8%    &lt;span class="m"&gt;96&lt;/span&gt;.4%       &lt;span class="m"&gt;0&lt;/span&gt;.339s       &lt;span class="m"&gt;9&lt;/span&gt;.77e-06s     C    &lt;span class="m"&gt;34684&lt;/span&gt;       &lt;span class="m"&gt;4&lt;/span&gt;   theano.tensor.nnet.nnet.Softmax
   &lt;span class="m"&gt;0&lt;/span&gt;.7%    &lt;span class="m"&gt;97&lt;/span&gt;.1%       &lt;span class="m"&gt;0&lt;/span&gt;.286s       &lt;span class="m"&gt;8&lt;/span&gt;.90e-07s     C   &lt;span class="m"&gt;320827&lt;/span&gt;      &lt;span class="m"&gt;37&lt;/span&gt;   theano.tensor.opt.MakeVector
   &lt;span class="m"&gt;0&lt;/span&gt;.6%    &lt;span class="m"&gt;97&lt;/span&gt;.7%       &lt;span class="m"&gt;0&lt;/span&gt;.229s       &lt;span class="m"&gt;1&lt;/span&gt;.32e-05s     Py   &lt;span class="m"&gt;17342&lt;/span&gt;       &lt;span class="m"&gt;2&lt;/span&gt;   theano.tensor.basic.ARange
   ... &lt;span class="o"&gt;(&lt;/span&gt;remaining &lt;span class="m"&gt;8&lt;/span&gt; Classes account &lt;span class="k"&gt;for&lt;/span&gt;   &lt;span class="m"&gt;2&lt;/span&gt;.33%&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.93s&lt;span class="o"&gt;)&lt;/span&gt; of the runtime&lt;span class="o"&gt;)&lt;/span&gt;

Ops
---
&amp;lt;% time&amp;gt; &amp;lt;sum %&amp;gt; &amp;lt;apply time&amp;gt; &amp;lt;&lt;span class="nb"&gt;time&lt;/span&gt; per call&amp;gt; &amp;lt;type&amp;gt; &amp;lt;&lt;span class="c1"&gt;#call&amp;gt; &amp;lt;#apply&amp;gt; &amp;lt;Op name&amp;gt;&lt;/span&gt;
  &lt;span class="m"&gt;13&lt;/span&gt;.1%    &lt;span class="m"&gt;13&lt;/span&gt;.1%       &lt;span class="m"&gt;5&lt;/span&gt;.229s       &lt;span class="m"&gt;1&lt;/span&gt;.21e-05s     Py    &lt;span class="m"&gt;433550&lt;/span&gt;       &lt;span class="m"&gt;50&lt;/span&gt;   Dot22
   &lt;span class="m"&gt;7&lt;/span&gt;.8%    &lt;span class="m"&gt;20&lt;/span&gt;.8%       &lt;span class="m"&gt;3&lt;/span&gt;.118s       &lt;span class="m"&gt;3&lt;/span&gt;.60e-05s     Py    &lt;span class="m"&gt;86710&lt;/span&gt;       &lt;span class="m"&gt;10&lt;/span&gt;   Split&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;7&lt;/span&gt;.3%    &lt;span class="m"&gt;28&lt;/span&gt;.1%       &lt;span class="m"&gt;2&lt;/span&gt;.914s       &lt;span class="m"&gt;2&lt;/span&gt;.24e-05s     Py    &lt;span class="m"&gt;130065&lt;/span&gt;       &lt;span class="m"&gt;15&lt;/span&gt;   BatchedDot
   &lt;span class="m"&gt;4&lt;/span&gt;.8%    &lt;span class="m"&gt;32&lt;/span&gt;.9%       &lt;span class="m"&gt;1&lt;/span&gt;.928s       &lt;span class="m"&gt;1&lt;/span&gt;.11e-04s     C     &lt;span class="m"&gt;17342&lt;/span&gt;        &lt;span class="m"&gt;2&lt;/span&gt;   ConvOp&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;imshp&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;kshp&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nkern&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bsize&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dx&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dy&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;out_mode&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;valid&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;unroll_batch&amp;#39;&lt;/span&gt;, None&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;unroll_kern&amp;#39;&lt;/span&gt;, None&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;unroll_patch&amp;#39;&lt;/span&gt;, True&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;imshp_logical&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;kshp_logical&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;kshp_logical_top_aligned&amp;#39;&lt;/span&gt;, False&lt;span class="o"&gt;)}&lt;/span&gt;
   &lt;span class="m"&gt;4&lt;/span&gt;.8%    &lt;span class="m"&gt;37&lt;/span&gt;.7%       &lt;span class="m"&gt;1&lt;/span&gt;.903s       &lt;span class="m"&gt;1&lt;/span&gt;.10e-04s     C     &lt;span class="m"&gt;17342&lt;/span&gt;        &lt;span class="m"&gt;2&lt;/span&gt;   ConvOp&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;imshp&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;kshp&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nkern&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bsize&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dx&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dy&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;out_mode&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;full&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;unroll_batch&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;unroll_kern&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;unroll_patch&amp;#39;&lt;/span&gt;, False&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;imshp_logical&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;kshp_logical&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;kshp_logical_top_aligned&amp;#39;&lt;/span&gt;, True&lt;span class="o"&gt;)}&lt;/span&gt;
   &lt;span class="m"&gt;4&lt;/span&gt;.7%    &lt;span class="m"&gt;42&lt;/span&gt;.3%       &lt;span class="m"&gt;1&lt;/span&gt;.867s       &lt;span class="m"&gt;3&lt;/span&gt;.59e-05s     Py    &lt;span class="m"&gt;52026&lt;/span&gt;        &lt;span class="m"&gt;6&lt;/span&gt;   Split&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;4&lt;/span&gt;.4%    &lt;span class="m"&gt;46&lt;/span&gt;.8%       &lt;span class="m"&gt;1&lt;/span&gt;.775s       &lt;span class="m"&gt;2&lt;/span&gt;.44e-06s     C     &lt;span class="m"&gt;728364&lt;/span&gt;       &lt;span class="m"&gt;84&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;mul,no_inplace&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;4&lt;/span&gt;.3%    &lt;span class="m"&gt;51&lt;/span&gt;.1%       &lt;span class="m"&gt;1&lt;/span&gt;.717s       &lt;span class="m"&gt;2&lt;/span&gt;.42e-06s     C     &lt;span class="m"&gt;711022&lt;/span&gt;       &lt;span class="m"&gt;82&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;add,no_inplace&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;3&lt;/span&gt;.4%    &lt;span class="m"&gt;54&lt;/span&gt;.4%       &lt;span class="m"&gt;1&lt;/span&gt;.352s       &lt;span class="m"&gt;3&lt;/span&gt;.12e-05s     Py    &lt;span class="m"&gt;43355&lt;/span&gt;        &lt;span class="m"&gt;5&lt;/span&gt;   Gemv&lt;span class="o"&gt;{&lt;/span&gt;no_inplace&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;3&lt;/span&gt;.0%    &lt;span class="m"&gt;57&lt;/span&gt;.4%       &lt;span class="m"&gt;1&lt;/span&gt;.191s       &lt;span class="m"&gt;2&lt;/span&gt;.29e-05s     Py    &lt;span class="m"&gt;52026&lt;/span&gt;        &lt;span class="m"&gt;6&lt;/span&gt;   Gemm&lt;span class="o"&gt;{&lt;/span&gt;inplace&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;2&lt;/span&gt;.8%    &lt;span class="m"&gt;60&lt;/span&gt;.2%       &lt;span class="m"&gt;1&lt;/span&gt;.105s       &lt;span class="m"&gt;3&lt;/span&gt;.19e-05s     Py    &lt;span class="m"&gt;34684&lt;/span&gt;        &lt;span class="m"&gt;4&lt;/span&gt;   AdvancedIncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False,  &lt;span class="nv"&gt;set_instead_of_inc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;2&lt;/span&gt;.7%    &lt;span class="m"&gt;62&lt;/span&gt;.9%       &lt;span class="m"&gt;1&lt;/span&gt;.097s       &lt;span class="m"&gt;1&lt;/span&gt;.58e-05s     Py    &lt;span class="m"&gt;69368&lt;/span&gt;        &lt;span class="m"&gt;8&lt;/span&gt;   Dot22Scalar
   &lt;span class="m"&gt;1&lt;/span&gt;.9%    &lt;span class="m"&gt;64&lt;/span&gt;.8%       &lt;span class="m"&gt;0&lt;/span&gt;.753s       &lt;span class="m"&gt;8&lt;/span&gt;.68e-05s     C     &lt;span class="m"&gt;8671&lt;/span&gt;        &lt;span class="m"&gt;1&lt;/span&gt;   ConvOp&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;imshp&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;kshp&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nkern&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bsize&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dx&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dy&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;out_mode&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;va lid&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;unroll_batch&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;unroll_kern&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;unroll_patch&amp;#39;&lt;/span&gt;, False&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;imshp_logical&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;kshp_logical&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;kshp_logical_top_aligned&amp;#39;&lt;/span&gt;, True&lt;span class="o"&gt;)}&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.8%    &lt;span class="m"&gt;66&lt;/span&gt;.6%       &lt;span class="m"&gt;0&lt;/span&gt;.707s       &lt;span class="m"&gt;1&lt;/span&gt;.15e-06s     C     &lt;span class="m"&gt;615641&lt;/span&gt;       &lt;span class="m"&gt;71&lt;/span&gt;   Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.6%    &lt;span class="m"&gt;68&lt;/span&gt;.2%       &lt;span class="m"&gt;0&lt;/span&gt;.637s       &lt;span class="m"&gt;2&lt;/span&gt;.23e-06s     C     &lt;span class="m"&gt;286143&lt;/span&gt;       &lt;span class="m"&gt;33&lt;/span&gt;   Sum&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;acc_dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;float64&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.4%    &lt;span class="m"&gt;69&lt;/span&gt;.6%       &lt;span class="m"&gt;0&lt;/span&gt;.562s       &lt;span class="m"&gt;2&lt;/span&gt;.16e-05s     Py    &lt;span class="m"&gt;26013&lt;/span&gt;        &lt;span class="m"&gt;3&lt;/span&gt;   Gemv&lt;span class="o"&gt;{&lt;/span&gt;inplace&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.3%    &lt;span class="m"&gt;70&lt;/span&gt;.9%       &lt;span class="m"&gt;0&lt;/span&gt;.532s       &lt;span class="m"&gt;9&lt;/span&gt;.89e-07s     C     &lt;span class="m"&gt;537602&lt;/span&gt;       &lt;span class="m"&gt;62&lt;/span&gt;   Subtensor&lt;span class="o"&gt;{&lt;/span&gt;int64&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.3%    &lt;span class="m"&gt;72&lt;/span&gt;.2%       &lt;span class="m"&gt;0&lt;/span&gt;.528s       &lt;span class="m"&gt;1&lt;/span&gt;.45e-06s     C     &lt;span class="m"&gt;364182&lt;/span&gt;       &lt;span class="m"&gt;42&lt;/span&gt;   Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.2%    &lt;span class="m"&gt;73&lt;/span&gt;.4%       &lt;span class="m"&gt;0&lt;/span&gt;.476s       &lt;span class="m"&gt;2&lt;/span&gt;.74e-05s     Py    &lt;span class="m"&gt;17342&lt;/span&gt;        &lt;span class="m"&gt;2&lt;/span&gt;   AdvancedSubtensor
   &lt;span class="m"&gt;1&lt;/span&gt;.1%    &lt;span class="m"&gt;74&lt;/span&gt;.5%       &lt;span class="m"&gt;0&lt;/span&gt;.439s       &lt;span class="m"&gt;3&lt;/span&gt;.38e-06s     C     &lt;span class="m"&gt;130065&lt;/span&gt;       &lt;span class="m"&gt;15&lt;/span&gt;   Join
   ... &lt;span class="o"&gt;(&lt;/span&gt;remaining &lt;span class="m"&gt;113&lt;/span&gt; Ops account &lt;span class="k"&gt;for&lt;/span&gt;  &lt;span class="m"&gt;25&lt;/span&gt;.51%&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.22s&lt;span class="o"&gt;)&lt;/span&gt; of the runtime&lt;span class="o"&gt;)&lt;/span&gt;

Apply
------
&amp;lt;% time&amp;gt; &amp;lt;sum %&amp;gt; &amp;lt;apply time&amp;gt; &amp;lt;&lt;span class="nb"&gt;time&lt;/span&gt; per call&amp;gt; &amp;lt;&lt;span class="c1"&gt;#call&amp;gt; &amp;lt;id&amp;gt; &amp;lt;Apply name&amp;gt;&lt;/span&gt;
   &lt;span class="m"&gt;2&lt;/span&gt;.4%     &lt;span class="m"&gt;2&lt;/span&gt;.4%       &lt;span class="m"&gt;0&lt;/span&gt;.969s       &lt;span class="m"&gt;1&lt;/span&gt;.12e-04s   &lt;span class="m"&gt;8671&lt;/span&gt;   &lt;span class="m"&gt;545&lt;/span&gt;   ConvOp&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;imshp&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;kshp&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nkern&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bsize&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dx&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dy&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;out_mode&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;valid&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;unroll_batch&amp;#39;&lt;/span&gt;, None&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;unroll_kern&amp;#39;&lt;/span&gt;, None&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;unroll_patch&amp;#39;&lt;/span&gt;, True&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;imshp_logical&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;kshp_logical&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;kshp_logical_top_aligned&amp;#39;&lt;/span&gt;, False&lt;span class="o"&gt;)}(&lt;/span&gt;InplaceDimShuffle&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,0,2,3&lt;span class="o"&gt;}&lt;/span&gt;.0, Subtensor&lt;span class="o"&gt;{&lt;/span&gt;::, ::, ::int64, ::int64&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;2&lt;/span&gt;.4%     &lt;span class="m"&gt;4&lt;/span&gt;.8%       &lt;span class="m"&gt;0&lt;/span&gt;.958s       &lt;span class="m"&gt;1&lt;/span&gt;.11e-04s   &lt;span class="m"&gt;8671&lt;/span&gt;   &lt;span class="m"&gt;543&lt;/span&gt;   ConvOp&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;imshp&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;kshp&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nkern&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bsize&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dx&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dy&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;out_mode&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;valid&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;unroll_batch&amp;#39;&lt;/span&gt;, None&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;unroll_kern&amp;#39;&lt;/span&gt;, None&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;unroll_patch&amp;#39;&lt;/span&gt;, True&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;imshp_logical&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;kshp_logical&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;kshp_logical_top_aligned&amp;#39;&lt;/span&gt;, False&lt;span class="o"&gt;)}(&lt;/span&gt;InplaceDimShuffle&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,0,2,3&lt;span class="o"&gt;}&lt;/span&gt;.0, Subtensor&lt;span class="o"&gt;{&lt;/span&gt;::, ::, ::int64, ::int64&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;2&lt;/span&gt;.4%     &lt;span class="m"&gt;7&lt;/span&gt;.2%       &lt;span class="m"&gt;0&lt;/span&gt;.952s       &lt;span class="m"&gt;1&lt;/span&gt;.10e-04s   &lt;span class="m"&gt;8671&lt;/span&gt;   &lt;span class="m"&gt;521&lt;/span&gt;   ConvOp&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;imshp&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;kshp&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nkern&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bsize&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dx&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dy&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;out_mode&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;full&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;unroll_batch&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;unroll_kern&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;unroll_patch&amp;#39;&lt;/span&gt;, False&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;imshp_logical&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;kshp_logical&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;kshp_logical_top_aligned&amp;#39;&lt;/span&gt;, True&lt;span class="o"&gt;)}(&lt;/span&gt;AdvancedIncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False,  &lt;span class="nv"&gt;set_instead_of_inc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False&lt;span class="o"&gt;}&lt;/span&gt;.0, Subtensor&lt;span class="o"&gt;{&lt;/span&gt;::, ::, ::int64, ::int64&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;2&lt;/span&gt;.4%     &lt;span class="m"&gt;9&lt;/span&gt;.6%       &lt;span class="m"&gt;0&lt;/span&gt;.950s       &lt;span class="m"&gt;1&lt;/span&gt;.10e-04s   &lt;span class="m"&gt;8671&lt;/span&gt;   &lt;span class="m"&gt;519&lt;/span&gt;   ConvOp&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;imshp&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;kshp&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nkern&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bsize&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dx&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dy&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;out_mode&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;full&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;unroll_batch&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;unroll_kern&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;unroll_patch&amp;#39;&lt;/span&gt;, False&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;imshp_logical&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;kshp_logical&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;kshp_logical_top_aligned&amp;#39;&lt;/span&gt;, True&lt;span class="o"&gt;)}(&lt;/span&gt;AdvancedIncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False,  &lt;span class="nv"&gt;set_instead_of_inc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False&lt;span class="o"&gt;}&lt;/span&gt;.0, Subtensor&lt;span class="o"&gt;{&lt;/span&gt;::, ::, ::int64, ::int64&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.9%    &lt;span class="m"&gt;11&lt;/span&gt;.4%       &lt;span class="m"&gt;0&lt;/span&gt;.753s       &lt;span class="m"&gt;8&lt;/span&gt;.68e-05s   &lt;span class="m"&gt;8671&lt;/span&gt;   &lt;span class="m"&gt;441&lt;/span&gt;   ConvOp&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;imshp&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;kshp&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nkern&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bsize&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dx&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dy&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;out_mode&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;valid&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;unroll_batch&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;unroll_kern&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;unroll_patch&amp;#39;&lt;/span&gt;, False&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;imshp_logical&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;kshp_logical&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;kshp_logical_top_aligned&amp;#39;&lt;/span&gt;, True&lt;span class="o"&gt;)}(&lt;/span&gt;Subtensor&lt;span class="o"&gt;{&lt;/span&gt;::, ::, ::, :int64:&lt;span class="o"&gt;}&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;mul,no_inplace&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.8%    &lt;span class="m"&gt;13&lt;/span&gt;.3%       &lt;span class="m"&gt;0&lt;/span&gt;.731s       &lt;span class="m"&gt;8&lt;/span&gt;.43e-05s   &lt;span class="m"&gt;8671&lt;/span&gt;   &lt;span class="m"&gt;825&lt;/span&gt;   Split&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;}(&lt;/span&gt;InplaceDimShuffle&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,0,2&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, &amp;lt;TensorType&lt;span class="o"&gt;(&lt;/span&gt;int64, vector&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.7%    &lt;span class="m"&gt;15&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.686s       &lt;span class="m"&gt;7&lt;/span&gt;.91e-05s   &lt;span class="m"&gt;8671&lt;/span&gt;   &lt;span class="m"&gt;737&lt;/span&gt;   Dot22&lt;span class="o"&gt;(&lt;/span&gt;InplaceDimShuffle&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,0&lt;span class="o"&gt;}&lt;/span&gt;.0, Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.0%    &lt;span class="m"&gt;16&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.410s       &lt;span class="m"&gt;4&lt;/span&gt;.73e-05s   &lt;span class="m"&gt;8671&lt;/span&gt;   &lt;span class="m"&gt;573&lt;/span&gt;   Split&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}(&lt;/span&gt;IncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;Inc&lt;span class="p"&gt;;&lt;/span&gt;::, ::, ::, :int64:&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;,&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.0%    &lt;span class="m"&gt;17&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.396s       &lt;span class="m"&gt;4&lt;/span&gt;.57e-05s   &lt;span class="m"&gt;8671&lt;/span&gt;   &lt;span class="m"&gt;893&lt;/span&gt;   Split&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;}(&lt;/span&gt;InplaceDimShuffle&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,0,2&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, &amp;lt;TensorType&lt;span class="o"&gt;(&lt;/span&gt;int64, vector&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.9%    &lt;span class="m"&gt;17&lt;/span&gt;.9%       &lt;span class="m"&gt;0&lt;/span&gt;.367s       &lt;span class="m"&gt;4&lt;/span&gt;.24e-05s   &lt;span class="m"&gt;8671&lt;/span&gt;   &lt;span class="m"&gt;843&lt;/span&gt;   Split&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;}(&lt;/span&gt;InplaceDimShuffle&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,0,2&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, &amp;lt;TensorType&lt;span class="o"&gt;(&lt;/span&gt;int64, vector&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.9%    &lt;span class="m"&gt;18&lt;/span&gt;.8%       &lt;span class="m"&gt;0&lt;/span&gt;.357s       &lt;span class="m"&gt;4&lt;/span&gt;.12e-05s   &lt;span class="m"&gt;8671&lt;/span&gt;   &lt;span class="m"&gt;224&lt;/span&gt;   Gemv&lt;span class="o"&gt;{&lt;/span&gt;no_inplace&lt;span class="o"&gt;}(&lt;/span&gt;InplaceDimShuffle&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.0&lt;span class="o"&gt;}&lt;/span&gt;, controller.W_in_and_reads_to_o_copy01.T, InplaceDimShuffle&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.0&lt;span class="o"&gt;})&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.8%    &lt;span class="m"&gt;19&lt;/span&gt;.6%       &lt;span class="m"&gt;0&lt;/span&gt;.312s       &lt;span class="m"&gt;3&lt;/span&gt;.60e-05s   &lt;span class="m"&gt;8671&lt;/span&gt;   &lt;span class="m"&gt;739&lt;/span&gt;   Dot22&lt;span class="o"&gt;(&lt;/span&gt;Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, &amp;lt;TensorType&lt;span class="o"&gt;(&lt;/span&gt;float32, matrix&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.8%    &lt;span class="m"&gt;20&lt;/span&gt;.3%       &lt;span class="m"&gt;0&lt;/span&gt;.304s       &lt;span class="m"&gt;3&lt;/span&gt;.51e-05s   &lt;span class="m"&gt;8671&lt;/span&gt;   &lt;span class="m"&gt;527&lt;/span&gt;   AdvancedIncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False,  &lt;span class="nv"&gt;set_instead_of_inc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False&lt;span class="o"&gt;}(&lt;/span&gt;TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;, ..28&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;0&lt;/span&gt;.0&lt;span class="o"&gt;}&lt;/span&gt;, Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, ARange&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;int64&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, ARange&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;int64&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, SliceConstant&lt;span class="o"&gt;{&lt;/span&gt;None, None, None&lt;span class="o"&gt;})&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.8%    &lt;span class="m"&gt;21&lt;/span&gt;.1%       &lt;span class="m"&gt;0&lt;/span&gt;.301s       &lt;span class="m"&gt;3&lt;/span&gt;.47e-05s   &lt;span class="m"&gt;8671&lt;/span&gt;   &lt;span class="m"&gt;511&lt;/span&gt;   AdvancedIncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False,  &lt;span class="nv"&gt;set_instead_of_inc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False&lt;span class="o"&gt;}(&lt;/span&gt;TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;, &lt;span class="m"&gt;4&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;, ..28&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;0&lt;/span&gt;.0&lt;span class="o"&gt;}&lt;/span&gt;, Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, ARange&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;int64&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, ARange&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;int64&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, SliceConstant&lt;span class="o"&gt;{&lt;/span&gt;None, None, None&lt;span class="o"&gt;})&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.7%    &lt;span class="m"&gt;21&lt;/span&gt;.8%       &lt;span class="m"&gt;0&lt;/span&gt;.297s       &lt;span class="m"&gt;3&lt;/span&gt;.43e-05s   &lt;span class="m"&gt;8671&lt;/span&gt;   &lt;span class="m"&gt;601&lt;/span&gt;   Split&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}(&lt;/span&gt;IncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;Inc&lt;span class="p"&gt;;&lt;/span&gt;::, ::, ::, :int64:&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;,&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.7%    &lt;span class="m"&gt;22&lt;/span&gt;.6%       &lt;span class="m"&gt;0&lt;/span&gt;.297s       &lt;span class="m"&gt;3&lt;/span&gt;.42e-05s   &lt;span class="m"&gt;8671&lt;/span&gt;   &lt;span class="m"&gt;577&lt;/span&gt;   Split&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}(&lt;/span&gt;IncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;InplaceInc&lt;span class="p"&gt;;&lt;/span&gt;::, ::, ::, :int64:&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;,&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.7%    &lt;span class="m"&gt;23&lt;/span&gt;.3%       &lt;span class="m"&gt;0&lt;/span&gt;.295s       &lt;span class="m"&gt;3&lt;/span&gt;.41e-05s   &lt;span class="m"&gt;8671&lt;/span&gt;   &lt;span class="m"&gt;992&lt;/span&gt;   Split&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}(&lt;/span&gt;Elemwise&lt;span class="o"&gt;{&lt;/span&gt;add,no_inplace&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, MakeVector&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;int64&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.7%    &lt;span class="m"&gt;24&lt;/span&gt;.1%       &lt;span class="m"&gt;0&lt;/span&gt;.295s       &lt;span class="m"&gt;3&lt;/span&gt;.40e-05s   &lt;span class="m"&gt;8671&lt;/span&gt;   &lt;span class="m"&gt;736&lt;/span&gt;   Dot22&lt;span class="o"&gt;(&lt;/span&gt;Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, &amp;lt;TensorType&lt;span class="o"&gt;(&lt;/span&gt;float32, matrix&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.7%    &lt;span class="m"&gt;24&lt;/span&gt;.8%       &lt;span class="m"&gt;0&lt;/span&gt;.293s       &lt;span class="m"&gt;3&lt;/span&gt;.38e-05s   &lt;span class="m"&gt;8671&lt;/span&gt;   &lt;span class="m"&gt;317&lt;/span&gt;   Dot22&lt;span class="o"&gt;(&lt;/span&gt;Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, &amp;lt;TensorType&lt;span class="o"&gt;(&lt;/span&gt;float32, matrix&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.7%    &lt;span class="m"&gt;25&lt;/span&gt;.5%       &lt;span class="m"&gt;0&lt;/span&gt;.291s       &lt;span class="m"&gt;3&lt;/span&gt;.36e-05s   &lt;span class="m"&gt;8671&lt;/span&gt;   &lt;span class="m"&gt;991&lt;/span&gt;   Split&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}(&lt;/span&gt;Elemwise&lt;span class="o"&gt;{&lt;/span&gt;add,no_inplace&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, MakeVector&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;int64&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   ... &lt;span class="o"&gt;(&lt;/span&gt;remaining &lt;span class="m"&gt;1069&lt;/span&gt; Apply instances account &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="m"&gt;74&lt;/span&gt;.49%&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;29&lt;/span&gt;.83s&lt;span class="o"&gt;)&lt;/span&gt; of the runtime&lt;span class="o"&gt;)&lt;/span&gt;

Here are tips to potentially make your code run faster
                 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; you think of new ones, suggest them on the mailing list&lt;span class="o"&gt;)&lt;/span&gt;.
                 Test them first, as they are not guaranteed to always provide a speedup.
  - Try installing amdlibm and &lt;span class="nb"&gt;set&lt;/span&gt; the Theano flag lib.amdlibm&lt;span class="o"&gt;=&lt;/span&gt;True. This speeds up only some Elemwise operation.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上の結果から、プログラムの速度を向上を図るために以下の２つの試みを行ってみた。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Theano の blas 環境整備&lt;ul&gt;
&lt;li&gt;theano.tensor.blas.~ 系が &lt;type&gt; Py となっており、これは numpy を介して openblas を使用している？ようなのでこれの改良が可能？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;amdlibm のインストール&lt;ul&gt;
&lt;li&gt;上記の profile の最後にかかれているように、これにより Elemwise operation (20.5% とボトルネックの一つになっている) を改善できそう。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1&gt;Blas environment setting&lt;/h1&gt;
&lt;h3&gt;motivation&lt;/h3&gt;
&lt;p&gt;上記の通り、theano.tensor.blas.~ 系が &lt;type&gt; Py となっている。&lt;a href="https://groups.google.com/forum/#!searchin/theano-users/Gemv%7Csort:date/theano-users/UfPNnTI1pI4/2w48Gid_BwAJ"&gt;環境によっては同様の演算が &lt;type&gt; C で行われるらしく&lt;/a&gt;、ググったところ&lt;a href="https://groups.google.com/forum/#!topic/theano-users/9JdhCfp4YFM"&gt;これは theano の BLAS の設定に起因していそう&lt;/a&gt;。  &lt;/p&gt;
&lt;p&gt;そこで設定を以下のコマンドにより確認したところの出力が None だった (何も出力されない) ため、theano.config.blas.ldflags が設定されていないことがわかる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python -c &lt;span class="s2"&gt;&amp;quot;import theano; print(theano.config.blas.ldflags)&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://deeplearning.net/software/theano_versions/0.8.X/install_ubuntu.html"&gt;公式ドキュメント&lt;/a&gt;によると (Speed test Theano/BLAS 参照) Theano は theano.config.blas.ldflags が未設定の場合 Numpy/Scipy を介して BLAS を利用するが、これにより生じるオーバーヘッドが今回の profile でボトルネックの１つとなっている theano.tensor.blas.Gemm や theano.tensor.blas.Dot において重要らしい。&lt;/p&gt;
&lt;p&gt;ちなみに、使用している Numpy の blas は以下のように openblas だった。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python -c &lt;span class="s2"&gt;&amp;quot;import numpy as np; print(np.__config__.show())&amp;quot;&lt;/span&gt;
lapack_opt_info:
    &lt;span class="nv"&gt;libraries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;openblas&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;openblas&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="nv"&gt;library_dirs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/usr/local/lib&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="nv"&gt;define_macros&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HAVE_CBLAS&amp;#39;&lt;/span&gt;, None&lt;span class="o"&gt;)]&lt;/span&gt;
    &lt;span class="nv"&gt;language&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; c
blas_opt_info:
    &lt;span class="nv"&gt;libraries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;openblas&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;openblas&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="nv"&gt;library_dirs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/usr/local/lib&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="nv"&gt;define_macros&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HAVE_CBLAS&amp;#39;&lt;/span&gt;, None&lt;span class="o"&gt;)]&lt;/span&gt;
    &lt;span class="nv"&gt;language&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; c
openblas_info:
    &lt;span class="nv"&gt;libraries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;openblas&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;openblas&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="nv"&gt;library_dirs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/usr/local/lib&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="nv"&gt;define_macros&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HAVE_CBLAS&amp;#39;&lt;/span&gt;, None&lt;span class="o"&gt;)]&lt;/span&gt;
    &lt;span class="nv"&gt;language&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; c
blis_info:
  NOT AVAILABLE
openblas_lapack_info:
    &lt;span class="nv"&gt;libraries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;openblas&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;openblas&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="nv"&gt;library_dirs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/usr/local/lib&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="nv"&gt;define_macros&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HAVE_CBLAS&amp;#39;&lt;/span&gt;, None&lt;span class="o"&gt;)]&lt;/span&gt;
    &lt;span class="nv"&gt;language&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; c
lapack_mkl_info:
  NOT AVAILABLE
blas_mkl_info:
  NOT AVAILABLE
None
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://qiita.com/unnonouno/items/8ab453a1868d77a93679"&gt;Qiita の記事&lt;/a&gt;によると openblas から &lt;a href="https://software.intel.com/en-us/articles/getting-started-with-intel-optimized-theano"&gt;intel の mkl&lt;/a&gt; へと変更することで Chainer の性能が約 1.5 になるらしいのでこれを blas として利用することにした。&lt;/p&gt;
&lt;h3&gt;Install mkl (and setting new environment)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://software.intel.com/en-us/mkl"&gt;intel のダウンロードサイト&lt;/a&gt;の Free Download から簡単に個人情報登録し、mkl をダウンロードした。&lt;br&gt;
私の場合は l_mkl_2018.0.128.tgz というファイルがダウンロードされ、これを Ubuntu 上で展開した。&lt;br&gt;
後は l_mkl_2018.0.128/install.sh を走らせると対話型のインストールが行えるため、流れに沿っていれば良い。&lt;/p&gt;
&lt;p&gt;なお、ユーザアカウントでこれを行った場合、root ユーザとしてインストールをする (システム上の全ユーザが使えるようにする) かローカル環境にダウンロードするか選べるが、前者の場合は /opt/ 以下に、後者の場合は ~/ 以下にそれぞれ intel/ というディレクトリが作られ、その下にインストールが行われる。&lt;/p&gt;
&lt;p&gt;...と、ここまで mkl インストールしてきたが、&lt;a href="http://deeplearning.net/software/theano/install_ubuntu.html"&gt;Theanoの公式&lt;/a&gt;に mkl を使う場合 conda を使って環境設定を行えば良いと書いてあるので、今まで pip を使用して作っていた環境を conda を利用して作ることにした。 &lt;/p&gt;
&lt;p&gt;conda を用い、以下のコマンドを入力。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ conda install numpy scipy mkl
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;すると以下のエラーが出た。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ERROR conda.core.link:_execute_actions&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;337&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: An error occurred &lt;span class="k"&gt;while&lt;/span&gt; installing package &lt;span class="s1"&gt;&amp;#39;defaults::numpy-1.13.3-py27hbcc08e0_0&amp;#39;&lt;/span&gt;.
CondaError: Cannot link a &lt;span class="nb"&gt;source&lt;/span&gt; that does not exist. /home/guchio/miniconda2/pkgs/numpy-1.13.3-py27hbcc08e0_0/bin/f2py
Attempting to roll back.


CondaError: Cannot link a &lt;span class="nb"&gt;source&lt;/span&gt; that does not exist. /home/guchio/miniconda2/pkgs/numpy-1.13.3-py27hbcc08e0_0/bin/f2py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;そこで&lt;a href="https://github.com/conda/conda/issues/6078"&gt;ここ&lt;/a&gt;を参考に、以下を行ったところ解決。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ conda clean --all
$ conda update conda
$ conda update --all
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これで以下のように conda 上に mkl を利用する numpy の実行環境が完成。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python -c &lt;span class="s2"&gt;&amp;quot;import numpy as np; print(np.__config__.show())&amp;quot;&lt;/span&gt;
lapack_opt_info:
    &lt;span class="nv"&gt;libraries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mkl_rt&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;pthread&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="nv"&gt;library_dirs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/guchio/miniconda2/envs/ntmenv-owl/lib&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="nv"&gt;define_macros&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SCIPY_MKL_H&amp;#39;&lt;/span&gt;, None&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HAVE_CBLAS&amp;#39;&lt;/span&gt;, None&lt;span class="o"&gt;)]&lt;/span&gt;
    &lt;span class="nv"&gt;include_dirs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/guchio/miniconda2/envs/ntmenv-owl/include&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
blas_opt_info:
    &lt;span class="nv"&gt;libraries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mkl_rt&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;pthread&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="nv"&gt;library_dirs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/guchio/miniconda2/envs/ntmenv-owl/lib&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="nv"&gt;define_macros&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SCIPY_MKL_H&amp;#39;&lt;/span&gt;, None&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HAVE_CBLAS&amp;#39;&lt;/span&gt;, None&lt;span class="o"&gt;)]&lt;/span&gt;
    &lt;span class="nv"&gt;include_dirs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/guchio/miniconda2/envs/ntmenv-owl/include&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
lapack_mkl_info:
    &lt;span class="nv"&gt;libraries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mkl_rt&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;pthread&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="nv"&gt;library_dirs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/guchio/miniconda2/envs/ntmenv-owl/lib&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="nv"&gt;define_macros&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SCIPY_MKL_H&amp;#39;&lt;/span&gt;, None&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HAVE_CBLAS&amp;#39;&lt;/span&gt;, None&lt;span class="o"&gt;)]&lt;/span&gt;
    &lt;span class="nv"&gt;include_dirs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/guchio/miniconda2/envs/ntmenv-owl/include&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
blas_mkl_info:
    &lt;span class="nv"&gt;libraries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mkl_rt&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;pthread&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="nv"&gt;library_dirs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/guchio/miniconda2/envs/ntmenv-owl/lib&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="nv"&gt;define_macros&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SCIPY_MKL_H&amp;#39;&lt;/span&gt;, None&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HAVE_CBLAS&amp;#39;&lt;/span&gt;, None&lt;span class="o"&gt;)]&lt;/span&gt;
    &lt;span class="nv"&gt;include_dirs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/guchio/miniconda2/envs/ntmenv-owl/include&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
None
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;そこで、openblas を利用した場合と mkl を利用した場合の速度テストを以下のコードによって行ってみた。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4000000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4000000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;before_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;after_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;after_time&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;before_time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;結果は openblas を利用するものが 25.502314、mkl を利用するものが 21.625779 となった。&lt;/p&gt;
&lt;p&gt;次に Theano も以下のように入れ直し、無事成功。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ conda install &lt;span class="nv"&gt;theano&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.8.2
$ python -c &lt;span class="s2"&gt;&amp;quot;import theano; print(theano.config.blas.ldflags)&amp;quot;&lt;/span&gt;
-L/home/guchio/miniconda2/envs/ntmenv-owl/lib -lmkl_rt -lpthread -lm -lm
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Theano の速度テストをしてみる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python &lt;span class="sb"&gt;`&lt;/span&gt;python -c &lt;span class="s2"&gt;&amp;quot;import os, theano; print(os.path.dirname(theano.__file__))&amp;quot;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;/misc/check_blas.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;結果は numpy 経由で openblas を利用するものが 11.99s、mkl を利用するものが 11.32s となった。&lt;br&gt;
正直あまり変わらない...&lt;/p&gt;
&lt;h3&gt;Result&lt;/h3&gt;
&lt;p&gt;環境も整ったので profiling してみた。以下が結果。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Function &lt;span class="nv"&gt;profiling&lt;/span&gt;
&lt;span class="o"&gt;==================&lt;/span&gt;
  Message: examples/run_tasks.py:376
  Time in &lt;span class="m"&gt;100&lt;/span&gt; calls to Function.__call__: &lt;span class="m"&gt;4&lt;/span&gt;.939490e+01s
  Time in Function.fn.__call__: &lt;span class="m"&gt;4&lt;/span&gt;.933104e+01s &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;99&lt;/span&gt;.871%&lt;span class="o"&gt;)&lt;/span&gt;
  Time in thunks: &lt;span class="m"&gt;4&lt;/span&gt;.895610e+01s &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;99&lt;/span&gt;.112%&lt;span class="o"&gt;)&lt;/span&gt;
  Total compile time: &lt;span class="m"&gt;1&lt;/span&gt;.077718e+03s
    Number of Apply nodes: &lt;span class="m"&gt;1288&lt;/span&gt;
    Theano Optimizer time: &lt;span class="m"&gt;1&lt;/span&gt;.013889e+03s
       Theano validate time: &lt;span class="m"&gt;3&lt;/span&gt;.349193e+00s
    Theano Linker &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;includes C, CUDA code generation/compiling&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;5&lt;/span&gt;.913572e+01s
       Import &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt;.540491e-01s

Time in all call to theano.grad&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;.068751e+01s
Time since theano import &lt;span class="m"&gt;1184&lt;/span&gt;.741s
Class
---
&amp;lt;% time&amp;gt; &amp;lt;sum %&amp;gt; &amp;lt;apply time&amp;gt; &amp;lt;&lt;span class="nb"&gt;time&lt;/span&gt; per call&amp;gt; &amp;lt;type&amp;gt; &amp;lt;&lt;span class="c1"&gt;#call&amp;gt; &amp;lt;#apply&amp;gt; &amp;lt;Class name&amp;gt;&lt;/span&gt;
  &lt;span class="m"&gt;98&lt;/span&gt;.9%    &lt;span class="m"&gt;98&lt;/span&gt;.9%      &lt;span class="m"&gt;48&lt;/span&gt;.411s       &lt;span class="m"&gt;2&lt;/span&gt;.42e-01s     Py     &lt;span class="m"&gt;200&lt;/span&gt;       &lt;span class="m"&gt;2&lt;/span&gt;   theano.scan_module.scan_op.Scan
   &lt;span class="m"&gt;0&lt;/span&gt;.5%    &lt;span class="m"&gt;99&lt;/span&gt;.4%       &lt;span class="m"&gt;0&lt;/span&gt;.260s       &lt;span class="m"&gt;3&lt;/span&gt;.79e-06s     C    &lt;span class="m"&gt;68500&lt;/span&gt;     &lt;span class="m"&gt;685&lt;/span&gt;   theano.tensor.elemwise.Elemwise
   &lt;span class="m"&gt;0&lt;/span&gt;.2%    &lt;span class="m"&gt;99&lt;/span&gt;.6%       &lt;span class="m"&gt;0&lt;/span&gt;.076s       &lt;span class="m"&gt;7&lt;/span&gt;.57e-05s     C     &lt;span class="m"&gt;1000&lt;/span&gt;      &lt;span class="m"&gt;10&lt;/span&gt;   theano.tensor.blas.Dot22
   &lt;span class="m"&gt;0&lt;/span&gt;.1%    &lt;span class="m"&gt;99&lt;/span&gt;.7%       &lt;span class="m"&gt;0&lt;/span&gt;.056s       &lt;span class="m"&gt;7&lt;/span&gt;.38e-06s     C     &lt;span class="m"&gt;7600&lt;/span&gt;      &lt;span class="m"&gt;76&lt;/span&gt;   theano.tensor.basic.Alloc
   &lt;span class="m"&gt;0&lt;/span&gt;.1%    &lt;span class="m"&gt;99&lt;/span&gt;.7%       &lt;span class="m"&gt;0&lt;/span&gt;.031s       &lt;span class="m"&gt;3&lt;/span&gt;.08e-04s     C      &lt;span class="m"&gt;100&lt;/span&gt;       &lt;span class="m"&gt;1&lt;/span&gt;   theano.tensor.nnet.nnet.SoftmaxWithBias
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.8%       &lt;span class="m"&gt;0&lt;/span&gt;.016s       &lt;span class="m"&gt;5&lt;/span&gt;.26e-05s     C      &lt;span class="m"&gt;300&lt;/span&gt;       &lt;span class="m"&gt;3&lt;/span&gt;   theano.tensor.blas.Gemm
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.8%       &lt;span class="m"&gt;0&lt;/span&gt;.013s       &lt;span class="m"&gt;7&lt;/span&gt;.60e-07s     C    &lt;span class="m"&gt;17300&lt;/span&gt;     &lt;span class="m"&gt;173&lt;/span&gt;   theano.compile.ops.Shape_i
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.8%       &lt;span class="m"&gt;0&lt;/span&gt;.012s       &lt;span class="m"&gt;1&lt;/span&gt;.52e-05s     C      &lt;span class="m"&gt;800&lt;/span&gt;       &lt;span class="m"&gt;8&lt;/span&gt;   theano.tensor.subtensor.IncSubtensor
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.9%       &lt;span class="m"&gt;0&lt;/span&gt;.012s       &lt;span class="m"&gt;9&lt;/span&gt;.10e-06s     C     &lt;span class="m"&gt;1300&lt;/span&gt;      &lt;span class="m"&gt;13&lt;/span&gt;   theano.tensor.basic.Join
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.9%       &lt;span class="m"&gt;0&lt;/span&gt;.011s       &lt;span class="m"&gt;2&lt;/span&gt;.94e-06s     C     &lt;span class="m"&gt;3600&lt;/span&gt;      &lt;span class="m"&gt;36&lt;/span&gt;   theano.tensor.basic.Reshape
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.9%       &lt;span class="m"&gt;0&lt;/span&gt;.009s       &lt;span class="m"&gt;4&lt;/span&gt;.69e-05s     Py     &lt;span class="m"&gt;200&lt;/span&gt;       &lt;span class="m"&gt;2&lt;/span&gt;   theano.tensor.subtensor.AdvancedSubtensor
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.9%       &lt;span class="m"&gt;0&lt;/span&gt;.009s       &lt;span class="m"&gt;1&lt;/span&gt;.15e-06s     C     &lt;span class="m"&gt;7500&lt;/span&gt;      &lt;span class="m"&gt;75&lt;/span&gt;   theano.tensor.subtensor.Subtensor
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.9%       &lt;span class="m"&gt;0&lt;/span&gt;.008s       &lt;span class="m"&gt;1&lt;/span&gt;.09e-06s     C     &lt;span class="m"&gt;7100&lt;/span&gt;      &lt;span class="m"&gt;71&lt;/span&gt;   theano.tensor.elemwise.DimShuffle
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.9%       &lt;span class="m"&gt;0&lt;/span&gt;.007s       &lt;span class="m"&gt;7&lt;/span&gt;.10e-05s     Py     &lt;span class="m"&gt;100&lt;/span&gt;       &lt;span class="m"&gt;1&lt;/span&gt;   theano.tensor.subtensor.AdvancedIncSubtensor
   &lt;span class="m"&gt;0&lt;/span&gt;.0%   &lt;span class="m"&gt;100&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.007s       &lt;span class="m"&gt;8&lt;/span&gt;.76e-07s     C     &lt;span class="m"&gt;7700&lt;/span&gt;      &lt;span class="m"&gt;77&lt;/span&gt;   theano.tensor.opt.MakeVector
   &lt;span class="m"&gt;0&lt;/span&gt;.0%   &lt;span class="m"&gt;100&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.005s       &lt;span class="m"&gt;4&lt;/span&gt;.84e-05s     Py     &lt;span class="m"&gt;100&lt;/span&gt;       &lt;span class="m"&gt;1&lt;/span&gt;   theano.tensor.basic.Nonzero
   &lt;span class="m"&gt;0&lt;/span&gt;.0%   &lt;span class="m"&gt;100&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.004s       &lt;span class="m"&gt;3&lt;/span&gt;.68e-05s     C      &lt;span class="m"&gt;100&lt;/span&gt;       &lt;span class="m"&gt;1&lt;/span&gt;   theano.tensor.nnet.nnet.SoftmaxGrad
   &lt;span class="m"&gt;0&lt;/span&gt;.0%   &lt;span class="m"&gt;100&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.003s       &lt;span class="m"&gt;1&lt;/span&gt;.59e-05s     C      &lt;span class="m"&gt;200&lt;/span&gt;       &lt;span class="m"&gt;2&lt;/span&gt;   theano.tensor.subtensor.AdvancedSubtensor1
   &lt;span class="m"&gt;0&lt;/span&gt;.0%   &lt;span class="m"&gt;100&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.003s       &lt;span class="m"&gt;7&lt;/span&gt;.57e-06s     C      &lt;span class="m"&gt;400&lt;/span&gt;       &lt;span class="m"&gt;4&lt;/span&gt;   theano.tensor.elemwise.Sum
   &lt;span class="m"&gt;0&lt;/span&gt;.0%   &lt;span class="m"&gt;100&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.001s       &lt;span class="m"&gt;1&lt;/span&gt;.35e-05s     C      &lt;span class="m"&gt;100&lt;/span&gt;       &lt;span class="m"&gt;1&lt;/span&gt;   theano.compile.ops.DeepCopyOp
   ... &lt;span class="o"&gt;(&lt;/span&gt;remaining &lt;span class="m"&gt;5&lt;/span&gt; Classes account &lt;span class="k"&gt;for&lt;/span&gt;   &lt;span class="m"&gt;0&lt;/span&gt;.01%&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.00s&lt;span class="o"&gt;)&lt;/span&gt; of the runtime&lt;span class="o"&gt;)&lt;/span&gt;

Ops
---
&amp;lt;% time&amp;gt; &amp;lt;sum %&amp;gt; &amp;lt;apply time&amp;gt; &amp;lt;&lt;span class="nb"&gt;time&lt;/span&gt; per call&amp;gt; &amp;lt;type&amp;gt; &amp;lt;&lt;span class="c1"&gt;#call&amp;gt; &amp;lt;#apply&amp;gt; &amp;lt;Op name&amp;gt;&lt;/span&gt;
  &lt;span class="m"&gt;89&lt;/span&gt;.8%    &lt;span class="m"&gt;89&lt;/span&gt;.8%      &lt;span class="m"&gt;43&lt;/span&gt;.985s       &lt;span class="m"&gt;4&lt;/span&gt;.40e-01s     Py     &lt;span class="m"&gt;100&lt;/span&gt;        &lt;span class="m"&gt;1&lt;/span&gt;   forall_inplace,cpu,grad_of_scan_fn&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;grad_of_scan_fn&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;9&lt;/span&gt;.0%    &lt;span class="m"&gt;98&lt;/span&gt;.9%       &lt;span class="m"&gt;4&lt;/span&gt;.426s       &lt;span class="m"&gt;4&lt;/span&gt;.43e-02s     Py     &lt;span class="m"&gt;100&lt;/span&gt;        &lt;span class="m"&gt;1&lt;/span&gt;   forall_inplace,cpu,scan_fn&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.2%    &lt;span class="m"&gt;99&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.076s       &lt;span class="m"&gt;7&lt;/span&gt;.57e-05s     C     &lt;span class="m"&gt;1000&lt;/span&gt;       &lt;span class="m"&gt;10&lt;/span&gt;   Dot22
   &lt;span class="m"&gt;0&lt;/span&gt;.1%    &lt;span class="m"&gt;99&lt;/span&gt;.2%       &lt;span class="m"&gt;0&lt;/span&gt;.056s       &lt;span class="m"&gt;7&lt;/span&gt;.38e-06s     C     &lt;span class="m"&gt;7600&lt;/span&gt;       &lt;span class="m"&gt;76&lt;/span&gt;   Alloc
   &lt;span class="m"&gt;0&lt;/span&gt;.1%    &lt;span class="m"&gt;99&lt;/span&gt;.2%       &lt;span class="m"&gt;0&lt;/span&gt;.034s       &lt;span class="m"&gt;5&lt;/span&gt;.62e-06s     C     &lt;span class="m"&gt;6000&lt;/span&gt;       &lt;span class="m"&gt;60&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Clip&lt;span class="o"&gt;}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.1%    &lt;span class="m"&gt;99&lt;/span&gt;.3%       &lt;span class="m"&gt;0&lt;/span&gt;.031s       &lt;span class="m"&gt;3&lt;/span&gt;.08e-04s     C      &lt;span class="m"&gt;100&lt;/span&gt;        &lt;span class="m"&gt;1&lt;/span&gt;   SoftmaxWithBias
   &lt;span class="m"&gt;0&lt;/span&gt;.1%    &lt;span class="m"&gt;99&lt;/span&gt;.3%       &lt;span class="m"&gt;0&lt;/span&gt;.030s       &lt;span class="m"&gt;2&lt;/span&gt;.68e-06s     C     &lt;span class="m"&gt;11300&lt;/span&gt;      &lt;span class="m"&gt;113&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Add&lt;span class="o"&gt;}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.1%    &lt;span class="m"&gt;99&lt;/span&gt;.4%       &lt;span class="m"&gt;0&lt;/span&gt;.029s       &lt;span class="m"&gt;4&lt;/span&gt;.97e-06s     C     &lt;span class="m"&gt;5900&lt;/span&gt;       &lt;span class="m"&gt;59&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{((&lt;/span&gt;i0 * i1&lt;span class="o"&gt;)&lt;/span&gt; - &lt;span class="o"&gt;((&lt;/span&gt;i2 * i3&lt;span class="o"&gt;)&lt;/span&gt; / sqrt&lt;span class="o"&gt;((&lt;/span&gt;i2 + i4 + i5 + sqr&lt;span class="o"&gt;(&lt;/span&gt;i6&lt;span class="o"&gt;)))))}}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.1%    &lt;span class="m"&gt;99&lt;/span&gt;.5%       &lt;span class="m"&gt;0&lt;/span&gt;.026s       &lt;span class="m"&gt;4&lt;/span&gt;.39e-06s     C     &lt;span class="m"&gt;5900&lt;/span&gt;       &lt;span class="m"&gt;59&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{((&lt;/span&gt;i0 * i1&lt;span class="o"&gt;)&lt;/span&gt; + &lt;span class="o"&gt;(&lt;/span&gt;i2 * i3&lt;span class="o"&gt;))}}&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.5%       &lt;span class="m"&gt;0&lt;/span&gt;.023s       &lt;span class="m"&gt;3&lt;/span&gt;.25e-06s     C     &lt;span class="m"&gt;7000&lt;/span&gt;       &lt;span class="m"&gt;70&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Mul&lt;span class="o"&gt;}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.6%       &lt;span class="m"&gt;0&lt;/span&gt;.021s       &lt;span class="m"&gt;2&lt;/span&gt;.07e-04s     C      &lt;span class="m"&gt;100&lt;/span&gt;        &lt;span class="m"&gt;1&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;sqr,no_inplace&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.6%       &lt;span class="m"&gt;0&lt;/span&gt;.020s       &lt;span class="m"&gt;2&lt;/span&gt;.91e-06s     C     &lt;span class="m"&gt;7000&lt;/span&gt;       &lt;span class="m"&gt;70&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{(&lt;/span&gt;i0 * sqr&lt;span class="o"&gt;(&lt;/span&gt;i1&lt;span class="o"&gt;))}}&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.6%       &lt;span class="m"&gt;0&lt;/span&gt;.019s       &lt;span class="m"&gt;3&lt;/span&gt;.04e-06s     C     &lt;span class="m"&gt;6200&lt;/span&gt;       &lt;span class="m"&gt;62&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;add,no_inplace&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.7%       &lt;span class="m"&gt;0&lt;/span&gt;.016s       &lt;span class="m"&gt;5&lt;/span&gt;.26e-05s     C      &lt;span class="m"&gt;300&lt;/span&gt;        &lt;span class="m"&gt;3&lt;/span&gt;   Gemm&lt;span class="o"&gt;{&lt;/span&gt;inplace&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.7%       &lt;span class="m"&gt;0&lt;/span&gt;.012s       &lt;span class="m"&gt;1&lt;/span&gt;.48e-05s     C      &lt;span class="m"&gt;800&lt;/span&gt;        &lt;span class="m"&gt;8&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{((&lt;/span&gt;i0 * i1&lt;span class="o"&gt;)&lt;/span&gt; - &lt;span class="o"&gt;((&lt;/span&gt;i2 * i3&lt;span class="o"&gt;)&lt;/span&gt; / sqrt&lt;span class="o"&gt;((&lt;/span&gt;i2 + i4 + i5 + sqr&lt;span class="o"&gt;(&lt;/span&gt;i6&lt;span class="o"&gt;)))))}}&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.7%       &lt;span class="m"&gt;0&lt;/span&gt;.012s       &lt;span class="m"&gt;9&lt;/span&gt;.10e-06s     C     &lt;span class="m"&gt;1300&lt;/span&gt;       &lt;span class="m"&gt;13&lt;/span&gt;   Join
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.7%       &lt;span class="m"&gt;0&lt;/span&gt;.010s       &lt;span class="m"&gt;3&lt;/span&gt;.52e-06s     C     &lt;span class="m"&gt;2700&lt;/span&gt;       &lt;span class="m"&gt;27&lt;/span&gt;   Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.8%       &lt;span class="m"&gt;0&lt;/span&gt;.009s       &lt;span class="m"&gt;4&lt;/span&gt;.69e-05s     Py     &lt;span class="m"&gt;200&lt;/span&gt;        &lt;span class="m"&gt;2&lt;/span&gt;   AdvancedSubtensor
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.8%       &lt;span class="m"&gt;0&lt;/span&gt;.008s       &lt;span class="m"&gt;8&lt;/span&gt;.38e-05s     C      &lt;span class="m"&gt;100&lt;/span&gt;        &lt;span class="m"&gt;1&lt;/span&gt;   IncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;Inc&lt;span class="p"&gt;;&lt;/span&gt;:int64:&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.8%       &lt;span class="m"&gt;0&lt;/span&gt;.008s       &lt;span class="m"&gt;7&lt;/span&gt;.00e-06s     C     &lt;span class="m"&gt;1100&lt;/span&gt;       &lt;span class="m"&gt;11&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;clip,no_inplace&lt;span class="o"&gt;}&lt;/span&gt;
   ... &lt;span class="o"&gt;(&lt;/span&gt;remaining &lt;span class="m"&gt;109&lt;/span&gt; Ops account &lt;span class="k"&gt;for&lt;/span&gt;   &lt;span class="m"&gt;0&lt;/span&gt;.22%&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.11s&lt;span class="o"&gt;)&lt;/span&gt; of the runtime&lt;span class="o"&gt;)&lt;/span&gt;

Apply
------
&amp;lt;% time&amp;gt; &amp;lt;sum %&amp;gt; &amp;lt;apply time&amp;gt; &amp;lt;&lt;span class="nb"&gt;time&lt;/span&gt; per call&amp;gt; &amp;lt;&lt;span class="c1"&gt;#call&amp;gt; &amp;lt;id&amp;gt; &amp;lt;Apply name&amp;gt;&lt;/span&gt;
  &lt;span class="m"&gt;89&lt;/span&gt;.8%    &lt;span class="m"&gt;89&lt;/span&gt;.8%      &lt;span class="m"&gt;43&lt;/span&gt;.985s       &lt;span class="m"&gt;4&lt;/span&gt;.40e-01s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;783&lt;/span&gt;   forall_inplace,cpu,grad_of_scan_fn&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;grad_of_scan_fn&lt;span class="o"&gt;}(&lt;/span&gt;Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{&lt;/span&gt;Switch&lt;span class="o"&gt;(&lt;/span&gt;EQ&lt;span class="o"&gt;(&lt;/span&gt;i0, i1&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;((&lt;/span&gt;i2 * i3&lt;span class="o"&gt;)&lt;/span&gt; // &lt;span class="o"&gt;(&lt;/span&gt;i4 * i0&lt;span class="o"&gt;))&lt;/span&gt;, i0&lt;span class="o"&gt;)}}&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;sqr,no_inplace&lt;span class="o"&gt;}&lt;/span&gt;.0, InplaceDimShuffle&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;,1,3,2&lt;span class="o"&gt;}&lt;/span&gt;.0, InplaceDimShuffle&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;,1,3,2&lt;span class="o"&gt;}&lt;/span&gt;.0, InplaceDimShuffle&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;,1,2&lt;span class="o"&gt;}&lt;/span&gt;.0, InplaceDimShuffle&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;,1,2,3,x&lt;span class="o"&gt;}&lt;/span&gt;.0, Subtensor&lt;span class="o"&gt;{&lt;/span&gt;int64:int64:int64&lt;span class="o"&gt;}&lt;/span&gt;.0, Subtensor&lt;span class="o"&gt;{&lt;/span&gt;int64:int64:int64&lt;span class="o"&gt;}&lt;/span&gt;.0, Subtensor&lt;span class="o"&gt;{&lt;/span&gt;int64:int64:int64&lt;span class="o"&gt;}&lt;/span&gt;.0, Subtensor&lt;span class="o"&gt;{&lt;/span&gt;int64:int64:int64&lt;span class="o"&gt;}&lt;/span&gt;.0, Subtensor&lt;span class="o"&gt;{&lt;/span&gt;int64:int64:int64&lt;span class="o"&gt;}&lt;/span&gt;.0, Subtensor&lt;span class="o"&gt;{&lt;/span&gt;int64:int6
   &lt;span class="m"&gt;9&lt;/span&gt;.0%    &lt;span class="m"&gt;98&lt;/span&gt;.9%       &lt;span class="m"&gt;4&lt;/span&gt;.426s       &lt;span class="m"&gt;4&lt;/span&gt;.43e-02s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;688&lt;/span&gt;   forall_inplace,cpu,scan_fn&lt;span class="o"&gt;}(&lt;/span&gt;Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{&lt;/span&gt;Switch&lt;span class="o"&gt;(&lt;/span&gt;EQ&lt;span class="o"&gt;(&lt;/span&gt;i0, i1&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;((&lt;/span&gt;i2 * i3&lt;span class="o"&gt;)&lt;/span&gt; // &lt;span class="o"&gt;(&lt;/span&gt;i4 * i0&lt;span class="o"&gt;))&lt;/span&gt;, i0&lt;span class="o"&gt;)}}&lt;/span&gt;.0, Subtensor&lt;span class="o"&gt;{&lt;/span&gt;int64:int64:int8&lt;span class="o"&gt;}&lt;/span&gt;.0, IncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;InplaceSet&lt;span class="p"&gt;;&lt;/span&gt;:int64:&lt;span class="o"&gt;}&lt;/span&gt;.0, IncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;InplaceSet&lt;span class="p"&gt;;&lt;/span&gt;:int64:&lt;span class="o"&gt;}&lt;/span&gt;.0, IncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;InplaceSet&lt;span class="p"&gt;;&lt;/span&gt;:int64:&lt;span class="o"&gt;}&lt;/span&gt;.0, IncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;InplaceSet&lt;span class="p"&gt;;&lt;/span&gt;:int64:&lt;span class="o"&gt;}&lt;/span&gt;.0, IncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;InplaceSet&lt;span class="p"&gt;;&lt;/span&gt;:int64:&lt;span class="o"&gt;}&lt;/span&gt;.0, controller.W_in_and_reads_to_o01, controller.W_hid_to_o01, controller.W_in_and_reads_to_i01, controller.W_hid_to_i01, controller.W_in_and_rea
   &lt;span class="m"&gt;0&lt;/span&gt;.1%    &lt;span class="m"&gt;99&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.031s       &lt;span class="m"&gt;3&lt;/span&gt;.08e-04s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;723&lt;/span&gt;   SoftmaxWithBias&lt;span class="o"&gt;(&lt;/span&gt;Dot22.0, output_modality_net.b&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.021s       &lt;span class="m"&gt;2&lt;/span&gt;.07e-04s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;733&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;sqr,no_inplace&lt;span class="o"&gt;}(&lt;/span&gt;Subtensor&lt;span class="o"&gt;{&lt;/span&gt;int64:int64:int64&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.012s       &lt;span class="m"&gt;1&lt;/span&gt;.17e-04s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;907&lt;/span&gt;   Dot22&lt;span class="o"&gt;(&lt;/span&gt;Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.011s       &lt;span class="m"&gt;1&lt;/span&gt;.14e-04s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;491&lt;/span&gt;   Alloc&lt;span class="o"&gt;(&lt;/span&gt;TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0&lt;span class="o"&gt;}&lt;/span&gt;, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;add,no_inplace&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{&lt;/span&gt;Switch&lt;span class="o"&gt;(&lt;/span&gt;EQ&lt;span class="o"&gt;(&lt;/span&gt;i0, i1&lt;span class="o"&gt;)&lt;/span&gt;, i2, i0&lt;span class="o"&gt;)}}&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{&lt;/span&gt;Switch&lt;span class="o"&gt;(&lt;/span&gt;EQ&lt;span class="o"&gt;(&lt;/span&gt;i0, i1&lt;span class="o"&gt;)&lt;/span&gt;, i2, i0&lt;span class="o"&gt;)}}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.1%       &lt;span class="m"&gt;0&lt;/span&gt;.011s       &lt;span class="m"&gt;1&lt;/span&gt;.12e-04s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;487&lt;/span&gt;   Alloc&lt;span class="o"&gt;(&lt;/span&gt;TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0&lt;span class="o"&gt;}&lt;/span&gt;, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;add,no_inplace&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{&lt;/span&gt;Switch&lt;span class="o"&gt;(&lt;/span&gt;EQ&lt;span class="o"&gt;(&lt;/span&gt;i0, i1&lt;span class="o"&gt;)&lt;/span&gt;, i2, i0&lt;span class="o"&gt;)}}&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{&lt;/span&gt;Switch&lt;span class="o"&gt;(&lt;/span&gt;EQ&lt;span class="o"&gt;(&lt;/span&gt;i0, i1&lt;span class="o"&gt;)&lt;/span&gt;, i2, i0&lt;span class="o"&gt;)}}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.1%       &lt;span class="m"&gt;0&lt;/span&gt;.011s       &lt;span class="m"&gt;1&lt;/span&gt;.08e-04s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;716&lt;/span&gt;   Dot22&lt;span class="o"&gt;(&lt;/span&gt;Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, output_modality_net.W&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.1%       &lt;span class="m"&gt;0&lt;/span&gt;.010s       &lt;span class="m"&gt;9&lt;/span&gt;.90e-05s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;912&lt;/span&gt;   Dot22&lt;span class="o"&gt;(&lt;/span&gt;Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.1%       &lt;span class="m"&gt;0&lt;/span&gt;.009s       &lt;span class="m"&gt;9&lt;/span&gt;.39e-05s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;765&lt;/span&gt;   Dot22&lt;span class="o"&gt;(&lt;/span&gt;SoftmaxGrad.0, output_modality_net.W.T&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.1%       &lt;span class="m"&gt;0&lt;/span&gt;.008s       &lt;span class="m"&gt;8&lt;/span&gt;.38e-05s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;918&lt;/span&gt;   IncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;Inc&lt;span class="p"&gt;;&lt;/span&gt;:int64:&lt;span class="o"&gt;}(&lt;/span&gt;Alloc.0, Subtensor&lt;span class="o"&gt;{&lt;/span&gt;::int64&lt;span class="o"&gt;}&lt;/span&gt;.0, ScalarFromTensor.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.2%       &lt;span class="m"&gt;0&lt;/span&gt;.008s       &lt;span class="m"&gt;8&lt;/span&gt;.29e-05s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;764&lt;/span&gt;   Dot22&lt;span class="o"&gt;(&lt;/span&gt;InplaceDimShuffle&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,0&lt;span class="o"&gt;}&lt;/span&gt;.0, SoftmaxGrad.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.2%       &lt;span class="m"&gt;0&lt;/span&gt;.007s       &lt;span class="m"&gt;7&lt;/span&gt;.10e-05s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;755&lt;/span&gt;   AdvancedIncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False,  &lt;span class="nv"&gt;set_instead_of_inc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False&lt;span class="o"&gt;}(&lt;/span&gt;Alloc.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{((&lt;/span&gt;-i0&lt;span class="o"&gt;)&lt;/span&gt; / i1&lt;span class="o"&gt;)}}&lt;/span&gt;.0, Subtensor&lt;span class="o"&gt;{&lt;/span&gt;int64&lt;span class="o"&gt;}&lt;/span&gt;.0, Subtensor&lt;span class="o"&gt;{&lt;/span&gt;int64&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.2%       &lt;span class="m"&gt;0&lt;/span&gt;.007s       &lt;span class="m"&gt;6&lt;/span&gt;.69e-05s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;1236&lt;/span&gt;   Gemm&lt;span class="o"&gt;{&lt;/span&gt;inplace&lt;span class="o"&gt;}(&lt;/span&gt;Alloc.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.0&lt;span class="o"&gt;}&lt;/span&gt;, Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.0&lt;span class="o"&gt;})&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.2%       &lt;span class="m"&gt;0&lt;/span&gt;.006s       &lt;span class="m"&gt;6&lt;/span&gt;.18e-05s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;914&lt;/span&gt;   Dot22&lt;span class="o"&gt;(&lt;/span&gt;Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.2%       &lt;span class="m"&gt;0&lt;/span&gt;.006s       &lt;span class="m"&gt;6&lt;/span&gt;.09e-05s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;916&lt;/span&gt;   Dot22&lt;span class="o"&gt;(&lt;/span&gt;Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.2%       &lt;span class="m"&gt;0&lt;/span&gt;.006s       &lt;span class="m"&gt;5&lt;/span&gt;.89e-05s    &lt;span class="m"&gt;100&lt;/span&gt;    &lt;span class="m"&gt;74&lt;/span&gt;   Join&lt;span class="o"&gt;(&lt;/span&gt;TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, read0.read0.shift.W, read1.read1.shift.W, read2.read2.shift.W, read3.read3.shift.W&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.2%       &lt;span class="m"&gt;0&lt;/span&gt;.005s       &lt;span class="m"&gt;5&lt;/span&gt;.18e-05s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;1257&lt;/span&gt;   Dot22&lt;span class="o"&gt;(&lt;/span&gt;InplaceDimShuffle&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,0&lt;span class="o"&gt;}&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{((&lt;/span&gt;i0 * i1&lt;span class="o"&gt;)&lt;/span&gt; + &lt;span class="o"&gt;(&lt;/span&gt;i0 * i1 * sgn&lt;span class="o"&gt;(&lt;/span&gt;i2&lt;span class="o"&gt;)))}}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.2%       &lt;span class="m"&gt;0&lt;/span&gt;.005s       &lt;span class="m"&gt;5&lt;/span&gt;.01e-05s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;431&lt;/span&gt;   Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}(&lt;/span&gt;InplaceDimShuffle&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,0,2&lt;span class="o"&gt;}&lt;/span&gt;.0, MakeVector&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;int64&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.3%       &lt;span class="m"&gt;0&lt;/span&gt;.005s       &lt;span class="m"&gt;4&lt;/span&gt;.90e-05s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;441&lt;/span&gt;   AdvancedSubtensor&lt;span class="o"&gt;(&lt;/span&gt;Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, Subtensor&lt;span class="o"&gt;{&lt;/span&gt;int64&lt;span class="o"&gt;}&lt;/span&gt;.0, Subtensor&lt;span class="o"&gt;{&lt;/span&gt;int64&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   ... &lt;span class="o"&gt;(&lt;/span&gt;remaining &lt;span class="m"&gt;1268&lt;/span&gt; Apply instances account &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.75%&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.37s&lt;span class="o"&gt;)&lt;/span&gt; of the runtime&lt;span class="o"&gt;)&lt;/span&gt;

Here are tips to potentially make your code run faster
                 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; you think of new ones, suggest them on the mailing list&lt;span class="o"&gt;)&lt;/span&gt;.
                 Test them first, as they are not guaranteed to always provide a speedup.
  - Try installing amdlibm and &lt;span class="nb"&gt;set&lt;/span&gt; the Theano flag lib.amdlibm&lt;span class="o"&gt;=&lt;/span&gt;True. This speeds up only some Elemwise operation.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;また、grad_of_scan_fn は以下のようになった。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Scan Op profiling &lt;span class="o"&gt;(&lt;/span&gt; grad_of_scan_fn&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;grad_of_scan_fn &lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;==================&lt;/span&gt;
  Message: None
  Time in &lt;span class="m"&gt;100&lt;/span&gt; calls of the op &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; a total of &lt;span class="m"&gt;8680&lt;/span&gt; steps&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;.361261e+01s

  Total &lt;span class="nb"&gt;time&lt;/span&gt; spent in calling the VM &lt;span class="m"&gt;4&lt;/span&gt;.090440e+01s &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;93&lt;/span&gt;.790%&lt;span class="o"&gt;)&lt;/span&gt;
  Total overhead &lt;span class="o"&gt;(&lt;/span&gt;computing slices..&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;.708209e+00s &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.210%&lt;span class="o"&gt;)&lt;/span&gt;

Class
---
&amp;lt;% time&amp;gt; &amp;lt;sum %&amp;gt; &amp;lt;apply time&amp;gt; &amp;lt;&lt;span class="nb"&gt;time&lt;/span&gt; per call&amp;gt; &amp;lt;type&amp;gt; &amp;lt;&lt;span class="c1"&gt;#call&amp;gt; &amp;lt;#apply&amp;gt; &amp;lt;Class name&amp;gt;&lt;/span&gt;
  &lt;span class="m"&gt;26&lt;/span&gt;.9%    &lt;span class="m"&gt;26&lt;/span&gt;.9%       &lt;span class="m"&gt;9&lt;/span&gt;.692s       &lt;span class="m"&gt;2&lt;/span&gt;.86e-06s     C   &lt;span class="m"&gt;3393880&lt;/span&gt;     &lt;span class="m"&gt;391&lt;/span&gt;   theano.tensor.elemwise.Elemwise
  &lt;span class="m"&gt;15&lt;/span&gt;.3%    &lt;span class="m"&gt;42&lt;/span&gt;.2%       &lt;span class="m"&gt;5&lt;/span&gt;.517s       &lt;span class="m"&gt;3&lt;/span&gt;.97e-05s     Py  &lt;span class="m"&gt;138880&lt;/span&gt;      &lt;span class="m"&gt;16&lt;/span&gt;   theano.tensor.basic.Split
   &lt;span class="m"&gt;8&lt;/span&gt;.1%    &lt;span class="m"&gt;50&lt;/span&gt;.3%       &lt;span class="m"&gt;2&lt;/span&gt;.925s       &lt;span class="m"&gt;6&lt;/span&gt;.74e-06s     C   &lt;span class="m"&gt;434000&lt;/span&gt;      &lt;span class="m"&gt;50&lt;/span&gt;   theano.tensor.blas.Dot22
   &lt;span class="m"&gt;7&lt;/span&gt;.5%    &lt;span class="m"&gt;57&lt;/span&gt;.8%       &lt;span class="m"&gt;2&lt;/span&gt;.686s       &lt;span class="m"&gt;7&lt;/span&gt;.74e-05s     C    &lt;span class="m"&gt;34720&lt;/span&gt;       &lt;span class="m"&gt;4&lt;/span&gt;   theano.tensor.nnet.corr.CorrMM_gradInputs
   &lt;span class="m"&gt;5&lt;/span&gt;.6%    &lt;span class="m"&gt;63&lt;/span&gt;.4%       &lt;span class="m"&gt;2&lt;/span&gt;.031s       &lt;span class="m"&gt;5&lt;/span&gt;.85e-05s     C    &lt;span class="m"&gt;34720&lt;/span&gt;       &lt;span class="m"&gt;4&lt;/span&gt;   theano.tensor.nnet.corr.CorrMM_gradWeights
   &lt;span class="m"&gt;3&lt;/span&gt;.8%    &lt;span class="m"&gt;67&lt;/span&gt;.2%       &lt;span class="m"&gt;1&lt;/span&gt;.371s       &lt;span class="m"&gt;2&lt;/span&gt;.47e-06s     C   &lt;span class="m"&gt;555520&lt;/span&gt;      &lt;span class="m"&gt;64&lt;/span&gt;   theano.tensor.elemwise.Sum
   &lt;span class="m"&gt;3&lt;/span&gt;.6%    &lt;span class="m"&gt;70&lt;/span&gt;.8%       &lt;span class="m"&gt;1&lt;/span&gt;.293s       &lt;span class="m"&gt;3&lt;/span&gt;.72e-05s     Py   &lt;span class="m"&gt;34720&lt;/span&gt;       &lt;span class="m"&gt;4&lt;/span&gt;   theano.tensor.subtensor.AdvancedIncSubtensor
   &lt;span class="m"&gt;3&lt;/span&gt;.3%    &lt;span class="m"&gt;74&lt;/span&gt;.1%       &lt;span class="m"&gt;1&lt;/span&gt;.202s       &lt;span class="m"&gt;1&lt;/span&gt;.08e-06s     C   &lt;span class="m"&gt;1111040&lt;/span&gt;     &lt;span class="m"&gt;128&lt;/span&gt;   theano.tensor.elemwise.DimShuffle
   &lt;span class="m"&gt;3&lt;/span&gt;.3%    &lt;span class="m"&gt;77&lt;/span&gt;.4%       &lt;span class="m"&gt;1&lt;/span&gt;.195s       &lt;span class="m"&gt;1&lt;/span&gt;.22e-06s     C   &lt;span class="m"&gt;980840&lt;/span&gt;     &lt;span class="m"&gt;113&lt;/span&gt;   theano.tensor.basic.Reshape
   &lt;span class="m"&gt;2&lt;/span&gt;.7%    &lt;span class="m"&gt;80&lt;/span&gt;.2%       &lt;span class="m"&gt;0&lt;/span&gt;.984s       &lt;span class="m"&gt;5&lt;/span&gt;.67e-05s     C    &lt;span class="m"&gt;17360&lt;/span&gt;       &lt;span class="m"&gt;2&lt;/span&gt;   theano.tensor.nnet.corr.CorrMM
   &lt;span class="m"&gt;2&lt;/span&gt;.4%    &lt;span class="m"&gt;82&lt;/span&gt;.6%       &lt;span class="m"&gt;0&lt;/span&gt;.874s       &lt;span class="m"&gt;6&lt;/span&gt;.71e-06s     C   &lt;span class="m"&gt;130200&lt;/span&gt;      &lt;span class="m"&gt;15&lt;/span&gt;   theano.tensor.blas.BatchedDot
   &lt;span class="m"&gt;1&lt;/span&gt;.8%    &lt;span class="m"&gt;84&lt;/span&gt;.3%       &lt;span class="m"&gt;0&lt;/span&gt;.631s       &lt;span class="m"&gt;9&lt;/span&gt;.09e-06s     C    &lt;span class="m"&gt;69440&lt;/span&gt;       &lt;span class="m"&gt;8&lt;/span&gt;   theano.tensor.blas_c.CGemv
   &lt;span class="m"&gt;1&lt;/span&gt;.7%    &lt;span class="m"&gt;86&lt;/span&gt;.1%       &lt;span class="m"&gt;0&lt;/span&gt;.631s       &lt;span class="m"&gt;1&lt;/span&gt;.04e-06s     C   &lt;span class="m"&gt;607600&lt;/span&gt;      &lt;span class="m"&gt;70&lt;/span&gt;   theano.tensor.subtensor.Subtensor
   &lt;span class="m"&gt;1&lt;/span&gt;.7%    &lt;span class="m"&gt;87&lt;/span&gt;.8%       &lt;span class="m"&gt;0&lt;/span&gt;.625s       &lt;span class="m"&gt;3&lt;/span&gt;.60e-05s     Py   &lt;span class="m"&gt;17360&lt;/span&gt;       &lt;span class="m"&gt;2&lt;/span&gt;   theano.tensor.subtensor.AdvancedSubtensor
   &lt;span class="m"&gt;1&lt;/span&gt;.7%    &lt;span class="m"&gt;89&lt;/span&gt;.5%       &lt;span class="m"&gt;0&lt;/span&gt;.618s       &lt;span class="m"&gt;8&lt;/span&gt;.91e-06s     C    &lt;span class="m"&gt;69440&lt;/span&gt;       &lt;span class="m"&gt;8&lt;/span&gt;   theano.tensor.blas.Dot22Scalar
   &lt;span class="m"&gt;1&lt;/span&gt;.5%    &lt;span class="m"&gt;91&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.532s       &lt;span class="m"&gt;1&lt;/span&gt;.53e-05s     C    &lt;span class="m"&gt;34720&lt;/span&gt;       &lt;span class="m"&gt;4&lt;/span&gt;   theano.tensor.subtensor.IncSubtensor
   &lt;span class="m"&gt;1&lt;/span&gt;.5%    &lt;span class="m"&gt;92&lt;/span&gt;.5%       &lt;span class="m"&gt;0&lt;/span&gt;.532s       &lt;span class="m"&gt;1&lt;/span&gt;.02e-05s     C    &lt;span class="m"&gt;52080&lt;/span&gt;       &lt;span class="m"&gt;6&lt;/span&gt;   theano.tensor.blas.Gemm
   &lt;span class="m"&gt;1&lt;/span&gt;.3%    &lt;span class="m"&gt;93&lt;/span&gt;.8%       &lt;span class="m"&gt;0&lt;/span&gt;.464s       &lt;span class="m"&gt;3&lt;/span&gt;.56e-06s     C   &lt;span class="m"&gt;130200&lt;/span&gt;      &lt;span class="m"&gt;15&lt;/span&gt;   theano.tensor.basic.Join
   &lt;span class="m"&gt;1&lt;/span&gt;.1%    &lt;span class="m"&gt;94&lt;/span&gt;.9%       &lt;span class="m"&gt;0&lt;/span&gt;.406s       &lt;span class="m"&gt;2&lt;/span&gt;.34e-05s     Py   &lt;span class="m"&gt;17360&lt;/span&gt;       &lt;span class="m"&gt;2&lt;/span&gt;   theano.tensor.basic.ARange
   &lt;span class="m"&gt;1&lt;/span&gt;.0%    &lt;span class="m"&gt;95&lt;/span&gt;.9%       &lt;span class="m"&gt;0&lt;/span&gt;.364s       &lt;span class="m"&gt;1&lt;/span&gt;.05e-05s     C    &lt;span class="m"&gt;34720&lt;/span&gt;       &lt;span class="m"&gt;4&lt;/span&gt;   theano.tensor.nnet.nnet.Softmax
   ... &lt;span class="o"&gt;(&lt;/span&gt;remaining &lt;span class="m"&gt;10&lt;/span&gt; Classes account &lt;span class="k"&gt;for&lt;/span&gt;   &lt;span class="m"&gt;4&lt;/span&gt;.09%&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.48s&lt;span class="o"&gt;)&lt;/span&gt; of the runtime&lt;span class="o"&gt;)&lt;/span&gt;

Ops
---
&amp;lt;% time&amp;gt; &amp;lt;sum %&amp;gt; &amp;lt;apply time&amp;gt; &amp;lt;&lt;span class="nb"&gt;time&lt;/span&gt; per call&amp;gt; &amp;lt;type&amp;gt; &amp;lt;&lt;span class="c1"&gt;#call&amp;gt; &amp;lt;#apply&amp;gt; &amp;lt;Op name&amp;gt;&lt;/span&gt;
   &lt;span class="m"&gt;9&lt;/span&gt;.1%     &lt;span class="m"&gt;9&lt;/span&gt;.1%       &lt;span class="m"&gt;3&lt;/span&gt;.277s       &lt;span class="m"&gt;3&lt;/span&gt;.78e-05s     Py    &lt;span class="m"&gt;86800&lt;/span&gt;       &lt;span class="m"&gt;10&lt;/span&gt;   Split&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;8&lt;/span&gt;.1%    &lt;span class="m"&gt;17&lt;/span&gt;.2%       &lt;span class="m"&gt;2&lt;/span&gt;.925s       &lt;span class="m"&gt;6&lt;/span&gt;.74e-06s     C     &lt;span class="m"&gt;434000&lt;/span&gt;       &lt;span class="m"&gt;50&lt;/span&gt;   Dot22
   &lt;span class="m"&gt;7&lt;/span&gt;.5%    &lt;span class="m"&gt;24&lt;/span&gt;.7%       &lt;span class="m"&gt;2&lt;/span&gt;.686s       &lt;span class="m"&gt;7&lt;/span&gt;.74e-05s     C     &lt;span class="m"&gt;34720&lt;/span&gt;        &lt;span class="m"&gt;4&lt;/span&gt;   CorrMM_gradInputs&lt;span class="o"&gt;{&lt;/span&gt;valid, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)}&lt;/span&gt;
   &lt;span class="m"&gt;6&lt;/span&gt;.2%    &lt;span class="m"&gt;30&lt;/span&gt;.9%       &lt;span class="m"&gt;2&lt;/span&gt;.240s       &lt;span class="m"&gt;4&lt;/span&gt;.30e-05s     Py    &lt;span class="m"&gt;52080&lt;/span&gt;        &lt;span class="m"&gt;6&lt;/span&gt;   Split&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;5&lt;/span&gt;.9%    &lt;span class="m"&gt;36&lt;/span&gt;.8%       &lt;span class="m"&gt;2&lt;/span&gt;.125s       &lt;span class="m"&gt;2&lt;/span&gt;.95e-06s     C     &lt;span class="m"&gt;720440&lt;/span&gt;       &lt;span class="m"&gt;83&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;mul,no_inplace&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;5&lt;/span&gt;.6%    &lt;span class="m"&gt;42&lt;/span&gt;.4%       &lt;span class="m"&gt;2&lt;/span&gt;.031s       &lt;span class="m"&gt;5&lt;/span&gt;.85e-05s     C     &lt;span class="m"&gt;34720&lt;/span&gt;        &lt;span class="m"&gt;4&lt;/span&gt;   CorrMM_gradWeights&lt;span class="o"&gt;{&lt;/span&gt;valid, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)}&lt;/span&gt;
   &lt;span class="m"&gt;4&lt;/span&gt;.9%    &lt;span class="m"&gt;47&lt;/span&gt;.3%       &lt;span class="m"&gt;1&lt;/span&gt;.774s       &lt;span class="m"&gt;2&lt;/span&gt;.49e-06s     C     &lt;span class="m"&gt;711760&lt;/span&gt;       &lt;span class="m"&gt;82&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;add,no_inplace&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;3&lt;/span&gt;.6%    &lt;span class="m"&gt;50&lt;/span&gt;.9%       &lt;span class="m"&gt;1&lt;/span&gt;.293s       &lt;span class="m"&gt;3&lt;/span&gt;.72e-05s     Py    &lt;span class="m"&gt;34720&lt;/span&gt;        &lt;span class="m"&gt;4&lt;/span&gt;   AdvancedIncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False,  &lt;span class="nv"&gt;set_instead_of_inc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;2&lt;/span&gt;.7%    &lt;span class="m"&gt;53&lt;/span&gt;.6%       &lt;span class="m"&gt;0&lt;/span&gt;.984s       &lt;span class="m"&gt;5&lt;/span&gt;.67e-05s     C     &lt;span class="m"&gt;17360&lt;/span&gt;        &lt;span class="m"&gt;2&lt;/span&gt;   CorrMM&lt;span class="o"&gt;{&lt;/span&gt;valid, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)}&lt;/span&gt;
   &lt;span class="m"&gt;2&lt;/span&gt;.4%    &lt;span class="m"&gt;56&lt;/span&gt;.1%       &lt;span class="m"&gt;0&lt;/span&gt;.874s       &lt;span class="m"&gt;6&lt;/span&gt;.71e-06s     C     &lt;span class="m"&gt;130200&lt;/span&gt;       &lt;span class="m"&gt;15&lt;/span&gt;   BatchedDot
   &lt;span class="m"&gt;2&lt;/span&gt;.0%    &lt;span class="m"&gt;58&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.705s       &lt;span class="m"&gt;1&lt;/span&gt;.14e-06s     C     &lt;span class="m"&gt;616280&lt;/span&gt;       &lt;span class="m"&gt;71&lt;/span&gt;   Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.8%    &lt;span class="m"&gt;59&lt;/span&gt;.8%       &lt;span class="m"&gt;0&lt;/span&gt;.635s       &lt;span class="m"&gt;2&lt;/span&gt;.22e-06s     C     &lt;span class="m"&gt;286440&lt;/span&gt;       &lt;span class="m"&gt;33&lt;/span&gt;   Sum&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;acc_dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;float64&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.7%    &lt;span class="m"&gt;61&lt;/span&gt;.5%       &lt;span class="m"&gt;0&lt;/span&gt;.625s       &lt;span class="m"&gt;3&lt;/span&gt;.60e-05s     Py    &lt;span class="m"&gt;17360&lt;/span&gt;        &lt;span class="m"&gt;2&lt;/span&gt;   AdvancedSubtensor
   &lt;span class="m"&gt;1&lt;/span&gt;.7%    &lt;span class="m"&gt;63&lt;/span&gt;.2%       &lt;span class="m"&gt;0&lt;/span&gt;.618s       &lt;span class="m"&gt;8&lt;/span&gt;.91e-06s     C     &lt;span class="m"&gt;69440&lt;/span&gt;        &lt;span class="m"&gt;8&lt;/span&gt;   Dot22Scalar
   &lt;span class="m"&gt;1&lt;/span&gt;.5%    &lt;span class="m"&gt;64&lt;/span&gt;.7%       &lt;span class="m"&gt;0&lt;/span&gt;.532s       &lt;span class="m"&gt;1&lt;/span&gt;.02e-05s     C     &lt;span class="m"&gt;52080&lt;/span&gt;        &lt;span class="m"&gt;6&lt;/span&gt;   Gemm&lt;span class="o"&gt;{&lt;/span&gt;inplace&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.4%    &lt;span class="m"&gt;66&lt;/span&gt;.1%       &lt;span class="m"&gt;0&lt;/span&gt;.504s       &lt;span class="m"&gt;9&lt;/span&gt;.36e-07s     C     &lt;span class="m"&gt;538160&lt;/span&gt;       &lt;span class="m"&gt;62&lt;/span&gt;   Subtensor&lt;span class="o"&gt;{&lt;/span&gt;int64&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.4%    &lt;span class="m"&gt;67&lt;/span&gt;.5%       &lt;span class="m"&gt;0&lt;/span&gt;.490s       &lt;span class="m"&gt;1&lt;/span&gt;.35e-06s     C     &lt;span class="m"&gt;364560&lt;/span&gt;       &lt;span class="m"&gt;42&lt;/span&gt;   Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.3%    &lt;span class="m"&gt;68&lt;/span&gt;.7%       &lt;span class="m"&gt;0&lt;/span&gt;.464s       &lt;span class="m"&gt;3&lt;/span&gt;.56e-06s     C     &lt;span class="m"&gt;130200&lt;/span&gt;       &lt;span class="m"&gt;15&lt;/span&gt;   Join
   &lt;span class="m"&gt;1&lt;/span&gt;.2%    &lt;span class="m"&gt;70&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.441s       &lt;span class="m"&gt;1&lt;/span&gt;.69e-05s     C     &lt;span class="m"&gt;26040&lt;/span&gt;        &lt;span class="m"&gt;3&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;pow&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.1%    &lt;span class="m"&gt;71&lt;/span&gt;.1%       &lt;span class="m"&gt;0&lt;/span&gt;.406s       &lt;span class="m"&gt;2&lt;/span&gt;.34e-05s     Py    &lt;span class="m"&gt;17360&lt;/span&gt;        &lt;span class="m"&gt;2&lt;/span&gt;   ARange&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;int64&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
   ... &lt;span class="o"&gt;(&lt;/span&gt;remaining &lt;span class="m"&gt;107&lt;/span&gt; Ops account &lt;span class="k"&gt;for&lt;/span&gt;  &lt;span class="m"&gt;28&lt;/span&gt;.90%&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.42s&lt;span class="o"&gt;)&lt;/span&gt; of the runtime&lt;span class="o"&gt;)&lt;/span&gt;

Apply
    ------
&amp;lt;% time&amp;gt; &amp;lt;sum %&amp;gt; &amp;lt;apply time&amp;gt; &amp;lt;&lt;span class="nb"&gt;time&lt;/span&gt; per call&amp;gt; &amp;lt;&lt;span class="c1"&gt;#call&amp;gt; &amp;lt;id&amp;gt; &amp;lt;Apply name&amp;gt;&lt;/span&gt;
   &lt;span class="m"&gt;2&lt;/span&gt;.8%     &lt;span class="m"&gt;2&lt;/span&gt;.8%       &lt;span class="m"&gt;1&lt;/span&gt;.027s       &lt;span class="m"&gt;1&lt;/span&gt;.18e-04s   &lt;span class="m"&gt;8680&lt;/span&gt;   &lt;span class="m"&gt;514&lt;/span&gt;   CorrMM_gradInputs&lt;span class="o"&gt;{&lt;/span&gt;valid, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)}(&lt;/span&gt;Subtensor&lt;span class="o"&gt;{&lt;/span&gt;::, ::, ::int64, ::int64&lt;span class="o"&gt;}&lt;/span&gt;.0, AdvancedIncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False,  &lt;span class="nv"&gt;set_instead_of_inc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;2&lt;/span&gt;.8%     &lt;span class="m"&gt;5&lt;/span&gt;.7%       &lt;span class="m"&gt;1&lt;/span&gt;.019s       &lt;span class="m"&gt;1&lt;/span&gt;.17e-04s   &lt;span class="m"&gt;8680&lt;/span&gt;   &lt;span class="m"&gt;516&lt;/span&gt;   CorrMM_gradInputs&lt;span class="o"&gt;{&lt;/span&gt;valid, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)}(&lt;/span&gt;Subtensor&lt;span class="o"&gt;{&lt;/span&gt;::, ::, ::int64, ::int64&lt;span class="o"&gt;}&lt;/span&gt;.0, AdvancedIncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False,  &lt;span class="nv"&gt;set_instead_of_inc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;2&lt;/span&gt;.3%     &lt;span class="m"&gt;7&lt;/span&gt;.9%       &lt;span class="m"&gt;0&lt;/span&gt;.819s       &lt;span class="m"&gt;9&lt;/span&gt;.44e-05s   &lt;span class="m"&gt;8680&lt;/span&gt;   &lt;span class="m"&gt;515&lt;/span&gt;   CorrMM_gradWeights&lt;span class="o"&gt;{&lt;/span&gt;valid, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)}(&lt;/span&gt;Subtensor&lt;span class="o"&gt;{&lt;/span&gt;::, ::, ::, :int64:&lt;span class="o"&gt;}&lt;/span&gt;.0, AdvancedIncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False,  &lt;span class="nv"&gt;set_instead_of_inc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;2&lt;/span&gt;.3%    &lt;span class="m"&gt;10&lt;/span&gt;.2%       &lt;span class="m"&gt;0&lt;/span&gt;.815s       &lt;span class="m"&gt;9&lt;/span&gt;.39e-05s   &lt;span class="m"&gt;8680&lt;/span&gt;   &lt;span class="m"&gt;517&lt;/span&gt;   CorrMM_gradWeights&lt;span class="o"&gt;{&lt;/span&gt;valid, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)}(&lt;/span&gt;Subtensor&lt;span class="o"&gt;{&lt;/span&gt;::, ::, ::, :int64:&lt;span class="o"&gt;}&lt;/span&gt;.0, AdvancedIncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False,  &lt;span class="nv"&gt;set_instead_of_inc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;2&lt;/span&gt;.1%    &lt;span class="m"&gt;12&lt;/span&gt;.3%       &lt;span class="m"&gt;0&lt;/span&gt;.756s       &lt;span class="m"&gt;8&lt;/span&gt;.71e-05s   &lt;span class="m"&gt;8680&lt;/span&gt;   &lt;span class="m"&gt;440&lt;/span&gt;   CorrMM&lt;span class="o"&gt;{&lt;/span&gt;valid, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)}(&lt;/span&gt;Subtensor&lt;span class="o"&gt;{&lt;/span&gt;::, ::, ::, :int64:&lt;span class="o"&gt;}&lt;/span&gt;.0, Subtensor&lt;span class="o"&gt;{&lt;/span&gt;::, ::, ::int64, ::int64&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;2&lt;/span&gt;.0%    &lt;span class="m"&gt;14&lt;/span&gt;.3%       &lt;span class="m"&gt;0&lt;/span&gt;.726s       &lt;span class="m"&gt;8&lt;/span&gt;.37e-05s   &lt;span class="m"&gt;8680&lt;/span&gt;   &lt;span class="m"&gt;736&lt;/span&gt;   Split&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;}(&lt;/span&gt;InplaceDimShuffle&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,0,2&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, &amp;lt;TensorType&lt;span class="o"&gt;(&lt;/span&gt;int64, vector&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.3%    &lt;span class="m"&gt;15&lt;/span&gt;.6%       &lt;span class="m"&gt;0&lt;/span&gt;.473s       &lt;span class="m"&gt;5&lt;/span&gt;.45e-05s   &lt;span class="m"&gt;8680&lt;/span&gt;   &lt;span class="m"&gt;583&lt;/span&gt;   Split&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}(&lt;/span&gt;IncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;Inc&lt;span class="p"&gt;;&lt;/span&gt;::, ::, ::, :int64:&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;,&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.3%    &lt;span class="m"&gt;16&lt;/span&gt;.9%       &lt;span class="m"&gt;0&lt;/span&gt;.457s       &lt;span class="m"&gt;5&lt;/span&gt;.27e-05s   &lt;span class="m"&gt;8680&lt;/span&gt;   &lt;span class="m"&gt;836&lt;/span&gt;   Split&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;}(&lt;/span&gt;InplaceDimShuffle&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,0,2&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, &amp;lt;TensorType&lt;span class="o"&gt;(&lt;/span&gt;int64, vector&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.3%    &lt;span class="m"&gt;18&lt;/span&gt;.2%       &lt;span class="m"&gt;0&lt;/span&gt;.451s       &lt;span class="m"&gt;5&lt;/span&gt;.20e-05s   &lt;span class="m"&gt;8680&lt;/span&gt;   &lt;span class="m"&gt;521&lt;/span&gt;   AdvancedIncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False,  &lt;span class="nv"&gt;set_instead_of_inc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False&lt;span class="o"&gt;}(&lt;/span&gt;TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;, ..28&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;0&lt;/span&gt;.0&lt;span class="o"&gt;}&lt;/span&gt;, Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, ARange&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;int64&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, ARange&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;int64&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, SliceConstant&lt;span class="o"&gt;{&lt;/span&gt;None, None, None&lt;span class="o"&gt;})&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.2%    &lt;span class="m"&gt;19&lt;/span&gt;.4%       &lt;span class="m"&gt;0&lt;/span&gt;.450s       &lt;span class="m"&gt;5&lt;/span&gt;.19e-05s   &lt;span class="m"&gt;8680&lt;/span&gt;   &lt;span class="m"&gt;966&lt;/span&gt;   Split&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}(&lt;/span&gt;Elemwise&lt;span class="o"&gt;{&lt;/span&gt;add,no_inplace&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, MakeVector&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;int64&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.1%    &lt;span class="m"&gt;20&lt;/span&gt;.5%       &lt;span class="m"&gt;0&lt;/span&gt;.406s       &lt;span class="m"&gt;4&lt;/span&gt;.68e-05s   &lt;span class="m"&gt;8680&lt;/span&gt;   &lt;span class="m"&gt;443&lt;/span&gt;   AdvancedSubtensor&lt;span class="o"&gt;(&lt;/span&gt;CorrMM&lt;span class="o"&gt;{&lt;/span&gt;valid, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)}&lt;/span&gt;.0, ARange&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;int64&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, ARange&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;int64&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, SliceConstant&lt;span class="o"&gt;{&lt;/span&gt;None, None, None&lt;span class="o"&gt;})&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.1%    &lt;span class="m"&gt;21&lt;/span&gt;.7%       &lt;span class="m"&gt;0&lt;/span&gt;.406s       &lt;span class="m"&gt;4&lt;/span&gt;.67e-05s   &lt;span class="m"&gt;8680&lt;/span&gt;   &lt;span class="m"&gt;552&lt;/span&gt;   Split&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}(&lt;/span&gt;IncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;Inc&lt;span class="p"&gt;;&lt;/span&gt;::, ::, ::, :int64:&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;,&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.1%    &lt;span class="m"&gt;22&lt;/span&gt;.7%       &lt;span class="m"&gt;0&lt;/span&gt;.395s       &lt;span class="m"&gt;4&lt;/span&gt;.55e-05s   &lt;span class="m"&gt;8680&lt;/span&gt;   &lt;span class="m"&gt;877&lt;/span&gt;   Split&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;}(&lt;/span&gt;InplaceDimShuffle&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,0,2&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, &amp;lt;TensorType&lt;span class="o"&gt;(&lt;/span&gt;int64, vector&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.0%    &lt;span class="m"&gt;23&lt;/span&gt;.7%       &lt;span class="m"&gt;0&lt;/span&gt;.352s       &lt;span class="m"&gt;4&lt;/span&gt;.05e-05s   &lt;span class="m"&gt;8680&lt;/span&gt;   &lt;span class="m"&gt;967&lt;/span&gt;   Split&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}(&lt;/span&gt;Elemwise&lt;span class="o"&gt;{&lt;/span&gt;add,no_inplace&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, MakeVector&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;int64&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.0%    &lt;span class="m"&gt;24&lt;/span&gt;.7%       &lt;span class="m"&gt;0&lt;/span&gt;.345s       &lt;span class="m"&gt;3&lt;/span&gt;.98e-05s   &lt;span class="m"&gt;8680&lt;/span&gt;   &lt;span class="m"&gt;531&lt;/span&gt;   CorrMM_gradInputs&lt;span class="o"&gt;{&lt;/span&gt;valid, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)}(&lt;/span&gt;Subtensor&lt;span class="o"&gt;{&lt;/span&gt;::, ::, ::int64, ::int64&lt;span class="o"&gt;}&lt;/span&gt;.0, AdvancedIncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False,  &lt;span class="nv"&gt;set_instead_of_inc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.9%    &lt;span class="m"&gt;25&lt;/span&gt;.6%       &lt;span class="m"&gt;0&lt;/span&gt;.314s       &lt;span class="m"&gt;3&lt;/span&gt;.62e-05s   &lt;span class="m"&gt;8680&lt;/span&gt;   &lt;span class="m"&gt;663&lt;/span&gt;   Dot22&lt;span class="o"&gt;(&lt;/span&gt;InplaceDimShuffle&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,0&lt;span class="o"&gt;}&lt;/span&gt;.0, Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.8%    &lt;span class="m"&gt;26&lt;/span&gt;.4%       &lt;span class="m"&gt;0&lt;/span&gt;.295s       &lt;span class="m"&gt;3&lt;/span&gt;.40e-05s   &lt;span class="m"&gt;8680&lt;/span&gt;   &lt;span class="m"&gt;533&lt;/span&gt;   CorrMM_gradInputs&lt;span class="o"&gt;{&lt;/span&gt;valid, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)}(&lt;/span&gt;Subtensor&lt;span class="o"&gt;{&lt;/span&gt;::, ::, ::int64, ::int64&lt;span class="o"&gt;}&lt;/span&gt;.0, AdvancedIncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False,  &lt;span class="nv"&gt;set_instead_of_inc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.8%    &lt;span class="m"&gt;27&lt;/span&gt;.2%       &lt;span class="m"&gt;0&lt;/span&gt;.290s       &lt;span class="m"&gt;3&lt;/span&gt;.34e-05s   &lt;span class="m"&gt;8680&lt;/span&gt;   &lt;span class="m"&gt;506&lt;/span&gt;   AdvancedIncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False,  &lt;span class="nv"&gt;set_instead_of_inc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False&lt;span class="o"&gt;}(&lt;/span&gt;TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;, &lt;span class="m"&gt;4&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;, ..28&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;0&lt;/span&gt;.0&lt;span class="o"&gt;}&lt;/span&gt;, Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, ARange&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;int64&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, ARange&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;int64&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, SliceConstant&lt;span class="o"&gt;{&lt;/span&gt;None, None, None&lt;span class="o"&gt;})&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.8%    &lt;span class="m"&gt;28&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.287s       &lt;span class="m"&gt;3&lt;/span&gt;.31e-05s   &lt;span class="m"&gt;8680&lt;/span&gt;   &lt;span class="m"&gt;507&lt;/span&gt;   AdvancedIncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False,  &lt;span class="nv"&gt;set_instead_of_inc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False&lt;span class="o"&gt;}(&lt;/span&gt;TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;, &lt;span class="m"&gt;4&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;, ..28&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;0&lt;/span&gt;.0&lt;span class="o"&gt;}&lt;/span&gt;, Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, ARange&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;int64&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, ARange&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;int64&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, SliceConstant&lt;span class="o"&gt;{&lt;/span&gt;None, None, None&lt;span class="o"&gt;})&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.8%    &lt;span class="m"&gt;28&lt;/span&gt;.8%       &lt;span class="m"&gt;0&lt;/span&gt;.281s       &lt;span class="m"&gt;3&lt;/span&gt;.23e-05s   &lt;span class="m"&gt;8680&lt;/span&gt;   &lt;span class="m"&gt;592&lt;/span&gt;   Split&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}(&lt;/span&gt;IncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;InplaceInc&lt;span class="p"&gt;;&lt;/span&gt;::, ::, ::, :int64:&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;,&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt;
   ... &lt;span class="o"&gt;(&lt;/span&gt;remaining &lt;span class="m"&gt;1044&lt;/span&gt; Apply instances account &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="m"&gt;71&lt;/span&gt;.25%&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;.68s&lt;span class="o"&gt;)&lt;/span&gt; of the runtime&lt;span class="o"&gt;)&lt;/span&gt;

Here are tips to potentially make your code run faster
                 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; you think of new ones, suggest them on the mailing list&lt;span class="o"&gt;)&lt;/span&gt;.
                 Test them first, as they are not guaranteed to always provide a speedup.
  - Try installing amdlibm and &lt;span class="nb"&gt;set&lt;/span&gt; the Theano flag lib.amdlibm&lt;span class="o"&gt;=&lt;/span&gt;True. This speeds up only some Elemwise operation.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上記の通り、theano.tensor.blas.~ 系が &lt;type&gt; C となっており、Time in 100 calls to Function.&lt;strong&gt;call&lt;/strong&gt; が 5.591766e+01s から 4.939490e+01s になっている。
一応速度を 0.883 倍にできたっぽい。&lt;/p&gt;
&lt;h1&gt;Install amdlibm&lt;/h1&gt;
&lt;p&gt;Profile の結果に散々書かれているように、amdlibm を使うと elemwise 演算の速度向上が期待できるっぽい。&lt;/p&gt;
&lt;p&gt;そこで、amdlibm を&lt;a href="http://developer.amd.com/amd-cpu-libraries/amd-math-library-libm/"&gt;ここ&lt;/a&gt;からダウンロードし、&lt;a href="https://hvasbath.github.io/beat/installation.html"&gt;ここ&lt;/a&gt;を参考にインストールした。&lt;/p&gt;
&lt;p&gt;その後の profile 結果は以下の通り。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Function &lt;span class="nv"&gt;profiling&lt;/span&gt;
&lt;span class="o"&gt;==================&lt;/span&gt;
  Message: examples/run_tasks.py:376
  Time in &lt;span class="m"&gt;100&lt;/span&gt; calls to Function.__call__: &lt;span class="m"&gt;4&lt;/span&gt;.898488e+01s
  Time in Function.fn.__call__: &lt;span class="m"&gt;4&lt;/span&gt;.892176e+01s &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;99&lt;/span&gt;.871%&lt;span class="o"&gt;)&lt;/span&gt;
  Time in thunks: &lt;span class="m"&gt;4&lt;/span&gt;.854884e+01s &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;99&lt;/span&gt;.110%&lt;span class="o"&gt;)&lt;/span&gt;
  Total compile time: &lt;span class="m"&gt;9&lt;/span&gt;.918714e+02s
    Number of Apply nodes: &lt;span class="m"&gt;1288&lt;/span&gt;
    Theano Optimizer time: &lt;span class="m"&gt;9&lt;/span&gt;.340450e+02s
       Theano validate time: &lt;span class="m"&gt;1&lt;/span&gt;.014861e+01s
    Theano Linker &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;includes C, CUDA code generation/compiling&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;5&lt;/span&gt;.377673e+01s
       Import &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;.545787e-01s

Time in all call to theano.grad&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;.948562e+01s
Time since theano import &lt;span class="m"&gt;1094&lt;/span&gt;.254s
Class
---
&amp;lt;% time&amp;gt; &amp;lt;sum %&amp;gt; &amp;lt;apply time&amp;gt; &amp;lt;&lt;span class="nb"&gt;time&lt;/span&gt; per call&amp;gt; &amp;lt;type&amp;gt; &amp;lt;&lt;span class="c1"&gt;#call&amp;gt; &amp;lt;#apply&amp;gt; &amp;lt;Class name&amp;gt;&lt;/span&gt;
  &lt;span class="m"&gt;98&lt;/span&gt;.6%    &lt;span class="m"&gt;98&lt;/span&gt;.6%      &lt;span class="m"&gt;47&lt;/span&gt;.865s       &lt;span class="m"&gt;2&lt;/span&gt;.39e-01s     Py     &lt;span class="m"&gt;200&lt;/span&gt;       &lt;span class="m"&gt;2&lt;/span&gt;   theano.scan_module.scan_op.Scan
   &lt;span class="m"&gt;0&lt;/span&gt;.9%    &lt;span class="m"&gt;99&lt;/span&gt;.5%       &lt;span class="m"&gt;0&lt;/span&gt;.421s       &lt;span class="m"&gt;6&lt;/span&gt;.14e-06s     C    &lt;span class="m"&gt;68500&lt;/span&gt;     &lt;span class="m"&gt;685&lt;/span&gt;   theano.tensor.elemwise.Elemwise
   &lt;span class="m"&gt;0&lt;/span&gt;.2%    &lt;span class="m"&gt;99&lt;/span&gt;.6%       &lt;span class="m"&gt;0&lt;/span&gt;.078s       &lt;span class="m"&gt;7&lt;/span&gt;.83e-05s     C     &lt;span class="m"&gt;1000&lt;/span&gt;      &lt;span class="m"&gt;10&lt;/span&gt;   theano.tensor.blas.Dot22
   &lt;span class="m"&gt;0&lt;/span&gt;.1%    &lt;span class="m"&gt;99&lt;/span&gt;.7%       &lt;span class="m"&gt;0&lt;/span&gt;.055s       &lt;span class="m"&gt;7&lt;/span&gt;.25e-06s     C     &lt;span class="m"&gt;7600&lt;/span&gt;      &lt;span class="m"&gt;76&lt;/span&gt;   theano.tensor.basic.Alloc
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.8%       &lt;span class="m"&gt;0&lt;/span&gt;.017s       &lt;span class="m"&gt;5&lt;/span&gt;.74e-05s     C      &lt;span class="m"&gt;300&lt;/span&gt;       &lt;span class="m"&gt;3&lt;/span&gt;   theano.tensor.blas.Gemm
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.8%       &lt;span class="m"&gt;0&lt;/span&gt;.013s       &lt;span class="m"&gt;7&lt;/span&gt;.57e-07s     C    &lt;span class="m"&gt;17300&lt;/span&gt;     &lt;span class="m"&gt;173&lt;/span&gt;   theano.compile.ops.Shape_i
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.8%       &lt;span class="m"&gt;0&lt;/span&gt;.012s       &lt;span class="m"&gt;1&lt;/span&gt;.47e-05s     C      &lt;span class="m"&gt;800&lt;/span&gt;       &lt;span class="m"&gt;8&lt;/span&gt;   theano.tensor.subtensor.IncSubtensor
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.8%       &lt;span class="m"&gt;0&lt;/span&gt;.012s       &lt;span class="m"&gt;8&lt;/span&gt;.85e-06s     C     &lt;span class="m"&gt;1300&lt;/span&gt;      &lt;span class="m"&gt;13&lt;/span&gt;   theano.tensor.basic.Join
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.9%       &lt;span class="m"&gt;0&lt;/span&gt;.010s       &lt;span class="m"&gt;2&lt;/span&gt;.86e-06s     C     &lt;span class="m"&gt;3600&lt;/span&gt;      &lt;span class="m"&gt;36&lt;/span&gt;   theano.tensor.basic.Reshape
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.9%       &lt;span class="m"&gt;0&lt;/span&gt;.009s       &lt;span class="m"&gt;1&lt;/span&gt;.17e-06s     C     &lt;span class="m"&gt;7500&lt;/span&gt;      &lt;span class="m"&gt;75&lt;/span&gt;   theano.tensor.subtensor.Subtensor
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.9%       &lt;span class="m"&gt;0&lt;/span&gt;.008s       &lt;span class="m"&gt;4&lt;/span&gt;.09e-05s     Py     &lt;span class="m"&gt;200&lt;/span&gt;       &lt;span class="m"&gt;2&lt;/span&gt;   theano.tensor.subtensor.AdvancedSubtensor
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.9%       &lt;span class="m"&gt;0&lt;/span&gt;.008s       &lt;span class="m"&gt;8&lt;/span&gt;.03e-05s     C      &lt;span class="m"&gt;100&lt;/span&gt;       &lt;span class="m"&gt;1&lt;/span&gt;   theano.tensor.nnet.nnet.SoftmaxWithBias
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.9%       &lt;span class="m"&gt;0&lt;/span&gt;.008s       &lt;span class="m"&gt;1&lt;/span&gt;.07e-06s     C     &lt;span class="m"&gt;7100&lt;/span&gt;      &lt;span class="m"&gt;71&lt;/span&gt;   theano.tensor.elemwise.DimShuffle
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.9%       &lt;span class="m"&gt;0&lt;/span&gt;.007s       &lt;span class="m"&gt;6&lt;/span&gt;.79e-05s     Py     &lt;span class="m"&gt;100&lt;/span&gt;       &lt;span class="m"&gt;1&lt;/span&gt;   theano.tensor.subtensor.AdvancedIncSubtensor
   &lt;span class="m"&gt;0&lt;/span&gt;.0%   &lt;span class="m"&gt;100&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.007s       &lt;span class="m"&gt;8&lt;/span&gt;.55e-07s     C     &lt;span class="m"&gt;7700&lt;/span&gt;      &lt;span class="m"&gt;77&lt;/span&gt;   theano.tensor.opt.MakeVector
   &lt;span class="m"&gt;0&lt;/span&gt;.0%   &lt;span class="m"&gt;100&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.004s       &lt;span class="m"&gt;4&lt;/span&gt;.45e-05s     Py     &lt;span class="m"&gt;100&lt;/span&gt;       &lt;span class="m"&gt;1&lt;/span&gt;   theano.tensor.basic.Nonzero
   &lt;span class="m"&gt;0&lt;/span&gt;.0%   &lt;span class="m"&gt;100&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.004s       &lt;span class="m"&gt;3&lt;/span&gt;.84e-05s     C      &lt;span class="m"&gt;100&lt;/span&gt;       &lt;span class="m"&gt;1&lt;/span&gt;   theano.tensor.nnet.nnet.SoftmaxGrad
   &lt;span class="m"&gt;0&lt;/span&gt;.0%   &lt;span class="m"&gt;100&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.003s       &lt;span class="m"&gt;7&lt;/span&gt;.90e-06s     C      &lt;span class="m"&gt;400&lt;/span&gt;       &lt;span class="m"&gt;4&lt;/span&gt;   theano.tensor.elemwise.Sum
   &lt;span class="m"&gt;0&lt;/span&gt;.0%   &lt;span class="m"&gt;100&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.003s       &lt;span class="m"&gt;1&lt;/span&gt;.55e-05s     C      &lt;span class="m"&gt;200&lt;/span&gt;       &lt;span class="m"&gt;2&lt;/span&gt;   theano.tensor.subtensor.AdvancedSubtensor1
   &lt;span class="m"&gt;0&lt;/span&gt;.0%   &lt;span class="m"&gt;100&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.001s       &lt;span class="m"&gt;1&lt;/span&gt;.34e-05s     C      &lt;span class="m"&gt;100&lt;/span&gt;       &lt;span class="m"&gt;1&lt;/span&gt;   theano.compile.ops.DeepCopyOp
   ... &lt;span class="o"&gt;(&lt;/span&gt;remaining &lt;span class="m"&gt;5&lt;/span&gt; Classes account &lt;span class="k"&gt;for&lt;/span&gt;   &lt;span class="m"&gt;0&lt;/span&gt;.01%&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.00s&lt;span class="o"&gt;)&lt;/span&gt; of the runtime&lt;span class="o"&gt;)&lt;/span&gt;

Ops
---
&amp;lt;% time&amp;gt; &amp;lt;sum %&amp;gt; &amp;lt;apply time&amp;gt; &amp;lt;&lt;span class="nb"&gt;time&lt;/span&gt; per call&amp;gt; &amp;lt;type&amp;gt; &amp;lt;&lt;span class="c1"&gt;#call&amp;gt; &amp;lt;#apply&amp;gt; &amp;lt;Op name&amp;gt;&lt;/span&gt;
  &lt;span class="m"&gt;89&lt;/span&gt;.9%    &lt;span class="m"&gt;89&lt;/span&gt;.9%      &lt;span class="m"&gt;43&lt;/span&gt;.644s       &lt;span class="m"&gt;4&lt;/span&gt;.36e-01s     Py     &lt;span class="m"&gt;100&lt;/span&gt;        &lt;span class="m"&gt;1&lt;/span&gt;   forall_inplace,cpu,grad_of_scan_fn&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;grad_of_scan_fn&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;8&lt;/span&gt;.7%    &lt;span class="m"&gt;98&lt;/span&gt;.6%       &lt;span class="m"&gt;4&lt;/span&gt;.222s       &lt;span class="m"&gt;4&lt;/span&gt;.22e-02s     Py     &lt;span class="m"&gt;100&lt;/span&gt;        &lt;span class="m"&gt;1&lt;/span&gt;   forall_inplace,cpu,scan_fn&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.3%    &lt;span class="m"&gt;98&lt;/span&gt;.9%       &lt;span class="m"&gt;0&lt;/span&gt;.139s       &lt;span class="m"&gt;2&lt;/span&gt;.35e-05s     C     &lt;span class="m"&gt;5900&lt;/span&gt;       &lt;span class="m"&gt;59&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{((&lt;/span&gt;i0 * i1&lt;span class="o"&gt;)&lt;/span&gt; - &lt;span class="o"&gt;((&lt;/span&gt;i2 * i3&lt;span class="o"&gt;)&lt;/span&gt; / sqrt&lt;span class="o"&gt;((&lt;/span&gt;i2 + i4 + i5 + sqr&lt;span class="o"&gt;(&lt;/span&gt;i6&lt;span class="o"&gt;)))))}}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.2%    &lt;span class="m"&gt;99&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.078s       &lt;span class="m"&gt;7&lt;/span&gt;.83e-05s     C     &lt;span class="m"&gt;1000&lt;/span&gt;       &lt;span class="m"&gt;10&lt;/span&gt;   Dot22
   &lt;span class="m"&gt;0&lt;/span&gt;.1%    &lt;span class="m"&gt;99&lt;/span&gt;.2%       &lt;span class="m"&gt;0&lt;/span&gt;.055s       &lt;span class="m"&gt;7&lt;/span&gt;.25e-06s     C     &lt;span class="m"&gt;7600&lt;/span&gt;       &lt;span class="m"&gt;76&lt;/span&gt;   Alloc
   &lt;span class="m"&gt;0&lt;/span&gt;.1%    &lt;span class="m"&gt;99&lt;/span&gt;.3%       &lt;span class="m"&gt;0&lt;/span&gt;.053s       &lt;span class="m"&gt;6&lt;/span&gt;.62e-05s     C      &lt;span class="m"&gt;800&lt;/span&gt;        &lt;span class="m"&gt;8&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{((&lt;/span&gt;i0 * i1&lt;span class="o"&gt;)&lt;/span&gt; - &lt;span class="o"&gt;((&lt;/span&gt;i2 * i3&lt;span class="o"&gt;)&lt;/span&gt; / sqrt&lt;span class="o"&gt;((&lt;/span&gt;i2 + i4 + i5 + sqr&lt;span class="o"&gt;(&lt;/span&gt;i6&lt;span class="o"&gt;)))))}}&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.1%    &lt;span class="m"&gt;99&lt;/span&gt;.3%       &lt;span class="m"&gt;0&lt;/span&gt;.034s       &lt;span class="m"&gt;5&lt;/span&gt;.71e-06s     C     &lt;span class="m"&gt;6000&lt;/span&gt;       &lt;span class="m"&gt;60&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Clip&lt;span class="o"&gt;}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.1%    &lt;span class="m"&gt;99&lt;/span&gt;.4%       &lt;span class="m"&gt;0&lt;/span&gt;.031s       &lt;span class="m"&gt;2&lt;/span&gt;.74e-06s     C     &lt;span class="m"&gt;11300&lt;/span&gt;      &lt;span class="m"&gt;113&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Add&lt;span class="o"&gt;}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.1%    &lt;span class="m"&gt;99&lt;/span&gt;.4%       &lt;span class="m"&gt;0&lt;/span&gt;.026s       &lt;span class="m"&gt;4&lt;/span&gt;.34e-06s     C     &lt;span class="m"&gt;5900&lt;/span&gt;       &lt;span class="m"&gt;59&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{((&lt;/span&gt;i0 * i1&lt;span class="o"&gt;)&lt;/span&gt; + &lt;span class="o"&gt;(&lt;/span&gt;i2 * i3&lt;span class="o"&gt;))}}&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.5%       &lt;span class="m"&gt;0&lt;/span&gt;.022s       &lt;span class="m"&gt;3&lt;/span&gt;.07e-06s     C     &lt;span class="m"&gt;7000&lt;/span&gt;       &lt;span class="m"&gt;70&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{(&lt;/span&gt;i0 * sqr&lt;span class="o"&gt;(&lt;/span&gt;i1&lt;span class="o"&gt;))}}&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.5%       &lt;span class="m"&gt;0&lt;/span&gt;.021s       &lt;span class="m"&gt;2&lt;/span&gt;.95e-06s     C     &lt;span class="m"&gt;7000&lt;/span&gt;       &lt;span class="m"&gt;70&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Mul&lt;span class="o"&gt;}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.6%       &lt;span class="m"&gt;0&lt;/span&gt;.020s       &lt;span class="m"&gt;2&lt;/span&gt;.01e-04s     C      &lt;span class="m"&gt;100&lt;/span&gt;        &lt;span class="m"&gt;1&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;sqr,no_inplace&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.6%       &lt;span class="m"&gt;0&lt;/span&gt;.020s       &lt;span class="m"&gt;3&lt;/span&gt;.18e-06s     C     &lt;span class="m"&gt;6200&lt;/span&gt;       &lt;span class="m"&gt;62&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;add,no_inplace&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.7%       &lt;span class="m"&gt;0&lt;/span&gt;.017s       &lt;span class="m"&gt;5&lt;/span&gt;.74e-05s     C      &lt;span class="m"&gt;300&lt;/span&gt;        &lt;span class="m"&gt;3&lt;/span&gt;   Gemm&lt;span class="o"&gt;{&lt;/span&gt;inplace&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.7%       &lt;span class="m"&gt;0&lt;/span&gt;.013s       &lt;span class="m"&gt;6&lt;/span&gt;.44e-05s     C      &lt;span class="m"&gt;200&lt;/span&gt;        &lt;span class="m"&gt;2&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{((&lt;/span&gt;i0 * i1&lt;span class="o"&gt;)&lt;/span&gt; - &lt;span class="o"&gt;((&lt;/span&gt;i2 * i3&lt;span class="o"&gt;)&lt;/span&gt; / sqrt&lt;span class="o"&gt;((&lt;/span&gt;i2 + i4 + i5 + sqr&lt;span class="o"&gt;(&lt;/span&gt;i6&lt;span class="o"&gt;)))))}}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.7%       &lt;span class="m"&gt;0&lt;/span&gt;.012s       &lt;span class="m"&gt;8&lt;/span&gt;.85e-06s     C     &lt;span class="m"&gt;1300&lt;/span&gt;       &lt;span class="m"&gt;13&lt;/span&gt;   Join
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.7%       &lt;span class="m"&gt;0&lt;/span&gt;.009s       &lt;span class="m"&gt;3&lt;/span&gt;.45e-06s     C     &lt;span class="m"&gt;2700&lt;/span&gt;       &lt;span class="m"&gt;27&lt;/span&gt;   Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.7%       &lt;span class="m"&gt;0&lt;/span&gt;.009s       &lt;span class="m"&gt;8&lt;/span&gt;.57e-05s     C      &lt;span class="m"&gt;100&lt;/span&gt;        &lt;span class="m"&gt;1&lt;/span&gt;   IncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;Inc&lt;span class="p"&gt;;&lt;/span&gt;:int64:&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.8%       &lt;span class="m"&gt;0&lt;/span&gt;.008s       &lt;span class="m"&gt;4&lt;/span&gt;.09e-05s     Py     &lt;span class="m"&gt;200&lt;/span&gt;        &lt;span class="m"&gt;2&lt;/span&gt;   AdvancedSubtensor
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.8%       &lt;span class="m"&gt;0&lt;/span&gt;.008s       &lt;span class="m"&gt;7&lt;/span&gt;.36e-06s     C     &lt;span class="m"&gt;1100&lt;/span&gt;       &lt;span class="m"&gt;11&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;clip,no_inplace&lt;span class="o"&gt;}&lt;/span&gt;
   ... &lt;span class="o"&gt;(&lt;/span&gt;remaining &lt;span class="m"&gt;109&lt;/span&gt; Ops account &lt;span class="k"&gt;for&lt;/span&gt;   &lt;span class="m"&gt;0&lt;/span&gt;.23%&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.11s&lt;span class="o"&gt;)&lt;/span&gt; of the runtime&lt;span class="o"&gt;)&lt;/span&gt;

Apply
------
&amp;lt;% time&amp;gt; &amp;lt;sum %&amp;gt; &amp;lt;apply time&amp;gt; &amp;lt;&lt;span class="nb"&gt;time&lt;/span&gt; per call&amp;gt; &amp;lt;&lt;span class="c1"&gt;#call&amp;gt; &amp;lt;id&amp;gt; &amp;lt;Apply name&amp;gt;&lt;/span&gt;
  &lt;span class="m"&gt;89&lt;/span&gt;.9%    &lt;span class="m"&gt;89&lt;/span&gt;.9%      &lt;span class="m"&gt;43&lt;/span&gt;.644s       &lt;span class="m"&gt;4&lt;/span&gt;.36e-01s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;783&lt;/span&gt;   forall_inplace,cpu,grad_of_scan_fn&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;grad_of_scan_fn&lt;span class="o"&gt;}(&lt;/span&gt;Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{&lt;/span&gt;Switch&lt;span class="o"&gt;(&lt;/span&gt;EQ&lt;span class="o"&gt;(&lt;/span&gt;i0, i1&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;((&lt;/span&gt;i2 * i3&lt;span class="o"&gt;)&lt;/span&gt; // &lt;span class="o"&gt;(&lt;/span&gt;i4 * i0&lt;span class="o"&gt;))&lt;/span&gt;, i0&lt;span class="o"&gt;)}}&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;sqr,no_inplace&lt;span class="o"&gt;}&lt;/span&gt;.0, InplaceDimShuffle&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;,1,3,2&lt;span class="o"&gt;}&lt;/span&gt;.0, InplaceDimShuffle&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;,1,3,2&lt;span class="o"&gt;}&lt;/span&gt;.0, InplaceDimShuffle&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;,1,2&lt;span class="o"&gt;}&lt;/span&gt;.0, InplaceDimShuffle&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;,1,2,3,x&lt;span class="o"&gt;}&lt;/span&gt;.0, Subtensor&lt;span class="o"&gt;{&lt;/span&gt;int64:int64:int64&lt;span class="o"&gt;}&lt;/span&gt;.0, Subtensor&lt;span class="o"&gt;{&lt;/span&gt;int64:int64:int64&lt;span class="o"&gt;}&lt;/span&gt;.0, Subtensor&lt;span class="o"&gt;{&lt;/span&gt;int64:int64:int64&lt;span class="o"&gt;}&lt;/span&gt;.0, Subtensor&lt;span class="o"&gt;{&lt;/span&gt;int64:int64:int64&lt;span class="o"&gt;}&lt;/span&gt;.0, Subtensor&lt;span class="o"&gt;{&lt;/span&gt;int64:int64:int64&lt;span class="o"&gt;}&lt;/span&gt;.0, Subtensor&lt;span class="o"&gt;{&lt;/span&gt;int64:int6
   &lt;span class="m"&gt;8&lt;/span&gt;.7%    &lt;span class="m"&gt;98&lt;/span&gt;.6%       &lt;span class="m"&gt;4&lt;/span&gt;.222s       &lt;span class="m"&gt;4&lt;/span&gt;.22e-02s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;688&lt;/span&gt;   forall_inplace,cpu,scan_fn&lt;span class="o"&gt;}(&lt;/span&gt;Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{&lt;/span&gt;Switch&lt;span class="o"&gt;(&lt;/span&gt;EQ&lt;span class="o"&gt;(&lt;/span&gt;i0, i1&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;((&lt;/span&gt;i2 * i3&lt;span class="o"&gt;)&lt;/span&gt; // &lt;span class="o"&gt;(&lt;/span&gt;i4 * i0&lt;span class="o"&gt;))&lt;/span&gt;, i0&lt;span class="o"&gt;)}}&lt;/span&gt;.0, Subtensor&lt;span class="o"&gt;{&lt;/span&gt;int64:int64:int8&lt;span class="o"&gt;}&lt;/span&gt;.0, IncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;InplaceSet&lt;span class="p"&gt;;&lt;/span&gt;:int64:&lt;span class="o"&gt;}&lt;/span&gt;.0, IncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;InplaceSet&lt;span class="p"&gt;;&lt;/span&gt;:int64:&lt;span class="o"&gt;}&lt;/span&gt;.0, IncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;InplaceSet&lt;span class="p"&gt;;&lt;/span&gt;:int64:&lt;span class="o"&gt;}&lt;/span&gt;.0, IncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;InplaceSet&lt;span class="p"&gt;;&lt;/span&gt;:int64:&lt;span class="o"&gt;}&lt;/span&gt;.0, IncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;InplaceSet&lt;span class="p"&gt;;&lt;/span&gt;:int64:&lt;span class="o"&gt;}&lt;/span&gt;.0, controller.W_in_and_reads_to_o01, controller.W_hid_to_o01, controller.W_in_and_reads_to_i01, controller.W_hid_to_i01, controller.W_in_and_rea
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;98&lt;/span&gt;.6%       &lt;span class="m"&gt;0&lt;/span&gt;.020s       &lt;span class="m"&gt;2&lt;/span&gt;.01e-04s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;733&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;sqr,no_inplace&lt;span class="o"&gt;}(&lt;/span&gt;Subtensor&lt;span class="o"&gt;{&lt;/span&gt;int64:int64:int64&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;98&lt;/span&gt;.7%       &lt;span class="m"&gt;0&lt;/span&gt;.019s       &lt;span class="m"&gt;1&lt;/span&gt;.93e-04s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;776&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{((&lt;/span&gt;i0 * i1&lt;span class="o"&gt;)&lt;/span&gt; - &lt;span class="o"&gt;((&lt;/span&gt;i2 * i3&lt;span class="o"&gt;)&lt;/span&gt; / sqrt&lt;span class="o"&gt;((&lt;/span&gt;i2 + i4 + i5 + sqr&lt;span class="o"&gt;(&lt;/span&gt;i6&lt;span class="o"&gt;)))))}}(&lt;/span&gt;TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;0&lt;/span&gt;.9&lt;span class="o"&gt;}&lt;/span&gt;, &amp;lt;TensorType&lt;span class="o"&gt;(&lt;/span&gt;float32, matrix&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt;, TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;0&lt;/span&gt;.0001&lt;span class="o"&gt;}&lt;/span&gt;, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;clip,no_inplace&lt;span class="o"&gt;}&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Mul&lt;span class="o"&gt;}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{(&lt;/span&gt;i0 * sqr&lt;span class="o"&gt;(&lt;/span&gt;i1&lt;span class="o"&gt;))}}&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{((&lt;/span&gt;i0 * i1&lt;span class="o"&gt;)&lt;/span&gt; + &lt;span class="o"&gt;(&lt;/span&gt;i2 * i3&lt;span class="o"&gt;))}}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;98&lt;/span&gt;.7%       &lt;span class="m"&gt;0&lt;/span&gt;.016s       &lt;span class="m"&gt;1&lt;/span&gt;.58e-04s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;1234&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{((&lt;/span&gt;i0 * i1&lt;span class="o"&gt;)&lt;/span&gt; - &lt;span class="o"&gt;((&lt;/span&gt;i2 * i3&lt;span class="o"&gt;)&lt;/span&gt; / sqrt&lt;span class="o"&gt;((&lt;/span&gt;i2 + i4 + i5 + sqr&lt;span class="o"&gt;(&lt;/span&gt;i6&lt;span class="o"&gt;)))))}}(&lt;/span&gt;TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;0&lt;/span&gt;.9&lt;span class="o"&gt;}&lt;/span&gt;, &amp;lt;TensorType&lt;span class="o"&gt;(&lt;/span&gt;float32, matrix&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt;, TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;0&lt;/span&gt;.0001&lt;span class="o"&gt;}&lt;/span&gt;, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Clip&lt;span class="o"&gt;}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Mul&lt;span class="o"&gt;}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{(&lt;/span&gt;i0 * sqr&lt;span class="o"&gt;(&lt;/span&gt;i1&lt;span class="o"&gt;))}}&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{((&lt;/span&gt;i0 * i1&lt;span class="o"&gt;)&lt;/span&gt; + &lt;span class="o"&gt;(&lt;/span&gt;i2 * i3&lt;span class="o"&gt;))}}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;98&lt;/span&gt;.7%       &lt;span class="m"&gt;0&lt;/span&gt;.016s       &lt;span class="m"&gt;1&lt;/span&gt;.58e-04s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;1048&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{((&lt;/span&gt;i0 * i1&lt;span class="o"&gt;)&lt;/span&gt; - &lt;span class="o"&gt;((&lt;/span&gt;i2 * i3&lt;span class="o"&gt;)&lt;/span&gt; / sqrt&lt;span class="o"&gt;((&lt;/span&gt;i2 + i4 + i5 + sqr&lt;span class="o"&gt;(&lt;/span&gt;i6&lt;span class="o"&gt;)))))}}(&lt;/span&gt;TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;0&lt;/span&gt;.9&lt;span class="o"&gt;}&lt;/span&gt;, &amp;lt;TensorType&lt;span class="o"&gt;(&lt;/span&gt;float32, 3D&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt;, TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;0&lt;/span&gt;.0001&lt;span class="o"&gt;}&lt;/span&gt;, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Clip&lt;span class="o"&gt;}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Mul&lt;span class="o"&gt;}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{(&lt;/span&gt;i0 * sqr&lt;span class="o"&gt;(&lt;/span&gt;i1&lt;span class="o"&gt;))}}&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{((&lt;/span&gt;i0 * i1&lt;span class="o"&gt;)&lt;/span&gt; + &lt;span class="o"&gt;(&lt;/span&gt;i2 * i3&lt;span class="o"&gt;))}}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;98&lt;/span&gt;.8%       &lt;span class="m"&gt;0&lt;/span&gt;.013s       &lt;span class="m"&gt;1&lt;/span&gt;.28e-04s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;1069&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{((&lt;/span&gt;i0 * i1&lt;span class="o"&gt;)&lt;/span&gt; - &lt;span class="o"&gt;((&lt;/span&gt;i2 * i3&lt;span class="o"&gt;)&lt;/span&gt; / sqrt&lt;span class="o"&gt;((&lt;/span&gt;i2 + i4 + i5 + sqr&lt;span class="o"&gt;(&lt;/span&gt;i6&lt;span class="o"&gt;)))))}}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)](&lt;/span&gt;TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;0&lt;/span&gt;.9&lt;span class="o"&gt;}&lt;/span&gt;, &amp;lt;TensorType&lt;span class="o"&gt;(&lt;/span&gt;float32, 3D&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt;, TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;0&lt;/span&gt;.0001&lt;span class="o"&gt;}&lt;/span&gt;, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Clip&lt;span class="o"&gt;}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Mul&lt;span class="o"&gt;}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{(&lt;/span&gt;i0 * sqr&lt;span class="o"&gt;(&lt;/span&gt;i1&lt;span class="o"&gt;))}}&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{((&lt;/span&gt;i0 * i1&lt;span class="o"&gt;)&lt;/span&gt; + &lt;span class="o"&gt;(&lt;/span&gt;i2 * i3&lt;span class="o"&gt;))}}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;98&lt;/span&gt;.8%       &lt;span class="m"&gt;0&lt;/span&gt;.013s       &lt;span class="m"&gt;1&lt;/span&gt;.27e-04s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;1059&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{((&lt;/span&gt;i0 * i1&lt;span class="o"&gt;)&lt;/span&gt; - &lt;span class="o"&gt;((&lt;/span&gt;i2 * i3&lt;span class="o"&gt;)&lt;/span&gt; / sqrt&lt;span class="o"&gt;((&lt;/span&gt;i2 + i4 + i5 + sqr&lt;span class="o"&gt;(&lt;/span&gt;i6&lt;span class="o"&gt;)))))}}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)](&lt;/span&gt;TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;0&lt;/span&gt;.9&lt;span class="o"&gt;}&lt;/span&gt;, &amp;lt;TensorType&lt;span class="o"&gt;(&lt;/span&gt;float32, 3D&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt;, TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;0&lt;/span&gt;.0001&lt;span class="o"&gt;}&lt;/span&gt;, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Clip&lt;span class="o"&gt;}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Mul&lt;span class="o"&gt;}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{(&lt;/span&gt;i0 * sqr&lt;span class="o"&gt;(&lt;/span&gt;i1&lt;span class="o"&gt;))}}&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{((&lt;/span&gt;i0 * i1&lt;span class="o"&gt;)&lt;/span&gt; + &lt;span class="o"&gt;(&lt;/span&gt;i2 * i3&lt;span class="o"&gt;))}}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;98&lt;/span&gt;.8%       &lt;span class="m"&gt;0&lt;/span&gt;.013s       &lt;span class="m"&gt;1&lt;/span&gt;.27e-04s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;1079&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{((&lt;/span&gt;i0 * i1&lt;span class="o"&gt;)&lt;/span&gt; - &lt;span class="o"&gt;((&lt;/span&gt;i2 * i3&lt;span class="o"&gt;)&lt;/span&gt; / sqrt&lt;span class="o"&gt;((&lt;/span&gt;i2 + i4 + i5 + sqr&lt;span class="o"&gt;(&lt;/span&gt;i6&lt;span class="o"&gt;)))))}}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)](&lt;/span&gt;TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;0&lt;/span&gt;.9&lt;span class="o"&gt;}&lt;/span&gt;, &amp;lt;TensorType&lt;span class="o"&gt;(&lt;/span&gt;float32, 3D&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt;, TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;0&lt;/span&gt;.0001&lt;span class="o"&gt;}&lt;/span&gt;, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Clip&lt;span class="o"&gt;}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Mul&lt;span class="o"&gt;}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{(&lt;/span&gt;i0 * sqr&lt;span class="o"&gt;(&lt;/span&gt;i1&lt;span class="o"&gt;))}}&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{((&lt;/span&gt;i0 * i1&lt;span class="o"&gt;)&lt;/span&gt; + &lt;span class="o"&gt;(&lt;/span&gt;i2 * i3&lt;span class="o"&gt;))}}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;98&lt;/span&gt;.8%       &lt;span class="m"&gt;0&lt;/span&gt;.013s       &lt;span class="m"&gt;1&lt;/span&gt;.27e-04s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;1240&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{((&lt;/span&gt;i0 * i1&lt;span class="o"&gt;)&lt;/span&gt; - &lt;span class="o"&gt;((&lt;/span&gt;i2 * i3&lt;span class="o"&gt;)&lt;/span&gt; / sqrt&lt;span class="o"&gt;((&lt;/span&gt;i2 + i4 + i5 + sqr&lt;span class="o"&gt;(&lt;/span&gt;i6&lt;span class="o"&gt;)))))}}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)](&lt;/span&gt;TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;0&lt;/span&gt;.9&lt;span class="o"&gt;}&lt;/span&gt;, &amp;lt;TensorType&lt;span class="o"&gt;(&lt;/span&gt;float32, matrix&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt;, TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;0&lt;/span&gt;.0001&lt;span class="o"&gt;}&lt;/span&gt;, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Clip&lt;span class="o"&gt;}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Mul&lt;span class="o"&gt;}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{(&lt;/span&gt;i0 * sqr&lt;span class="o"&gt;(&lt;/span&gt;i1&lt;span class="o"&gt;))}}&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{((&lt;/span&gt;i0 * i1&lt;span class="o"&gt;)&lt;/span&gt; + &lt;span class="o"&gt;(&lt;/span&gt;i2 * i3&lt;span class="o"&gt;))}}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;98&lt;/span&gt;.9%       &lt;span class="m"&gt;0&lt;/span&gt;.013s       &lt;span class="m"&gt;1&lt;/span&gt;.26e-04s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;1093&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{((&lt;/span&gt;i0 * i1&lt;span class="o"&gt;)&lt;/span&gt; - &lt;span class="o"&gt;((&lt;/span&gt;i2 * i3&lt;span class="o"&gt;)&lt;/span&gt; / sqrt&lt;span class="o"&gt;((&lt;/span&gt;i2 + i4 + i5 + sqr&lt;span class="o"&gt;(&lt;/span&gt;i6&lt;span class="o"&gt;)))))}}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)](&lt;/span&gt;TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;0&lt;/span&gt;.9&lt;span class="o"&gt;}&lt;/span&gt;, &amp;lt;TensorType&lt;span class="o"&gt;(&lt;/span&gt;float32, 3D&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt;, TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;0&lt;/span&gt;.0001&lt;span class="o"&gt;}&lt;/span&gt;, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Clip&lt;span class="o"&gt;}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Mul&lt;span class="o"&gt;}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{(&lt;/span&gt;i0 * sqr&lt;span class="o"&gt;(&lt;/span&gt;i1&lt;span class="o"&gt;))}}&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{((&lt;/span&gt;i0 * i1&lt;span class="o"&gt;)&lt;/span&gt; + &lt;span class="o"&gt;(&lt;/span&gt;i2 * i3&lt;span class="o"&gt;))}}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;98&lt;/span&gt;.9%       &lt;span class="m"&gt;0&lt;/span&gt;.013s       &lt;span class="m"&gt;1&lt;/span&gt;.26e-04s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;1241&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{((&lt;/span&gt;i0 * i1&lt;span class="o"&gt;)&lt;/span&gt; - &lt;span class="o"&gt;((&lt;/span&gt;i2 * i3&lt;span class="o"&gt;)&lt;/span&gt; / sqrt&lt;span class="o"&gt;((&lt;/span&gt;i2 + i4 + i5 + sqr&lt;span class="o"&gt;(&lt;/span&gt;i6&lt;span class="o"&gt;)))))}}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)](&lt;/span&gt;TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;0&lt;/span&gt;.9&lt;span class="o"&gt;}&lt;/span&gt;, &amp;lt;TensorType&lt;span class="o"&gt;(&lt;/span&gt;float32, matrix&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt;, TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;0&lt;/span&gt;.0001&lt;span class="o"&gt;}&lt;/span&gt;, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Clip&lt;span class="o"&gt;}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Mul&lt;span class="o"&gt;}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{(&lt;/span&gt;i0 * sqr&lt;span class="o"&gt;(&lt;/span&gt;i1&lt;span class="o"&gt;))}}&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{((&lt;/span&gt;i0 * i1&lt;span class="o"&gt;)&lt;/span&gt; + &lt;span class="o"&gt;(&lt;/span&gt;i2 * i3&lt;span class="o"&gt;))}}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;98&lt;/span&gt;.9%       &lt;span class="m"&gt;0&lt;/span&gt;.013s       &lt;span class="m"&gt;1&lt;/span&gt;.26e-04s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;1242&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{((&lt;/span&gt;i0 * i1&lt;span class="o"&gt;)&lt;/span&gt; - &lt;span class="o"&gt;((&lt;/span&gt;i2 * i3&lt;span class="o"&gt;)&lt;/span&gt; / sqrt&lt;span class="o"&gt;((&lt;/span&gt;i2 + i4 + i5 + sqr&lt;span class="o"&gt;(&lt;/span&gt;i6&lt;span class="o"&gt;)))))}}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)](&lt;/span&gt;TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;0&lt;/span&gt;.9&lt;span class="o"&gt;}&lt;/span&gt;, &amp;lt;TensorType&lt;span class="o"&gt;(&lt;/span&gt;float32, matrix&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt;, TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;0&lt;/span&gt;.0001&lt;span class="o"&gt;}&lt;/span&gt;, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Clip&lt;span class="o"&gt;}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Mul&lt;span class="o"&gt;}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{(&lt;/span&gt;i0 * sqr&lt;span class="o"&gt;(&lt;/span&gt;i1&lt;span class="o"&gt;))}}&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{((&lt;/span&gt;i0 * i1&lt;span class="o"&gt;)&lt;/span&gt; + &lt;span class="o"&gt;(&lt;/span&gt;i2 * i3&lt;span class="o"&gt;))}}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;98&lt;/span&gt;.9%       &lt;span class="m"&gt;0&lt;/span&gt;.012s       &lt;span class="m"&gt;1&lt;/span&gt;.21e-04s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;907&lt;/span&gt;   Dot22&lt;span class="o"&gt;(&lt;/span&gt;Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.011s       &lt;span class="m"&gt;1&lt;/span&gt;.12e-04s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;716&lt;/span&gt;   Dot22&lt;span class="o"&gt;(&lt;/span&gt;Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, output_modality_net.W&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.011s       &lt;span class="m"&gt;1&lt;/span&gt;.11e-04s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;487&lt;/span&gt;   Alloc&lt;span class="o"&gt;(&lt;/span&gt;TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0&lt;span class="o"&gt;}&lt;/span&gt;, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;add,no_inplace&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{&lt;/span&gt;Switch&lt;span class="o"&gt;(&lt;/span&gt;EQ&lt;span class="o"&gt;(&lt;/span&gt;i0, i1&lt;span class="o"&gt;)&lt;/span&gt;, i2, i0&lt;span class="o"&gt;)}}&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{&lt;/span&gt;Switch&lt;span class="o"&gt;(&lt;/span&gt;EQ&lt;span class="o"&gt;(&lt;/span&gt;i0, i1&lt;span class="o"&gt;)&lt;/span&gt;, i2, i0&lt;span class="o"&gt;)}}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.011s       &lt;span class="m"&gt;1&lt;/span&gt;.10e-04s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;491&lt;/span&gt;   Alloc&lt;span class="o"&gt;(&lt;/span&gt;TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0&lt;span class="o"&gt;}&lt;/span&gt;, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;add,no_inplace&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{&lt;/span&gt;Switch&lt;span class="o"&gt;(&lt;/span&gt;EQ&lt;span class="o"&gt;(&lt;/span&gt;i0, i1&lt;span class="o"&gt;)&lt;/span&gt;, i2, i0&lt;span class="o"&gt;)}}&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{&lt;/span&gt;Switch&lt;span class="o"&gt;(&lt;/span&gt;EQ&lt;span class="o"&gt;(&lt;/span&gt;i0, i1&lt;span class="o"&gt;)&lt;/span&gt;, i2, i0&lt;span class="o"&gt;)}}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.011s       &lt;span class="m"&gt;1&lt;/span&gt;.10e-04s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;912&lt;/span&gt;   Dot22&lt;span class="o"&gt;(&lt;/span&gt;Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.1%       &lt;span class="m"&gt;0&lt;/span&gt;.010s       &lt;span class="m"&gt;9&lt;/span&gt;.90e-05s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;1269&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{((&lt;/span&gt;i0 * i1&lt;span class="o"&gt;)&lt;/span&gt; - &lt;span class="o"&gt;((&lt;/span&gt;i2 * i3&lt;span class="o"&gt;)&lt;/span&gt; / sqrt&lt;span class="o"&gt;((&lt;/span&gt;i2 + i4 + i5 + sqr&lt;span class="o"&gt;(&lt;/span&gt;i6&lt;span class="o"&gt;)))))}}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)](&lt;/span&gt;TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;0&lt;/span&gt;.9&lt;span class="o"&gt;}&lt;/span&gt;, &amp;lt;TensorType&lt;span class="o"&gt;(&lt;/span&gt;float32, matrix&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt;, TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;0&lt;/span&gt;.0001&lt;span class="o"&gt;}&lt;/span&gt;, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Clip&lt;span class="o"&gt;}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Mul&lt;span class="o"&gt;}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{(&lt;/span&gt;i0 * sqr&lt;span class="o"&gt;(&lt;/span&gt;i1&lt;span class="o"&gt;))}}&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{((&lt;/span&gt;i0 * i1&lt;span class="o"&gt;)&lt;/span&gt; + &lt;span class="o"&gt;(&lt;/span&gt;i2 * i3&lt;span class="o"&gt;))}}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.0%    &lt;span class="m"&gt;99&lt;/span&gt;.1%       &lt;span class="m"&gt;0&lt;/span&gt;.010s       &lt;span class="m"&gt;9&lt;/span&gt;.89e-05s    &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;1270&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{((&lt;/span&gt;i0 * i1&lt;span class="o"&gt;)&lt;/span&gt; - &lt;span class="o"&gt;((&lt;/span&gt;i2 * i3&lt;span class="o"&gt;)&lt;/span&gt; / sqrt&lt;span class="o"&gt;((&lt;/span&gt;i2 + i4 + i5 + sqr&lt;span class="o"&gt;(&lt;/span&gt;i6&lt;span class="o"&gt;)))))}}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)](&lt;/span&gt;TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;0&lt;/span&gt;.9&lt;span class="o"&gt;}&lt;/span&gt;, &amp;lt;TensorType&lt;span class="o"&gt;(&lt;/span&gt;float32, matrix&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt;, TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;0&lt;/span&gt;.0001&lt;span class="o"&gt;}&lt;/span&gt;, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Clip&lt;span class="o"&gt;}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Mul&lt;span class="o"&gt;}[(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{(&lt;/span&gt;i0 * sqr&lt;span class="o"&gt;(&lt;/span&gt;i1&lt;span class="o"&gt;))}}&lt;/span&gt;.0, Elemwise&lt;span class="o"&gt;{&lt;/span&gt;Composite&lt;span class="o"&gt;{((&lt;/span&gt;i0 * i1&lt;span class="o"&gt;)&lt;/span&gt; + &lt;span class="o"&gt;(&lt;/span&gt;i2 * i3&lt;span class="o"&gt;))}}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   ... &lt;span class="o"&gt;(&lt;/span&gt;remaining &lt;span class="m"&gt;1268&lt;/span&gt; Apply instances account &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.92%&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.45s&lt;span class="o"&gt;)&lt;/span&gt; of the runtime&lt;span class="o"&gt;)&lt;/span&gt;

Here are tips to potentially make your code run faster
                 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; you think of new ones, suggest them on the mailing list&lt;span class="o"&gt;)&lt;/span&gt;.
                 Test them first, as they are not guaranteed to always provide a speedup.
  Sorry, no tip &lt;span class="k"&gt;for&lt;/span&gt; today.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;また、grad_of_scan_fn は以下の通り。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Scan Op profiling &lt;span class="o"&gt;(&lt;/span&gt; grad_of_scan_fn&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;grad_of_scan_fn &lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;==================&lt;/span&gt;
  Message: None
  Time in &lt;span class="m"&gt;100&lt;/span&gt; calls of the op &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; a total of &lt;span class="m"&gt;8700&lt;/span&gt; steps&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;.326865e+01s

  Total &lt;span class="nb"&gt;time&lt;/span&gt; spent in calling the VM &lt;span class="m"&gt;4&lt;/span&gt;.045974e+01s &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;93&lt;/span&gt;.508%&lt;span class="o"&gt;)&lt;/span&gt;
  Total overhead &lt;span class="o"&gt;(&lt;/span&gt;computing slices..&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;.808916e+00s &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.492%&lt;span class="o"&gt;)&lt;/span&gt;

Class
---
&amp;lt;% time&amp;gt; &amp;lt;sum %&amp;gt; &amp;lt;apply time&amp;gt; &amp;lt;&lt;span class="nb"&gt;time&lt;/span&gt; per call&amp;gt; &amp;lt;type&amp;gt; &amp;lt;&lt;span class="c1"&gt;#call&amp;gt; &amp;lt;#apply&amp;gt; &amp;lt;Class name&amp;gt;&lt;/span&gt;
  &lt;span class="m"&gt;25&lt;/span&gt;.5%    &lt;span class="m"&gt;25&lt;/span&gt;.5%       &lt;span class="m"&gt;9&lt;/span&gt;.022s       &lt;span class="m"&gt;2&lt;/span&gt;.65e-06s     C   &lt;span class="m"&gt;3401700&lt;/span&gt;     &lt;span class="m"&gt;391&lt;/span&gt;   theano.tensor.elemwise.Elemwise
  &lt;span class="m"&gt;16&lt;/span&gt;.3%    &lt;span class="m"&gt;41&lt;/span&gt;.7%       &lt;span class="m"&gt;5&lt;/span&gt;.757s       &lt;span class="m"&gt;4&lt;/span&gt;.14e-05s     Py  &lt;span class="m"&gt;139200&lt;/span&gt;      &lt;span class="m"&gt;16&lt;/span&gt;   theano.tensor.basic.Split
   &lt;span class="m"&gt;8&lt;/span&gt;.4%    &lt;span class="m"&gt;50&lt;/span&gt;.1%       &lt;span class="m"&gt;2&lt;/span&gt;.958s       &lt;span class="m"&gt;6&lt;/span&gt;.80e-06s     C   &lt;span class="m"&gt;435000&lt;/span&gt;      &lt;span class="m"&gt;50&lt;/span&gt;   theano.tensor.blas.Dot22
   &lt;span class="m"&gt;7&lt;/span&gt;.4%    &lt;span class="m"&gt;57&lt;/span&gt;.5%       &lt;span class="m"&gt;2&lt;/span&gt;.615s       &lt;span class="m"&gt;7&lt;/span&gt;.52e-05s     C    &lt;span class="m"&gt;34800&lt;/span&gt;       &lt;span class="m"&gt;4&lt;/span&gt;   theano.tensor.nnet.corr.CorrMM_gradInputs
   &lt;span class="m"&gt;5&lt;/span&gt;.7%    &lt;span class="m"&gt;63&lt;/span&gt;.1%       &lt;span class="m"&gt;2&lt;/span&gt;.007s       &lt;span class="m"&gt;5&lt;/span&gt;.77e-05s     C    &lt;span class="m"&gt;34800&lt;/span&gt;       &lt;span class="m"&gt;4&lt;/span&gt;   theano.tensor.nnet.corr.CorrMM_gradWeights
   &lt;span class="m"&gt;4&lt;/span&gt;.0%    &lt;span class="m"&gt;67&lt;/span&gt;.1%       &lt;span class="m"&gt;1&lt;/span&gt;.401s       &lt;span class="m"&gt;2&lt;/span&gt;.52e-06s     C   &lt;span class="m"&gt;556800&lt;/span&gt;      &lt;span class="m"&gt;64&lt;/span&gt;   theano.tensor.elemwise.Sum
   &lt;span class="m"&gt;3&lt;/span&gt;.7%    &lt;span class="m"&gt;70&lt;/span&gt;.8%       &lt;span class="m"&gt;1&lt;/span&gt;.312s       &lt;span class="m"&gt;3&lt;/span&gt;.77e-05s     Py   &lt;span class="m"&gt;34800&lt;/span&gt;       &lt;span class="m"&gt;4&lt;/span&gt;   theano.tensor.subtensor.AdvancedIncSubtensor
   &lt;span class="m"&gt;3&lt;/span&gt;.6%    &lt;span class="m"&gt;74&lt;/span&gt;.4%       &lt;span class="m"&gt;1&lt;/span&gt;.264s       &lt;span class="m"&gt;1&lt;/span&gt;.13e-06s     C   &lt;span class="m"&gt;1113600&lt;/span&gt;     &lt;span class="m"&gt;128&lt;/span&gt;   theano.tensor.elemwise.DimShuffle
   &lt;span class="m"&gt;3&lt;/span&gt;.5%    &lt;span class="m"&gt;77&lt;/span&gt;.9%       &lt;span class="m"&gt;1&lt;/span&gt;.235s       &lt;span class="m"&gt;1&lt;/span&gt;.26e-06s     C   &lt;span class="m"&gt;983100&lt;/span&gt;     &lt;span class="m"&gt;113&lt;/span&gt;   theano.tensor.basic.Reshape
   &lt;span class="m"&gt;2&lt;/span&gt;.8%    &lt;span class="m"&gt;80&lt;/span&gt;.6%       &lt;span class="m"&gt;0&lt;/span&gt;.984s       &lt;span class="m"&gt;5&lt;/span&gt;.65e-05s     C    &lt;span class="m"&gt;17400&lt;/span&gt;       &lt;span class="m"&gt;2&lt;/span&gt;   theano.tensor.nnet.corr.CorrMM
   &lt;span class="m"&gt;2&lt;/span&gt;.3%    &lt;span class="m"&gt;82&lt;/span&gt;.9%       &lt;span class="m"&gt;0&lt;/span&gt;.820s       &lt;span class="m"&gt;6&lt;/span&gt;.28e-06s     C   &lt;span class="m"&gt;130500&lt;/span&gt;      &lt;span class="m"&gt;15&lt;/span&gt;   theano.tensor.blas.BatchedDot
   &lt;span class="m"&gt;1&lt;/span&gt;.8%    &lt;span class="m"&gt;84&lt;/span&gt;.8%       &lt;span class="m"&gt;0&lt;/span&gt;.650s       &lt;span class="m"&gt;9&lt;/span&gt;.33e-06s     C    &lt;span class="m"&gt;69600&lt;/span&gt;       &lt;span class="m"&gt;8&lt;/span&gt;   theano.tensor.blas.Dot22Scalar
   &lt;span class="m"&gt;1&lt;/span&gt;.8%    &lt;span class="m"&gt;86&lt;/span&gt;.6%       &lt;span class="m"&gt;0&lt;/span&gt;.644s       &lt;span class="m"&gt;1&lt;/span&gt;.06e-06s     C   &lt;span class="m"&gt;609000&lt;/span&gt;      &lt;span class="m"&gt;70&lt;/span&gt;   theano.tensor.subtensor.Subtensor
   &lt;span class="m"&gt;1&lt;/span&gt;.7%    &lt;span class="m"&gt;88&lt;/span&gt;.4%       &lt;span class="m"&gt;0&lt;/span&gt;.620s       &lt;span class="m"&gt;3&lt;/span&gt;.56e-05s     Py   &lt;span class="m"&gt;17400&lt;/span&gt;       &lt;span class="m"&gt;2&lt;/span&gt;   theano.tensor.subtensor.AdvancedSubtensor
   &lt;span class="m"&gt;1&lt;/span&gt;.7%    &lt;span class="m"&gt;90&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.600s       &lt;span class="m"&gt;8&lt;/span&gt;.63e-06s     C    &lt;span class="m"&gt;69600&lt;/span&gt;       &lt;span class="m"&gt;8&lt;/span&gt;   theano.tensor.blas_c.CGemv
   &lt;span class="m"&gt;1&lt;/span&gt;.5%    &lt;span class="m"&gt;91&lt;/span&gt;.5%       &lt;span class="m"&gt;0&lt;/span&gt;.531s       &lt;span class="m"&gt;1&lt;/span&gt;.02e-05s     C    &lt;span class="m"&gt;52200&lt;/span&gt;       &lt;span class="m"&gt;6&lt;/span&gt;   theano.tensor.blas.Gemm
   &lt;span class="m"&gt;1&lt;/span&gt;.3%    &lt;span class="m"&gt;92&lt;/span&gt;.9%       &lt;span class="m"&gt;0&lt;/span&gt;.477s       &lt;span class="m"&gt;3&lt;/span&gt;.66e-06s     C   &lt;span class="m"&gt;130500&lt;/span&gt;      &lt;span class="m"&gt;15&lt;/span&gt;   theano.tensor.basic.Join
   &lt;span class="m"&gt;1&lt;/span&gt;.3%    &lt;span class="m"&gt;94&lt;/span&gt;.2%       &lt;span class="m"&gt;0&lt;/span&gt;.464s       &lt;span class="m"&gt;1&lt;/span&gt;.33e-05s     C    &lt;span class="m"&gt;34800&lt;/span&gt;       &lt;span class="m"&gt;4&lt;/span&gt;   theano.tensor.subtensor.IncSubtensor
   &lt;span class="m"&gt;1&lt;/span&gt;.1%    &lt;span class="m"&gt;95&lt;/span&gt;.3%       &lt;span class="m"&gt;0&lt;/span&gt;.383s       &lt;span class="m"&gt;2&lt;/span&gt;.20e-05s     Py   &lt;span class="m"&gt;17400&lt;/span&gt;       &lt;span class="m"&gt;2&lt;/span&gt;   theano.tensor.basic.ARange
   &lt;span class="m"&gt;1&lt;/span&gt;.0%    &lt;span class="m"&gt;96&lt;/span&gt;.2%       &lt;span class="m"&gt;0&lt;/span&gt;.342s       &lt;span class="m"&gt;9&lt;/span&gt;.36e-07s     C   &lt;span class="m"&gt;365400&lt;/span&gt;      &lt;span class="m"&gt;42&lt;/span&gt;   theano.compile.ops.Shape_i
   ... &lt;span class="o"&gt;(&lt;/span&gt;remaining &lt;span class="m"&gt;10&lt;/span&gt; Classes account &lt;span class="k"&gt;for&lt;/span&gt;   &lt;span class="m"&gt;3&lt;/span&gt;.75%&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.33s&lt;span class="o"&gt;)&lt;/span&gt; of the runtime&lt;span class="o"&gt;)&lt;/span&gt;

Ops
---
&amp;lt;% time&amp;gt; &amp;lt;sum %&amp;gt; &amp;lt;apply time&amp;gt; &amp;lt;&lt;span class="nb"&gt;time&lt;/span&gt; per call&amp;gt; &amp;lt;type&amp;gt; &amp;lt;&lt;span class="c1"&gt;#call&amp;gt; &amp;lt;#apply&amp;gt; &amp;lt;Op name&amp;gt;&lt;/span&gt;
   &lt;span class="m"&gt;9&lt;/span&gt;.6%     &lt;span class="m"&gt;9&lt;/span&gt;.6%       &lt;span class="m"&gt;3&lt;/span&gt;.413s       &lt;span class="m"&gt;3&lt;/span&gt;.92e-05s     Py    &lt;span class="m"&gt;87000&lt;/span&gt;       &lt;span class="m"&gt;10&lt;/span&gt;   Split&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;8&lt;/span&gt;.4%    &lt;span class="m"&gt;18&lt;/span&gt;.0%       &lt;span class="m"&gt;2&lt;/span&gt;.958s       &lt;span class="m"&gt;6&lt;/span&gt;.80e-06s     C     &lt;span class="m"&gt;435000&lt;/span&gt;       &lt;span class="m"&gt;50&lt;/span&gt;   Dot22
   &lt;span class="m"&gt;7&lt;/span&gt;.4%    &lt;span class="m"&gt;25&lt;/span&gt;.4%       &lt;span class="m"&gt;2&lt;/span&gt;.615s       &lt;span class="m"&gt;7&lt;/span&gt;.52e-05s     C     &lt;span class="m"&gt;34800&lt;/span&gt;        &lt;span class="m"&gt;4&lt;/span&gt;   CorrMM_gradInputs&lt;span class="o"&gt;{&lt;/span&gt;valid, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)}&lt;/span&gt;
   &lt;span class="m"&gt;6&lt;/span&gt;.6%    &lt;span class="m"&gt;32&lt;/span&gt;.0%       &lt;span class="m"&gt;2&lt;/span&gt;.344s       &lt;span class="m"&gt;4&lt;/span&gt;.49e-05s     Py    &lt;span class="m"&gt;52200&lt;/span&gt;        &lt;span class="m"&gt;6&lt;/span&gt;   Split&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;5&lt;/span&gt;.8%    &lt;span class="m"&gt;37&lt;/span&gt;.7%       &lt;span class="m"&gt;2&lt;/span&gt;.038s       &lt;span class="m"&gt;2&lt;/span&gt;.82e-06s     C     &lt;span class="m"&gt;722100&lt;/span&gt;       &lt;span class="m"&gt;83&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;mul,no_inplace&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;5&lt;/span&gt;.7%    &lt;span class="m"&gt;43&lt;/span&gt;.4%       &lt;span class="m"&gt;2&lt;/span&gt;.007s       &lt;span class="m"&gt;5&lt;/span&gt;.77e-05s     C     &lt;span class="m"&gt;34800&lt;/span&gt;        &lt;span class="m"&gt;4&lt;/span&gt;   CorrMM_gradWeights&lt;span class="o"&gt;{&lt;/span&gt;valid, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)}&lt;/span&gt;
   &lt;span class="m"&gt;4&lt;/span&gt;.9%    &lt;span class="m"&gt;48&lt;/span&gt;.3%       &lt;span class="m"&gt;1&lt;/span&gt;.736s       &lt;span class="m"&gt;2&lt;/span&gt;.43e-06s     C     &lt;span class="m"&gt;713400&lt;/span&gt;       &lt;span class="m"&gt;82&lt;/span&gt;   Elemwise&lt;span class="o"&gt;{&lt;/span&gt;add,no_inplace&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;3&lt;/span&gt;.7%    &lt;span class="m"&gt;52&lt;/span&gt;.0%       &lt;span class="m"&gt;1&lt;/span&gt;.312s       &lt;span class="m"&gt;3&lt;/span&gt;.77e-05s     Py    &lt;span class="m"&gt;34800&lt;/span&gt;        &lt;span class="m"&gt;4&lt;/span&gt;   AdvancedIncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False,  &lt;span class="nv"&gt;set_instead_of_inc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;2&lt;/span&gt;.8%    &lt;span class="m"&gt;54&lt;/span&gt;.8%       &lt;span class="m"&gt;0&lt;/span&gt;.984s       &lt;span class="m"&gt;5&lt;/span&gt;.65e-05s     C     &lt;span class="m"&gt;17400&lt;/span&gt;        &lt;span class="m"&gt;2&lt;/span&gt;   CorrMM&lt;span class="o"&gt;{&lt;/span&gt;valid, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)}&lt;/span&gt;
   &lt;span class="m"&gt;2&lt;/span&gt;.3%    &lt;span class="m"&gt;57&lt;/span&gt;.1%       &lt;span class="m"&gt;0&lt;/span&gt;.820s       &lt;span class="m"&gt;6&lt;/span&gt;.28e-06s     C     &lt;span class="m"&gt;130500&lt;/span&gt;       &lt;span class="m"&gt;15&lt;/span&gt;   BatchedDot
   &lt;span class="m"&gt;2&lt;/span&gt;.1%    &lt;span class="m"&gt;59&lt;/span&gt;.2%       &lt;span class="m"&gt;0&lt;/span&gt;.726s       &lt;span class="m"&gt;1&lt;/span&gt;.18e-06s     C     &lt;span class="m"&gt;617700&lt;/span&gt;       &lt;span class="m"&gt;71&lt;/span&gt;   Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.8%    &lt;span class="m"&gt;61&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.650s       &lt;span class="m"&gt;9&lt;/span&gt;.33e-06s     C     &lt;span class="m"&gt;69600&lt;/span&gt;        &lt;span class="m"&gt;8&lt;/span&gt;   Dot22Scalar
   &lt;span class="m"&gt;1&lt;/span&gt;.8%    &lt;span class="m"&gt;62&lt;/span&gt;.8%       &lt;span class="m"&gt;0&lt;/span&gt;.644s       &lt;span class="m"&gt;2&lt;/span&gt;.24e-06s     C     &lt;span class="m"&gt;287100&lt;/span&gt;       &lt;span class="m"&gt;33&lt;/span&gt;   Sum&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;acc_dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;float64&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.7%    &lt;span class="m"&gt;64&lt;/span&gt;.6%       &lt;span class="m"&gt;0&lt;/span&gt;.620s       &lt;span class="m"&gt;3&lt;/span&gt;.56e-05s     Py    &lt;span class="m"&gt;17400&lt;/span&gt;        &lt;span class="m"&gt;2&lt;/span&gt;   AdvancedSubtensor
   &lt;span class="m"&gt;1&lt;/span&gt;.5%    &lt;span class="m"&gt;66&lt;/span&gt;.1%       &lt;span class="m"&gt;0&lt;/span&gt;.531s       &lt;span class="m"&gt;1&lt;/span&gt;.02e-05s     C     &lt;span class="m"&gt;52200&lt;/span&gt;        &lt;span class="m"&gt;6&lt;/span&gt;   Gemm&lt;span class="o"&gt;{&lt;/span&gt;inplace&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.5%    &lt;span class="m"&gt;67&lt;/span&gt;.5%       &lt;span class="m"&gt;0&lt;/span&gt;.516s       &lt;span class="m"&gt;9&lt;/span&gt;.56e-07s     C     &lt;span class="m"&gt;539400&lt;/span&gt;       &lt;span class="m"&gt;62&lt;/span&gt;   Subtensor&lt;span class="o"&gt;{&lt;/span&gt;int64&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.4%    &lt;span class="m"&gt;69&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.509s       &lt;span class="m"&gt;1&lt;/span&gt;.39e-06s     C     &lt;span class="m"&gt;365400&lt;/span&gt;       &lt;span class="m"&gt;42&lt;/span&gt;   Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.3%    &lt;span class="m"&gt;70&lt;/span&gt;.3%       &lt;span class="m"&gt;0&lt;/span&gt;.477s       &lt;span class="m"&gt;3&lt;/span&gt;.66e-06s     C     &lt;span class="m"&gt;130500&lt;/span&gt;       &lt;span class="m"&gt;15&lt;/span&gt;   Join
   &lt;span class="m"&gt;1&lt;/span&gt;.1%    &lt;span class="m"&gt;71&lt;/span&gt;.4%       &lt;span class="m"&gt;0&lt;/span&gt;.391s       &lt;span class="m"&gt;2&lt;/span&gt;.25e-06s     C     &lt;span class="m"&gt;174000&lt;/span&gt;       &lt;span class="m"&gt;20&lt;/span&gt;   Sum&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;acc_dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;float64&lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.1%    &lt;span class="m"&gt;72&lt;/span&gt;.5%       &lt;span class="m"&gt;0&lt;/span&gt;.383s       &lt;span class="m"&gt;2&lt;/span&gt;.20e-05s     Py    &lt;span class="m"&gt;17400&lt;/span&gt;        &lt;span class="m"&gt;2&lt;/span&gt;   ARange&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;int64&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
   ... &lt;span class="o"&gt;(&lt;/span&gt;remaining &lt;span class="m"&gt;107&lt;/span&gt; Ops account &lt;span class="k"&gt;for&lt;/span&gt;  &lt;span class="m"&gt;27&lt;/span&gt;.51%&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;.74s&lt;span class="o"&gt;)&lt;/span&gt; of the runtime&lt;span class="o"&gt;)&lt;/span&gt;

Apply
------
&amp;lt;% time&amp;gt; &amp;lt;sum %&amp;gt; &amp;lt;apply time&amp;gt; &amp;lt;&lt;span class="nb"&gt;time&lt;/span&gt; per call&amp;gt; &amp;lt;&lt;span class="c1"&gt;#call&amp;gt; &amp;lt;id&amp;gt; &amp;lt;Apply name&amp;gt;&lt;/span&gt;
   &lt;span class="m"&gt;2&lt;/span&gt;.8%     &lt;span class="m"&gt;2&lt;/span&gt;.8%       &lt;span class="m"&gt;0&lt;/span&gt;.993s       &lt;span class="m"&gt;1&lt;/span&gt;.14e-04s   &lt;span class="m"&gt;8700&lt;/span&gt;   &lt;span class="m"&gt;516&lt;/span&gt;   CorrMM_gradInputs&lt;span class="o"&gt;{&lt;/span&gt;valid, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)}(&lt;/span&gt;Subtensor&lt;span class="o"&gt;{&lt;/span&gt;::, ::, ::int64, ::int64&lt;span class="o"&gt;}&lt;/span&gt;.0, AdvancedIncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False,  &lt;span class="nv"&gt;set_instead_of_inc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;2&lt;/span&gt;.8%     &lt;span class="m"&gt;5&lt;/span&gt;.6%       &lt;span class="m"&gt;0&lt;/span&gt;.993s       &lt;span class="m"&gt;1&lt;/span&gt;.14e-04s   &lt;span class="m"&gt;8700&lt;/span&gt;   &lt;span class="m"&gt;514&lt;/span&gt;   CorrMM_gradInputs&lt;span class="o"&gt;{&lt;/span&gt;valid, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)}(&lt;/span&gt;Subtensor&lt;span class="o"&gt;{&lt;/span&gt;::, ::, ::int64, ::int64&lt;span class="o"&gt;}&lt;/span&gt;.0, AdvancedIncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False,  &lt;span class="nv"&gt;set_instead_of_inc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;2&lt;/span&gt;.3%     &lt;span class="m"&gt;7&lt;/span&gt;.9%       &lt;span class="m"&gt;0&lt;/span&gt;.813s       &lt;span class="m"&gt;9&lt;/span&gt;.34e-05s   &lt;span class="m"&gt;8700&lt;/span&gt;   &lt;span class="m"&gt;515&lt;/span&gt;   CorrMM_gradWeights&lt;span class="o"&gt;{&lt;/span&gt;valid, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)}(&lt;/span&gt;Subtensor&lt;span class="o"&gt;{&lt;/span&gt;::, ::, ::, :int64:&lt;span class="o"&gt;}&lt;/span&gt;.0, AdvancedIncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False,  &lt;span class="nv"&gt;set_instead_of_inc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;2&lt;/span&gt;.3%    &lt;span class="m"&gt;10&lt;/span&gt;.2%       &lt;span class="m"&gt;0&lt;/span&gt;.807s       &lt;span class="m"&gt;9&lt;/span&gt;.28e-05s   &lt;span class="m"&gt;8700&lt;/span&gt;   &lt;span class="m"&gt;517&lt;/span&gt;   CorrMM_gradWeights&lt;span class="o"&gt;{&lt;/span&gt;valid, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)}(&lt;/span&gt;Subtensor&lt;span class="o"&gt;{&lt;/span&gt;::, ::, ::, :int64:&lt;span class="o"&gt;}&lt;/span&gt;.0, AdvancedIncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False,  &lt;span class="nv"&gt;set_instead_of_inc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;2&lt;/span&gt;.1%    &lt;span class="m"&gt;12&lt;/span&gt;.3%       &lt;span class="m"&gt;0&lt;/span&gt;.758s       &lt;span class="m"&gt;8&lt;/span&gt;.71e-05s   &lt;span class="m"&gt;8700&lt;/span&gt;   &lt;span class="m"&gt;440&lt;/span&gt;   CorrMM&lt;span class="o"&gt;{&lt;/span&gt;valid, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)}(&lt;/span&gt;Subtensor&lt;span class="o"&gt;{&lt;/span&gt;::, ::, ::, :int64:&lt;span class="o"&gt;}&lt;/span&gt;.0, Subtensor&lt;span class="o"&gt;{&lt;/span&gt;::, ::, ::int64, ::int64&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;2&lt;/span&gt;.1%    &lt;span class="m"&gt;14&lt;/span&gt;.4%       &lt;span class="m"&gt;0&lt;/span&gt;.742s       &lt;span class="m"&gt;8&lt;/span&gt;.53e-05s   &lt;span class="m"&gt;8700&lt;/span&gt;   &lt;span class="m"&gt;736&lt;/span&gt;   Split&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;}(&lt;/span&gt;InplaceDimShuffle&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,0,2&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, &amp;lt;TensorType&lt;span class="o"&gt;(&lt;/span&gt;int64, vector&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.4%    &lt;span class="m"&gt;15&lt;/span&gt;.8%       &lt;span class="m"&gt;0&lt;/span&gt;.485s       &lt;span class="m"&gt;5&lt;/span&gt;.57e-05s   &lt;span class="m"&gt;8700&lt;/span&gt;   &lt;span class="m"&gt;966&lt;/span&gt;   Split&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}(&lt;/span&gt;Elemwise&lt;span class="o"&gt;{&lt;/span&gt;add,no_inplace&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, MakeVector&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;int64&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.3%    &lt;span class="m"&gt;17&lt;/span&gt;.1%       &lt;span class="m"&gt;0&lt;/span&gt;.476s       &lt;span class="m"&gt;5&lt;/span&gt;.47e-05s   &lt;span class="m"&gt;8700&lt;/span&gt;   &lt;span class="m"&gt;583&lt;/span&gt;   Split&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}(&lt;/span&gt;IncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;Inc&lt;span class="p"&gt;;&lt;/span&gt;::, ::, ::, :int64:&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;,&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.3%    &lt;span class="m"&gt;18&lt;/span&gt;.5%       &lt;span class="m"&gt;0&lt;/span&gt;.475s       &lt;span class="m"&gt;5&lt;/span&gt;.46e-05s   &lt;span class="m"&gt;8700&lt;/span&gt;   &lt;span class="m"&gt;836&lt;/span&gt;   Split&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;}(&lt;/span&gt;InplaceDimShuffle&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,0,2&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, &amp;lt;TensorType&lt;span class="o"&gt;(&lt;/span&gt;int64, vector&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.2%    &lt;span class="m"&gt;19&lt;/span&gt;.7%       &lt;span class="m"&gt;0&lt;/span&gt;.433s       &lt;span class="m"&gt;4&lt;/span&gt;.98e-05s   &lt;span class="m"&gt;8700&lt;/span&gt;   &lt;span class="m"&gt;521&lt;/span&gt;   AdvancedIncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False,  &lt;span class="nv"&gt;set_instead_of_inc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False&lt;span class="o"&gt;}(&lt;/span&gt;TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;, ..28&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;0&lt;/span&gt;.0&lt;span class="o"&gt;}&lt;/span&gt;, Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, ARange&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;int64&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, ARange&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;int64&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, SliceConstant&lt;span class="o"&gt;{&lt;/span&gt;None, None, None&lt;span class="o"&gt;})&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.2%    &lt;span class="m"&gt;20&lt;/span&gt;.9%       &lt;span class="m"&gt;0&lt;/span&gt;.418s       &lt;span class="m"&gt;4&lt;/span&gt;.81e-05s   &lt;span class="m"&gt;8700&lt;/span&gt;   &lt;span class="m"&gt;552&lt;/span&gt;   Split&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}(&lt;/span&gt;IncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;Inc&lt;span class="p"&gt;;&lt;/span&gt;::, ::, ::, :int64:&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;,&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.2%    &lt;span class="m"&gt;22&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.415s       &lt;span class="m"&gt;4&lt;/span&gt;.77e-05s   &lt;span class="m"&gt;8700&lt;/span&gt;   &lt;span class="m"&gt;877&lt;/span&gt;   Split&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;}(&lt;/span&gt;InplaceDimShuffle&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,0,2&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, &amp;lt;TensorType&lt;span class="o"&gt;(&lt;/span&gt;int64, vector&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.1%    &lt;span class="m"&gt;23&lt;/span&gt;.2%       &lt;span class="m"&gt;0&lt;/span&gt;.397s       &lt;span class="m"&gt;4&lt;/span&gt;.56e-05s   &lt;span class="m"&gt;8700&lt;/span&gt;   &lt;span class="m"&gt;443&lt;/span&gt;   AdvancedSubtensor&lt;span class="o"&gt;(&lt;/span&gt;CorrMM&lt;span class="o"&gt;{&lt;/span&gt;valid, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)}&lt;/span&gt;.0, ARange&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;int64&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, ARange&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;int64&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, SliceConstant&lt;span class="o"&gt;{&lt;/span&gt;None, None, None&lt;span class="o"&gt;})&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.1%    &lt;span class="m"&gt;24&lt;/span&gt;.2%       &lt;span class="m"&gt;0&lt;/span&gt;.377s       &lt;span class="m"&gt;4&lt;/span&gt;.33e-05s   &lt;span class="m"&gt;8700&lt;/span&gt;   &lt;span class="m"&gt;967&lt;/span&gt;   Split&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}(&lt;/span&gt;Elemwise&lt;span class="o"&gt;{&lt;/span&gt;add,no_inplace&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, MakeVector&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;int64&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;1&lt;/span&gt;.0%    &lt;span class="m"&gt;25&lt;/span&gt;.2%       &lt;span class="m"&gt;0&lt;/span&gt;.342s       &lt;span class="m"&gt;3&lt;/span&gt;.93e-05s   &lt;span class="m"&gt;8700&lt;/span&gt;   &lt;span class="m"&gt;531&lt;/span&gt;   CorrMM_gradInputs&lt;span class="o"&gt;{&lt;/span&gt;valid, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)}(&lt;/span&gt;Subtensor&lt;span class="o"&gt;{&lt;/span&gt;::, ::, ::int64, ::int64&lt;span class="o"&gt;}&lt;/span&gt;.0, AdvancedIncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False,  &lt;span class="nv"&gt;set_instead_of_inc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.9%    &lt;span class="m"&gt;26&lt;/span&gt;.1%       &lt;span class="m"&gt;0&lt;/span&gt;.316s       &lt;span class="m"&gt;3&lt;/span&gt;.63e-05s   &lt;span class="m"&gt;8700&lt;/span&gt;   &lt;span class="m"&gt;663&lt;/span&gt;   Dot22&lt;span class="o"&gt;(&lt;/span&gt;InplaceDimShuffle&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,0&lt;span class="o"&gt;}&lt;/span&gt;.0, Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.9%    &lt;span class="m"&gt;27&lt;/span&gt;.0%       &lt;span class="m"&gt;0&lt;/span&gt;.304s       &lt;span class="m"&gt;3&lt;/span&gt;.50e-05s   &lt;span class="m"&gt;8700&lt;/span&gt;   &lt;span class="m"&gt;506&lt;/span&gt;   AdvancedIncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False,  &lt;span class="nv"&gt;set_instead_of_inc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False&lt;span class="o"&gt;}(&lt;/span&gt;TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;, &lt;span class="m"&gt;4&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;, ..28&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;0&lt;/span&gt;.0&lt;span class="o"&gt;}&lt;/span&gt;, Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, ARange&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;int64&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, ARange&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;int64&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, SliceConstant&lt;span class="o"&gt;{&lt;/span&gt;None, None, None&lt;span class="o"&gt;})&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.8%    &lt;span class="m"&gt;27&lt;/span&gt;.8%       &lt;span class="m"&gt;0&lt;/span&gt;.298s       &lt;span class="m"&gt;3&lt;/span&gt;.42e-05s   &lt;span class="m"&gt;8700&lt;/span&gt;   &lt;span class="m"&gt;592&lt;/span&gt;   Split&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}(&lt;/span&gt;IncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;InplaceInc&lt;span class="p"&gt;;&lt;/span&gt;::, ::, ::, :int64:&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;,&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.8%    &lt;span class="m"&gt;28&lt;/span&gt;.6%       &lt;span class="m"&gt;0&lt;/span&gt;.290s       &lt;span class="m"&gt;3&lt;/span&gt;.34e-05s   &lt;span class="m"&gt;8700&lt;/span&gt;   &lt;span class="m"&gt;507&lt;/span&gt;   AdvancedIncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False,  &lt;span class="nv"&gt;set_instead_of_inc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False&lt;span class="o"&gt;}(&lt;/span&gt;TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;, &lt;span class="m"&gt;4&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;, ..28&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;0&lt;/span&gt;.0&lt;span class="o"&gt;}&lt;/span&gt;, Reshape&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, ARange&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;int64&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, ARange&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;int64&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, SliceConstant&lt;span class="o"&gt;{&lt;/span&gt;None, None, None&lt;span class="o"&gt;})&lt;/span&gt;
   &lt;span class="m"&gt;0&lt;/span&gt;.8%    &lt;span class="m"&gt;29&lt;/span&gt;.4%       &lt;span class="m"&gt;0&lt;/span&gt;.290s       &lt;span class="m"&gt;3&lt;/span&gt;.33e-05s   &lt;span class="m"&gt;8700&lt;/span&gt;   &lt;span class="m"&gt;556&lt;/span&gt;   Split&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}(&lt;/span&gt;IncSubtensor&lt;span class="o"&gt;{&lt;/span&gt;InplaceInc&lt;span class="p"&gt;;&lt;/span&gt;::, ::, ::, :int64:&lt;span class="o"&gt;}&lt;/span&gt;.0, TensorConstant&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;, TensorConstant&lt;span class="o"&gt;{(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;,&lt;span class="o"&gt;)&lt;/span&gt; of &lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt;
   ... &lt;span class="o"&gt;(&lt;/span&gt;remaining &lt;span class="m"&gt;1044&lt;/span&gt; Apply instances account &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="m"&gt;70&lt;/span&gt;.57%&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;24&lt;/span&gt;.99s&lt;span class="o"&gt;)&lt;/span&gt; of the runtime&lt;span class="o"&gt;)&lt;/span&gt;

Here are tips to potentially make your code run faster
                 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; you think of new ones, suggest them on the mailing list&lt;span class="o"&gt;)&lt;/span&gt;.
                 Test them first, as they are not guaranteed to always provide a speedup.
  Sorry, no tip &lt;span class="k"&gt;for&lt;/span&gt; today.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;結果確かに elemwise の演算は早くなっており、最終的に Time in 100 calls to Function.&lt;strong&gt;call&lt;/strong&gt; を 4.898488e+01s (最初の 0.876 倍) にできた。&lt;/p&gt;</content><category term="Theano"></category><category term="Machine Learning"></category></entry><entry><title>Indexing Theano Tensor</title><link href="https://guchio3.github.io/guchiBLO/Indexing_Theano_Tensor.html" rel="alternate"></link><published>2017-10-08T00:00:00+09:00</published><updated>2017-10-08T00:00:00+09:00</updated><author><name>guchio3</name></author><id>tag:guchio3.github.io,2017-10-08:/guchiBLO/Indexing_Theano_Tensor.html</id><summary type="html">&lt;p&gt;Theano tensor を条件に基いて indexing する方法&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Outline&lt;/h1&gt;
&lt;p&gt;Thenao tensor の要素のうち条件を満たすものを抽出する方法。&lt;br&gt;
私の場合は &lt;a href="https://research.fb.com/downloads/babi/"&gt;bAbI task&lt;/a&gt; という質問応答処理タスクを DL を使用して解く実装を行う際、 word の系列からモデルの応答に当たるものだけを抽出するのに用いたのでメモ。&lt;/p&gt;
&lt;p&gt;様々な実装があると思うが、今回は以下に示す方法により行った。&lt;br&gt;
具体的には、theano.tensor.eq と .nonzero() を用いて抽出したい箇所のインデックスを示すマスクを生成し、これにより抽出を行う。&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Details&lt;/h1&gt;
&lt;p&gt;次のような同じ系列長の２つの vector &lt;span class="math"&gt;\(v_a\)&lt;/span&gt;, &lt;span class="math"&gt;\(v_b\)&lt;/span&gt; があるとき、&lt;span class="math"&gt;\(v_a\)&lt;/span&gt; の要素が 0 となっている箇所に対応する &lt;span class="math"&gt;\(v_b\)&lt;/span&gt; の要素のみを抽出したい。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;v_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;v_b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以下が Theano 実装の一例。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;theano&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;theano.tensor&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;T&lt;/span&gt;

&lt;span class="n"&gt;v_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;v_a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;v_b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;v_b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ans_mask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v_a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nonzero&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;answers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v_b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ans_mask&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;fn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;theano&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;v_a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v_b&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;answers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;example_v_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;example_v_b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;example_v_a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;example_v_b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# [ 9.  7.  1.]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ちなみに、T.eq を適用後および .nonzero() を適用後のベクトルは以下のようになっている。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;theano&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;theano.tensor&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;T&lt;/span&gt;

&lt;span class="n"&gt;v_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;v_a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;eq_ans_mask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v_a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;nonzero_ans_mask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v_a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nonzero&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;eq_fn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;theano&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;v_a&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;eq_ans_mask&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;nonzero_fn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;theano&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;v_a&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;nonzero_ans_mask&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;example_v_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eq_fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;example_v_a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# [0 0 0 0 1 0 0 0 1 0 0 0 1]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nonzero_fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;example_v_a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# [array([ 4,  8, 12])] ])]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Theano"></category><category term="Machine Learning"></category></entry></feed>